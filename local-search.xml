<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>clickhouse 实现数据备份功能</title>
    <link href="/2025/09/20/db-clickhouse-backup/"/>
    <url>/2025/09/20/db-clickhouse-backup/</url>
    
    <content type="html"><![CDATA[<p>本文介绍两种clickhouse的数据备份方式，一种是官方提供的备份策略，一种是通过开源插件实现的备份策略</p><h2 id="官方备份策略"><a href="#官方备份策略" class="headerlink" title="官方备份策略"></a>官方备份策略</h2><p>clickhouse官方也提供了数据备份的功能，支持将数据备份到本地磁盘或者S3存储。</p><p>官方的备份策略，本质上是通过BACKUP 和 RESTORE 两个sql关键字来实现的, 这就导致，我们在配置clickhouse备份任务的时候，需要登录clickhouse 才行。</p><blockquote><p>备份可以是完整的或增量的，可以包含表（包括物化视图、投影和字典）和数据库。备份可以是同步的（默认）或异步的。可以压缩备份。备份可以设有密码保护。</p></blockquote><h3 id="备份到本地硬盘"><a href="#备份到本地硬盘" class="headerlink" title="备份到本地硬盘"></a>备份到本地硬盘</h3><ol><li>创建数据备份存储目录，比如<code>/backup</code></li><li>添加<code>/etc/clickhouse-server/config.d/backup_disk.xml</code>文件，内容如下：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">clickhouse</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">storage_configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">disks</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">backups</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>local<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/backups/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">backups</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">disks</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">storage_configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">backups</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">allowed_disk</span>&gt;</span>backups<span class="hljs-tag">&lt;/<span class="hljs-name">allowed_disk</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">allowed_path</span>&gt;</span>/backups/<span class="hljs-tag">&lt;/<span class="hljs-name">allowed_path</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">backups</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">clickhouse</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>sql命令</li></ol><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">BACKUP<span class="hljs-operator">|</span>RESTORE<br> <span class="hljs-keyword">TABLE</span> [db.]table_name [<span class="hljs-keyword">AS</span> [db.]table_name_in_backup]<br>   [<span class="hljs-keyword">PARTITION</span>[S] partition_expr [,...]] <span class="hljs-operator">|</span><br> DICTIONARY [db.]dictionary_name [<span class="hljs-keyword">AS</span> [db.]name_in_backup] <span class="hljs-operator">|</span><br> DATABASE database_name [<span class="hljs-keyword">AS</span> database_name_in_backup]<br>   [<span class="hljs-keyword">EXCEPT</span> TABLES ...] <span class="hljs-operator">|</span><br> TEMPORARY <span class="hljs-keyword">TABLE</span> table_name [<span class="hljs-keyword">AS</span> table_name_in_backup] <span class="hljs-operator">|</span><br> <span class="hljs-keyword">VIEW</span> view_name [<span class="hljs-keyword">AS</span> view_name_in_backup] <span class="hljs-operator">|</span><br> <span class="hljs-keyword">ALL</span> [<span class="hljs-keyword">EXCEPT</span> &#123;TABLES<span class="hljs-operator">|</span>DATABASES&#125;...] &#125; [,...]<br> [<span class="hljs-keyword">ON</span> CLUSTER <span class="hljs-string">&#x27;cluster_name&#x27;</span>]<br> <span class="hljs-keyword">TO</span><span class="hljs-operator">|</span><span class="hljs-keyword">FROM</span> File(<span class="hljs-string">&#x27;&lt;path&gt;/&lt;filename&gt;&#x27;</span>) <span class="hljs-operator">|</span> Disk(<span class="hljs-string">&#x27;&lt;disk_name&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;path&gt;/&#x27;</span>) <span class="hljs-operator">|</span> S3(<span class="hljs-string">&#x27;&lt;S3 endpoint&gt;/&lt;path&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;Access key ID&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;Secret access key&gt;&#x27;</span>)<br> [SETTINGS base_backup <span class="hljs-operator">=</span> File(<span class="hljs-string">&#x27;&lt;path&gt;/&lt;filename&gt;&#x27;</span>) <span class="hljs-operator">|</span> Disk(...) <span class="hljs-operator">|</span> S3(<span class="hljs-string">&#x27;&lt;S3 endpoint&gt;/&lt;path&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;Access key ID&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;Secret access key&gt;&#x27;</span>)]<br><br></code></pre></td></tr></table></figure><ul><li>BACKUP|RESTORE : 关键字</li><li>TABLE|DICTIONARY|DATABASE|TEMPORARY TABLE|VIEW|ALL: 备份的对象类型, 表|字典|数据库|临时表|视图|所有</li><li>在 ClickHouse 的 23.4 版本之前，ALL 只能适用于 RESTORE 命令。</li><li>SETTINGS:<ul><li>id：备份或恢复操作的 id，随机生成 UUID，若未手动指定则使用。若已有同一 id 的操作在运行，则抛出异常。</li><li>compression_method 和 compression_level</li><li>base_backup：此源的前一个备份的目标。例如，Disk(‘backups’, ‘1.zip’)</li><li>use_same_s3_credentials_for_base_backup：基础备份是否应从查询中继承凭据。仅对 S3 有效。</li><li>use_same_password_for_base_backup：基础备份存档是否应从查询中继承密码。 </li><li>structure_only：如果启用，仅允许备份或恢复 CREATE 语句，而不包括表的数据</li><li>s3_storage_class：用于 S3 备份的存储类。例如，STANDARD</li></ul></li></ul><ol start="4"><li>demo</li></ol><ul><li>备份表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 备份表, 这里的backups 就是配置文件里的 allowed_disk</span><br>BACKUP <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">TO</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;1.zip&#x27;</span>);<br><br><span class="hljs-comment">-- 恢复表</span><br>RESTORE <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">FROM</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;1.zip&#x27;</span>)<br><span class="hljs-comment">-- 恢复表，并覆盖数据</span><br>RESTORE <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">FROM</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;1.zip&#x27;</span>) SETTINGS allow_non_empty_tables<span class="hljs-operator">=</span><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>备份并重命名表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- table3 重命名为 table4 并备份</span><br>BACKUP <span class="hljs-keyword">TABLE</span> test.table3 <span class="hljs-keyword">AS</span> test.table4 <span class="hljs-keyword">TO</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;2.zip&#x27;</span>)<br><br><span class="hljs-operator">-</span> <span class="hljs-keyword">table</span> 重命名为 table2 并恢复<br>RESTORE <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">AS</span> test.table2 <span class="hljs-keyword">FROM</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;1.zip&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>增量备份<br>增量备份需要从一个基础备份来开始</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">BACKUP <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">TO</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;incremental-a.zip&#x27;</span>) SETTINGS base_backup <span class="hljs-operator">=</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;d.zip&#x27;</span>)<br><br><span class="hljs-operator">-</span> 从增量备份和 base_backup 恢复所有数据到新表 test.table2<br>RESTORE <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">AS</span> test.table2 <span class="hljs-keyword">FROM</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;incremental-a.zip&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>备份设置密码</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">BACKUP <span class="hljs-keyword">TABLE</span> test.table<br>  <span class="hljs-keyword">TO</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;password-protected.zip&#x27;</span>)<br>  SETTINGS password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;qwerty&#x27;</span>;<br>  <br>RESTORE <span class="hljs-keyword">TABLE</span> test.table<br>  <span class="hljs-keyword">FROM</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;password-protected.zip&#x27;</span>)<br>  SETTINGS password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;qwerty&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>压缩</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">BACKUP <span class="hljs-keyword">TABLE</span> test.table<br>  <span class="hljs-keyword">TO</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;filename.zip&#x27;</span>)<br>  SETTINGS compression_method<span class="hljs-operator">=</span><span class="hljs-string">&#x27;lzma&#x27;</span>, compression_level<span class="hljs-operator">=</span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><ul><li>恢复特定分区<br>如果需要恢复与表相关的特定分区，可以指定这些分区。要从备份恢复分区 1 和 4：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">RESTORE <span class="hljs-keyword">TABLE</span> test.table PARTITIONS <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span><br>  <span class="hljs-keyword">FROM</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;filename.zip&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>备份为 tar</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">BACKUP <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">TO</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;1.tar&#x27;</span>)<br><br>RESTORE <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">FROM</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;1.tar&#x27;</span>)<br><br><span class="hljs-comment">-- 用 gzip 压缩 tar 存档</span><br><span class="hljs-comment">-- 支持的压缩文件后缀为 tar.gz、.tgz、tar.bz2、tar.lzma、.tar.zst、.tzst 和 .tar.xz</span><br>BACKUP <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">TO</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;1.tar.gz&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>异步备份</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">BACKUP <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">TO</span> Disk(<span class="hljs-string">&#x27;backups&#x27;</span>, <span class="hljs-string">&#x27;1.tar&#x27;</span>) ASYNC<br></code></pre></td></tr></table></figure><ul><li>检查备份状态</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> system.backups <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;7678b0b3-f519-4e6e-811f-5a0781a4eb52&#x27;</span> FORMAT Vertical<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> system.backup_log <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;7678b0b3-f519-4e6e-811f-5a0781a4eb52&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> event_time_microseconds <span class="hljs-keyword">ASC</span> FORMAT Vertical<br></code></pre></td></tr></table></figure><h3 id="备份到S3"><a href="#备份到S3" class="headerlink" title="备份到S3"></a>备份到S3</h3><ol><li>获得S3 key和密钥</li></ol><ul><li>S3 端点， 例如 <a href="https://xxx.com/backup-S3/">https://xxx.com/backup-S3/</a></li><li>访问密钥 ID， 例如 ABC123</li><li>秘密访问密钥， 例如 Abc+123</li></ul><ol start="2"><li>demo</li></ol><ul><li>备份表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">BACKUP <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">TO</span> S3(<span class="hljs-string">&#x27;https://xxx.com/backup-S3/my_backup&#x27;</span>, <span class="hljs-string">&#x27;ABC123&#x27;</span>, <span class="hljs-string">&#x27;Abc+123&#x27;</span>) <br></code></pre></td></tr></table></figure><ul><li>增量备份</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">BACKUP <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">TO</span> S3(<span class="hljs-string">&#x27;https://xxx.com/backup-S3/my_incremental&#x27;</span>, <span class="hljs-string">&#x27;ABC123&#x27;</span>, <span class="hljs-string">&#x27;Abc+123&#x27;</span>) SETTINGS base_backup <span class="hljs-operator">=</span> S3(<span class="hljs-string">&#x27;https://xxx.com/backup-S3/my_backup&#x27;</span>, <span class="hljs-string">&#x27;ABC123&#x27;</span>, <span class="hljs-string">&#x27;Abc+123&#x27;</span>) <br><br><span class="hljs-comment">-- 恢复</span><br>RESTORE <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">AS</span> data3 <span class="hljs-keyword">FROM</span> S3(<span class="hljs-string">&#x27;https://xxx.com/backup-S3/my_incremental&#x27;</span>, <span class="hljs-string">&#x27;ABC123&#x27;</span>, <span class="hljs-string">&#x27;Abc+123&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="3"><li>配置文件</li></ol><p>如果觉得每次都在sql里写s3的配置，既繁琐，还不安全，可以参考上面配置文件，将s3的配置写到配置文件里，然后通过命令行参数来指定配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">clickhouse</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">storage_configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">disks</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">s3_plain</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>s3_plain<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">endpoint</span>&gt;</span>https://xxx.com/backup-S3<span class="hljs-tag">&lt;/<span class="hljs-name">endpoint</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">access_key_id</span>&gt;</span>ABC123<span class="hljs-tag">&lt;/<span class="hljs-name">access_key_id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">secret_access_key</span>&gt;</span>Abc+123<span class="hljs-tag">&lt;/<span class="hljs-name">secret_access_key</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">s3_plain</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">disks</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">policies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">s3</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">volumes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">disk</span>&gt;</span>s3_plain<span class="hljs-tag">&lt;/<span class="hljs-name">disk</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">volumes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">s3</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">policies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">storage_configuration</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">backups</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">allowed_disk</span>&gt;</span>s3_plain<span class="hljs-tag">&lt;/<span class="hljs-name">allowed_disk</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">backups</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">clickhouse</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后就可以通过s3_plain 来备份了</p><ul><li>备份表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">BACKUP <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">TO</span> Disk(<span class="hljs-string">&#x27;s3_plain&#x27;</span>, <span class="hljs-string">&#x27;cloud_backup&#x27;</span>);<br><br>RESTORE <span class="hljs-keyword">TABLE</span> test.table <span class="hljs-keyword">FROM</span> Disk(<span class="hljs-string">&#x27;s3_plain&#x27;</span>, <span class="hljs-string">&#x27;cloud_backup&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="clickhouse-backup"><a href="#clickhouse-backup" class="headerlink" title="clickhouse-backup"></a>clickhouse-backup</h2><p>如果觉得clickhouse官方的sql备份方式不方便，或者配置定时备份机制不容易，可以考虑使用clickhouse-backup，它是一个开源的备份工具，可以自动备份和恢复ClickHouse数据，且同样支持本地备份和S3备份,除此之外还支持ftp&#x2F;sftp、gcs、cos、api等备份方式</p><ol><li>安装clickhouse-backup<br>从<a href="https://github.com/Altinity/clickhouse-backup/releases">官方仓库</a>下载并安装clickhouse-backup</li></ol><p>如果github连不上或者比较慢的话，可以从<a href="">这里</a>下载,这是我用过的2.6.39版本</p><p>下载完成后，解压到你希望安装的目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf clickhouse-backup.tar.gz<br></code></pre></td></tr></table></figure><p>然后添加配置文件&#x2F;etc&#x2F;clickhouse-backup&#x2F;config.yml（默认路径），内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">clickhouse:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 若有密码需填写</span><br>  <span class="hljs-attr">database:</span> <span class="hljs-string">&quot;&quot;</span>   <span class="hljs-comment"># 留空表示所有库，或指定目标库my_db</span><br><br><span class="hljs-attr">backup:</span><br>  <span class="hljs-attr">dir:</span> <span class="hljs-string">&quot;/tmp/clickhouse-backup&quot;</span>  <span class="hljs-comment"># 备份存储目录</span><br>  <span class="hljs-attr">compression:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 启用压缩</span><br>  <span class="hljs-comment"># 可选：备份到S3（需配置aws_access_key等）</span><br>  <span class="hljs-comment"># s3:</span><br>  <span class="hljs-comment">#   endpoint: &quot;s3.amazonaws.com&quot;</span><br>  <span class="hljs-comment">#   bucket: &quot;my-clickhouse-backups&quot;</span><br>  <span class="hljs-comment">#   access_key: &quot;&quot;</span><br>  <span class="hljs-comment">#   secret_key: &quot;&quot;</span><br></code></pre></td></tr></table></figure><p>具体参考官方配置</p><p>然后就可以使用clickhouse-backup进行备份了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建备份</span><br>clickhouse-backup create my_backup<br><span class="hljs-comment"># 使用指定配置创建备份</span><br>clickhouse-backup create --config ./config.yml  my_backup<br><br><span class="hljs-comment"># 列出备份</span><br>clickhouse-backup list<br><br><span class="hljs-comment"># 恢复备份</span><br>clickhouse-backup restore my_backup<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://clickhouse.com/docs/zh/operations/backup#backup-to-a-local-disk">clickhouse官方备份策略</a></p><p><a href="https://github.com/Altinity/clickhouse-backup">clickhouse-backup官方配置</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clickhouse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一键生成TLS证书</title>
    <link href="/2025/06/16/site-tls-tls-cert-create/"/>
    <url>/2025/06/16/site-tls-tls-cert-create/</url>
    
    <content type="html"><![CDATA[<p>TLS 证书（也称为 SSL 证书）是用于在客户端和服务器之间建立安全加密通信的基础组件，广泛应用于 HTTPS、API 通信、邮件传输等领域,是现代互联网安全的基础。</p><p>比如HTTPS里的S指的就是TLS。</p><h2 id="🔐-TLS-证书的本质"><a href="#🔐-TLS-证书的本质" class="headerlink" title="🔐 TLS 证书的本质"></a>🔐 TLS 证书的本质</h2><p>TLS 证书本质上是一个 X.509 格式的数字文件，包含以下关键信息：</p><table><thead><tr><th>内容</th><th>描述</th></tr></thead><tbody><tr><td>公钥（Public Key）</td><td>用于加密数据或验证签名</td></tr><tr><td>主题（Subject）</td><td>包括证书持有者的身份信息，如域名（CN）、组织名称等</td></tr><tr><td>颁发者（Issuer）</td><td>签发该证书的 CA（证书颁发机构）信息</td></tr><tr><td>有效期（Validity）</td><td>证书有效起止时间</td></tr><tr><td>签名算法（Signature Algorithm）</td><td>使用的加密算法</td></tr><tr><td>扩展字段（Extensions）</td><td>如 SAN（subjectAltName）、EKU（extendedKeyUsage）等</td></tr></tbody></table><h2 id="🌐-TLS-证书的作用"><a href="#🌐-TLS-证书的作用" class="headerlink" title="🌐 TLS 证书的作用"></a>🌐 TLS 证书的作用</h2><ol><li><strong>身份认证（Authentication）</strong><ul><li>客户端可以验证服务器的身份，防止连接到假冒的服务。</li><li>支持双向认证（mTLS），客户端也可以被服务端验证。</li></ul></li><li><strong>数据加密（Encryption）</strong><ul><li>客户端使用服务器的公钥加密数据，只有拥有私钥的服务器才能解密。</li><li>建立连接后使用对称加密提高效率。</li></ul></li><li><strong>完整性保护（Integrity Protection）</strong><ul><li>使用消息摘要机制（如 HMAC）保证数据未被篡改。</li></ul></li><li><strong>支持多域名&#x2F;IP（通过 SAN）</strong><ul><li>可在一个证书中配置多个域名、IP 地址等访问方式。</li></ul></li></ol><p>比如我们浏览器里常用的https协议，就通过TLS的身份认证机制，构建出了一套完整的<code>信任链</code>体系，以此来保护我们的上网安全，在我们莫名奇妙的进入到一个未经认证的钓鱼网站时，给出警示。</p><p><img src="/../../../images/tech/safe/tls/google_https.png" alt="经过安全认证的网站"></p><h2 id="🏗️-TLS证书自定义签发"><a href="#🏗️-TLS证书自定义签发" class="headerlink" title="🏗️ TLS证书自定义签发"></a>🏗️ TLS证书自定义签发</h2><h3 id="先生成根证书及key"><a href="#先生成根证书及key" class="headerlink" title="先生成根证书及key"></a>先生成根证书及key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建证书目录</span><br><span class="hljs-built_in">mkdir</span> -p certs<br><br><span class="hljs-comment"># 在受信任的机器（如管理员笔记本或受控运维节点）上生成 CA 私钥，建议使用强加密并保护私钥文件权限</span><br>openssl genrsa -aes256 -out ca-key.pem 4096<br></code></pre></td></tr></table></figure><ul><li>-aes256 表示使用 AES-256 加密私钥</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用上一步生成的 CA 私钥，创建自签名 CA 证书，设定合适的 CN 和有效期：</span><br>openssl req -new -x509 -days 3650 -key ca-key.pem -sha256 -out ca.pem -subj <span class="hljs-string">&quot;/CN=docker.com/O=MyCompany&quot;</span><br><br></code></pre></td></tr></table></figure><ul><li>-x509 表示生成自签名证书</li><li>-days 3650 表示证书有效期 10 年</li><li>-subj “&#x2F;CN&#x3D;docker-CA” 中CN (Common Name) ，可以标识一些证书的信息、用途等，比如域名等 &#x2F;O组织，证书所属组织</li></ul><p>可选的<code>subj</code>字段内容</p><table><thead><tr><th>字段缩写</th><th>全称</th><th>示例</th></tr></thead><tbody><tr><td><code>CN</code></td><td>Common Name</td><td><code>/CN=example.com</code></td></tr><tr><td><code>O</code></td><td>Organization</td><td><code>/O=My Company</code></td></tr><tr><td><code>OU</code></td><td>Organizational Unit</td><td><code>/OU=IT Department</code></td></tr><tr><td><code>L</code></td><td>Locality</td><td><code>/L=Beijing</code></td></tr><tr><td><code>ST</code></td><td>State or Province</td><td><code>/ST=Beijing</code></td></tr><tr><td><code>C</code></td><td>Country</td><td><code>/C=CN</code></td></tr><tr><td><code>emailAddress</code></td><td>Email Address</td><td><code>/emailAddress=admin@example.com</code></td></tr></tbody></table><h3 id="根据根证书创建服务端证书"><a href="#根据根证书创建服务端证书" class="headerlink" title="根据根证书创建服务端证书"></a>根据根证书创建服务端证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成服务端私钥和证书</span><br>openssl genrsa -out server-key.pem 4096<br>openssl req -subj <span class="hljs-string">&quot;/CN=&lt;服务器IP或域名&gt;&quot;</span> -sha256 -new -key server-key.pem -out server.csr<br><span class="hljs-comment"># 配置</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;subjectAltName = IP:&lt;服务器IP&gt;,IP:127.0.0.1&quot;</span> &gt; extfile.cnf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;extendedKeyUsage = serverAuth&quot;</span> &gt;&gt; extfile.cnf<br><br><span class="hljs-comment"># 创建证书</span><br>openssl x509 -req -days 3650 -<span class="hljs-keyword">in</span> server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfile.cnf<br><span class="hljs-comment"># 签发完成后，可删除 CSR 和扩展配置文件以减少泄露风险</span><br><span class="hljs-comment"># rm server.csr extfile.cnf</span><br></code></pre></td></tr></table></figure><h3 id="根据根证书创建客户端证书"><a href="#根据根证书创建客户端证书" class="headerlink" title="根据根证书创建客户端证书"></a>根据根证书创建客户端证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成客户端私钥和证书</span><br>openssl genrsa -out client-key.pem 4096<br>openssl req -subj <span class="hljs-string">&quot;/CN=client&quot;</span> -new -key client-key.pem -out client.csr<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;extendedKeyUsage = clientAuth&quot;</span> &gt; extfile-client.cnf<br>openssl x509 -req -days 3650 -<span class="hljs-keyword">in</span> client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out client-cert.pem -extfile extfile-client.cnf<br></code></pre></td></tr></table></figure><h3 id="配置证书权限"><a href="#配置证书权限" class="headerlink" title="配置证书权限"></a>配置证书权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> -v 400 /etc/docker/certs/*key.pem   <span class="hljs-comment"># 私钥仅允许 root 读取</span><br><span class="hljs-built_in">chmod</span> -v 444 /etc/docker/certs/*.pem      <span class="hljs-comment"># 证书文件只读[8](@ref)</span><br></code></pre></td></tr></table></figure><h3 id="验证证书"><a href="#验证证书" class="headerlink" title="验证证书"></a>验证证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl s_client -connect &lt;服务器IP&gt;:&lt;端口&gt; -CAfile ~/.docker/ca.pem -cert ~/.docker/client-cert.pem -key ~/.docker/client-key.pem<br></code></pre></td></tr></table></figure><p>如果输出以下内容，表名证书有效</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso">CONNECTED(<span class="hljs-number">00000003</span>)<br><span class="hljs-params">...</span><br>SSL handshake has read XXX <span class="hljs-built_in">bytes</span> <span class="hljs-literal">and</span> written XXX <span class="hljs-built_in">bytes</span><br><span class="hljs-params">...</span><br>Verify <span class="hljs-keyword">return</span> code: <span class="hljs-number">0</span> (ok)<br></code></pre></td></tr></table></figure><h2 id="一键创建证书脚本"><a href="#一键创建证书脚本" class="headerlink" title="一键创建证书脚本"></a>一键创建证书脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 自动创建tls 客户端和服务端证书</span><br><br><span class="hljs-comment"># 配置变量</span><br>YOUR_COMPANY=<span class="hljs-string">&quot;your company&quot;</span>  <span class="hljs-comment"># 公司名称&quot;</span><br>SERVER_HOST=<span class="hljs-string">&quot;192.168.1.2&quot;</span>  <span class="hljs-comment"># 服务域名更好</span><br>TIMEOUT_DAYS=365  <span class="hljs-comment"># 证书有效期</span><br>PASSWORD=<span class="hljs-string">&quot;123456&quot;</span>  <span class="hljs-comment"># 密码保护CA私钥</span><br><br><span class="hljs-comment"># 创建证书目录</span><br><span class="hljs-built_in">mkdir</span> -p certs &amp;&amp; <span class="hljs-built_in">cd</span> certs<br><br><span class="hljs-comment"># 创建CA证书</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;🔐 正在生成加密的 RSA 私钥...&quot;</span><br>openssl genrsa -aes256 -passout pass:<span class="hljs-variable">$PASSWORD</span>  -out ca-key.pem 4096<br>openssl req -new -x509 -days <span class="hljs-string">&quot;<span class="hljs-variable">$TIMEOUT_DAYS</span>&quot;</span> -key ca-key.pem -sha256 -passin pass:<span class="hljs-variable">$PASSWORD</span> -out ca.pem -subj <span class="hljs-string">&quot;/CN=<span class="hljs-variable">$SERVER_HOST</span>/O=<span class="hljs-variable">$YOUR_COMPANY</span>&quot;</span><br><br><span class="hljs-comment"># 创建服务端证书</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;㊙ 开始创建服务端证书...&quot;</span><br>openssl genrsa -out server-key.pem 4096<br>openssl req -subj <span class="hljs-string">&quot;/CN=<span class="hljs-variable">$SERVER_HOST</span>&quot;</span> -sha256 -new -key server-key.pem -out server.csr<br><span class="hljs-comment"># 配置</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;subjectAltName = IP:<span class="hljs-variable">$SERVER_HOST</span>,IP:127.0.0.1&quot;</span> &gt; extfile.cnf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;extendedKeyUsage = serverAuth&quot;</span> &gt;&gt; extfile.cnf<br><span class="hljs-comment"># 创建证书</span><br>openssl x509 -req -days <span class="hljs-string">&quot;<span class="hljs-variable">$TIMEOUT_DAYS</span>&quot;</span> -<span class="hljs-keyword">in</span> server.csr -CA ca.pem -CAkey ca-key.pem -passin pass:<span class="hljs-variable">$PASSWORD</span> -CAcreateserial -out server-cert.pem -extfile extfile.cnf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;㊙ 服务端证书创建完成，保存为 server-cert.pem, server-key.pem&quot;</span><br><br><span class="hljs-comment"># 生成客户端私钥和证书</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;🔑 开始创建客户端证书...&quot;</span><br>openssl genrsa -out client-key.pem 4096<br>openssl req -subj <span class="hljs-string">&quot;/CN=client&quot;</span> -new -key client-key.pem -out client.csr<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;extendedKeyUsage = clientAuth&quot;</span> &gt; extfile-client.cnf<br>openssl x509 -req -days <span class="hljs-string">&quot;<span class="hljs-variable">$TIMEOUT_DAYS</span>&quot;</span> -<span class="hljs-keyword">in</span> client.csr -CA ca.pem -CAkey ca-key.pem -passin pass:<span class="hljs-variable">$PASSWORD</span> -CAcreateserial -out client-cert.pem -extfile extfile-client.cnf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;🔑 客户端证书创建完成，保存为 client-cert.pem 和 client-key.pem&quot;</span><br><br><span class="hljs-comment"># 清理临时文件</span><br><span class="hljs-comment"># 签发完成后，可删除 CSR 和扩展配置文件以减少泄露风险</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;是否删除临时文件 (server.csr, extfile.cnf, client.csr, extfile-client.cnf)? [y/n] &quot;</span> -r answer<br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$answer</span> =~ ^[Yy]$ ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">rm</span> server.csr extfile.cnf client.csr extfile-client.cnf<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;临时文件已删除。&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;临时文件保留。&quot;</span><br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tls</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>普罗米修斯自定义label作为变量的显示值和实际值</title>
    <link href="/2025/05/27/frame-prometheus-select-label-var/"/>
    <url>/2025/05/27/frame-prometheus-select-label-var/</url>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>当使用普罗米修斯监控mysql的时候，我们使用的是docker来部署prometheus，使用docker版的<code>mysqld-exporter</code>来实现对mysql指标的监控。</p><p>然后，问题来了, 在普罗米修斯的架构体系中，普罗米修斯负责从<code>mysqld-exporter</code>来拉取数据，然后在grafana看板里展示监控的指标,而我们为了节省机器（当然第一次部署也不熟），将prometheus和<code>mysqld-exporter</code>部署在了一台机器上，然后利用<code>mysqld-exporter</code>远程抓取的功能从mysql服务器里抓取数据。</p><p>理论上，这么跑也没有问题，我们也成功的将数据抓取到了。</p><p>但是在显示的时候，在host主机筛选框里，显示的是<code>mysqld-exporter</code>所在的主机的ip地址，而我们实际想要的是mysql服务器的ip地址。</p><p>以下是我们当时的验证阶段的prometheus架构：</p><p><img src="/../../images/tech/frame/prome/my_prometheus_mysql_frame.png" alt="普罗米修斯远程采集mysql架构"></p><p>host筛选的效果：</p><p><img src="/../../images/tech/frame/prome/my_prometheus_mysql_host_real.png" alt="显示exporter所在的host"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>中间的试错过程就不说了，直接进入主题。</p><p>核心思路：</p><ol><li>Prometheus支持自定义label功能，我们可以在配置mysql采集器的时候，把mysql的实际ip当做一个label配置进去</li><li>grafana在配置变量的时候，可以通过正则的方式，实现下拉列表中<code>显示值-实际值</code>这种键值对的功能</li></ol><h3 id="增加mysql-server-ip-自定义label"><a href="#增加mysql-server-ip-自定义label" class="headerlink" title="增加mysql_server_ip 自定义label"></a>增加<code>mysql_server_ip</code> 自定义label</h3><p>修改普罗米修斯配置文件<code>prometheus.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">scrape_configs:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;mysql&#x27;</span><br>    <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">10s</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;192.168.202.172:9104&#x27;</span><br>        <span class="hljs-attr">labels:</span><br>           <span class="hljs-attr">mysql_server_ip:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.202</span><span class="hljs-number">.48</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;192.168.202.172:9105&#x27;</span><br>        <span class="hljs-attr">labels:</span><br>           <span class="hljs-attr">mysql_server_ip:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.202</span><span class="hljs-number">.248</span><br></code></pre></td></tr></table></figure><p>重启生效。</p><p>然后登录prometheus后端: <a href="http://ip:9090/targets">http://ip:9090/targets</a>, 查看我们新增的<code>mysql_server_ip</code> label是否生效，此时在我们的mysql一栏中，应该已经有了<code>mysql_server_ip</code>这个label，且值就是对应mysql的实际ip。</p><h3 id="配置grafana变量"><a href="#配置grafana变量" class="headerlink" title="配置grafana变量"></a>配置grafana变量</h3><p>接下来，我们登录grafana，进入变量配置页面，添加变量，选择<code>Query result</code> 类型。</p><p>在query 一栏 输入 <code>mysql_up</code>, 这会查出所有mysql生效的结果集。 可以执行页面尾部的<code>run query</code>预览结果。</p><p>然后在正则表达式一栏输入 <code>/mysql_server_ip=&quot;(?&lt;text&gt;[^&quot;]+)|instance=&quot;(?&lt;value&gt;[^&quot;]+)/g</code> 即可。</p><p>这段正则的含义是：从query的结果中，提取出mysql_server_ip这个label的值，作为显示值，instance这个label的值作为实际值。</p><h3 id="保存生效"><a href="#保存生效" class="headerlink" title="保存生效"></a>保存生效</h3><p>至此，我们的自定义下拉选择框就完成了，如下图：</p><p><img src="/../../images/tech/frame/prome/my_prometheus_mysql_host_display_name.png" alt="显示实际的mysql地址"></p><p>当我们选择显示值<code>192.168.202.48</code>时，host获得的是其对应的实际值<code>192.168.202.172:9104</code>。</p><p>这样，我们就可以在整个mysql模板不用大改的情况下，实现了显示mysql实际ip地址的功能了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然，在上述的实践中，我们的架构是有点问题的，<code>mysqld-exporter</code>不应该和prometheus部署在一起的，而是应该部署到mysql的服务器上，这样，上面的问题也就不存在了。</p><p>我们只是利用这个契机，调研学习了一下prometheus的自定义label功能，以及自定义配置grafana的下拉选择框的配置方法。</p><p>以下是Prometheus的推荐架构：</p><p><img src="/../../images/tech/frame/prome/prometheus_recommand_frame.png" alt="prometheus架构"></p><p><code>mysqld-exporter</code>的推荐使用：</p><p><img src="/../../images/tech/frame/prome/prometheus_recommand_mysql_exporter.png" alt="mysqld-exporter推荐使用"></p><h2 id="高级玩法"><a href="#高级玩法" class="headerlink" title="高级玩法"></a>高级玩法</h2><p>其实，Prometheus在配置文件中，还提供了一套<code>再配置label</code>的语法，可以实现对一些原生label的二次修改。</p><p>大致配置和效果如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;mysql_job&#x27;</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;localhost:9090&#x27;</span>]<br><br>    <span class="hljs-attr">metric_relabel_configs:</span><br>      <span class="hljs-comment"># 删除掉所有以&quot;temp_&quot;开头的标签</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__name__</span>]<br>        <span class="hljs-attr">action:</span> <span class="hljs-string">drop</span><br>        <span class="hljs-attr">regex:</span> <span class="hljs-string">&#x27;temp_.*&#x27;</span><br><br>      <span class="hljs-comment"># 将`instance`标签值改为`host`</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">instance</span>]<br>        <span class="hljs-attr">target_label:</span> <span class="hljs-string">host</span><br>        <span class="hljs-attr">action:</span> <span class="hljs-string">replace</span><br>        <span class="hljs-attr">regex:</span> <span class="hljs-string">&#x27;(.*)&#x27;</span><br>        <span class="hljs-attr">replacement:</span> <span class="hljs-string">&#x27;$1&#x27;</span><br><br>      <span class="hljs-comment"># 删除掉所有没有&quot;job&quot;标签的时间序列</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">job</span>]<br>        <span class="hljs-attr">action:</span> <span class="hljs-string">drop</span><br>        <span class="hljs-attr">regex:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>完整的relabel_config配置如下所示：</p><table><thead><tr><th>字段</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td><code>source_labels</code></td><td>用于拼接并匹配的原始标签列表，内容按 <code>separator</code> 连接后与 <code>regex</code> 对比</td><td><code>[]</code></td></tr><tr><td><code>separator</code></td><td>多个 <code>source_labels</code> 拼接时的分隔符</td><td><code>&quot;;&quot;</code></td></tr><tr><td><code>regex</code></td><td>用于匹配拼接后字符串的正则表达式，支持捕获组，常用来提取子串</td><td><code>&quot;(.*)&quot;</code></td></tr><tr><td><code>target_label</code></td><td>匹配成功后新标签的名称；在某些 <code>action</code> 下表示目标标签</td><td>—</td></tr><tr><td><code>replacement</code></td><td>用于替换的新值，支持 <code>$1</code>、<code>$2</code> 等捕获组引用</td><td><code>&quot;$1&quot;</code></td></tr><tr><td><code>modulus</code></td><td>仅对 <code>hashmod</code> 有效，指定哈希取模的除数</td><td><code>—</code></td></tr><tr><td><code>action</code></td><td>执行的操作类型，包括 <code>replace</code>、<code>keep</code>、<code>drop</code>、<code>hashmod</code>、<code>labelmap</code>、<code>labeldrop</code>、<code>labelkeep</code>、<code>keepequal</code>、<code>dropequal</code>、<code>lowercase</code>、<code>uppercase</code></td><td><code>&quot;replace&quot;</code></td></tr></tbody></table><hr><p>其中action的枚举：</p><ol><li><strong>replace</strong>：使用 <code>regex</code> 与 <code>replacement</code> 修改或新增标签值（默认） </li><li><strong>keep &#x2F; drop</strong>：根据 <code>regex</code> 保留或丢弃整个目标（当匹配失败时，会跳过该目标） </li><li><strong>hashmod</strong>：对拼接后内容做哈希并取模，通常用于均匀分流或分区 </li><li><strong>labelmap</strong>：对标签名称做正则替换，例如将所有 <code>__meta_kubernetes_*</code> 标签统一前缀</li><li><strong>labeldrop &#x2F; labelkeep</strong>：批量删除或保留与 <code>regex</code> 匹配的标签名称 </li><li><strong>keepequal &#x2F; dropequal</strong>：仅当某两个标签值相等或不等时才保留或丢弃目标</li><li><strong>lowercase &#x2F; uppercase</strong>：将指定标签值转换为小写或大写</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#filter-variables-with-regex">grafana的正则表达式功能</a></p><p><a href="https://grafana.com/blog/2022/03/21/how-relabeling-in-prometheus-works/?utm_source=chatgpt.com">relabel 配置文档</a></p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>普罗米修斯</tag>
      
      <tag>prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 21新特性简介</title>
    <link href="/2025/04/21/java-jdk-v21/"/>
    <url>/2025/04/21/java-jdk-v21/</url>
    
    <content type="html"><![CDATA[<p>按照JDK每半年发布一次版本的节奏, JDK21在2023年9月19日发布，是一个长期支持版本, 本文就是简单介绍一下这次更新的新特性与改动.</p><p>一句话总结, 这仍然是jdk的一个短期支持版本,此版本包括7个 JEP（jdk增强建议），以及数百个较小的功能增强和数千个错误修复.</p><h2 id="新特性汇总"><a href="#新特性汇总" class="headerlink" title="新特性汇总"></a>新特性汇总</h2><h3 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性:"></a>语言特性:</h3><ul><li><strong><a href="https://openjdk.org/jeps/440">JEP 440</a> Record Patterns</strong>(记录模式) : 记录模式是经过了前两个版本的孵化，这个版本正式发布了。其目的是将我们从java复杂的类构造中解放出来,更关注于数据. 一般用于一组数据构成的一个整体,比如坐标point(x,y)。记录模式可以嵌套，switch也支持记录模式。</li><li><strong><a href="https://openjdk.org/jeps/441">JEP 4441</a> Pattern Matching for switch</strong>(switch记录模式): switch增强，支持记录模式等解析.<ul><li>switch 支持null的判断，不用在外面判断一遍null了。当然为了兼容性，如果没有null case ,仍然会报空指针异常。</li><li>switch 支持when的语法支持，可以对case的子集进行二次匹配，返回布尔值即可</li><li>switch 支持类型自动推断（boolean 、 long 、 float 和 double等原始类型之外的类型）</li><li>switch 记录模式泛型的解析</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">I</span> &#123;&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSwitch</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (o) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-literal">null</span> -&gt; &#123; &#125;<br>        <span class="hljs-keyword">case</span> Integer i -&gt; String.format(<span class="hljs-string">&quot;int %d&quot;</span>, i);<br>        <span class="hljs-keyword">case</span> Long l    -&gt; String.format(<span class="hljs-string">&quot;long %d&quot;</span>, l);<br>        <span class="hljs-keyword">case</span> Double d  -&gt; String.format(<span class="hljs-string">&quot;double %f&quot;</span>, d);<br>        <span class="hljs-keyword">case</span> String s<br>        <span class="hljs-keyword">when</span> s.equalsIgnoreCase(<span class="hljs-string">&quot;YES&quot;</span>) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;You got it&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">case</span> String s<br>        <span class="hljs-keyword">when</span> s.equalsIgnoreCase(<span class="hljs-string">&quot;NO&quot;</span>) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Shame&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">case</span> String s -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Sorry?&quot;</span>);<br>        &#125;<br>      <span class="hljs-keyword">case</span> Pair&lt;I&gt;(I fst, C snd) p -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sorry?&quot;</span>);<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="库升级"><a href="#库升级" class="headerlink" title="库升级"></a>库升级</h3><ul><li><strong><a href="https://openjdk.org/jeps/444">JEP 444</a> Virtual Threads</strong>(虚线程) : 对标go语言协程的虚线程终于投入了使用,也就是说在一个系统线程上可以再开辟出平台级的虚线程来实现轻量级并发<ul><li>根据官方的建议，虚线程因为更轻量，所以不用搞什么虚线程池，随用随建即可</li><li>虚线程与系统线程的关系是M:N</li><li>G1 GC 不支持巨大的栈块对象。如果一个虚拟线程的栈达到区域大小的一半，可能小至 512KB，那么可能会抛出 StackOverflowError</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 虚线程的调用</span><br><span class="hljs-keyword">try</span> (<span class="hljs-type">var</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newVirtualThreadPerTaskExecutor()) &#123;<br>    IntStream.range(<span class="hljs-number">0</span>, <span class="hljs-number">10_000</span>).forEach(i -&gt; &#123;<br>        executor.submit(() -&gt; &#123;<br>            Thread.sleep(Duration.ofSeconds(<span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;);<br>    &#125;);<br>&#125;  <span class="hljs-comment">// executor.close() is called implicitly, and waits</span><br></code></pre></td></tr></table></figure><ul><li><strong><a href="https://openjdk.org/jeps/431">JEP 431</a> Sequenced Collections</strong>(有序集合) : 原先集合类接口是没有在顺序方面的相关接口，这些都是依赖于底层实现类实现的，现在这些顶层接口补上了这一功能,主要影响是<code>collection</code>和<code>map</code>接口。<ul><li>新增SequencedCollection接口</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SequencedMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt; &#123;<br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SequencedCollection</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Collection</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">// 新方法</span><br>    SequencedCollection&lt;E&gt; <span class="hljs-title function_">reversed</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">// 从 Deque 提取的方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(E)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(E)</span>;<br>    E <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span>;<br>    E <span class="hljs-title function_">getLast</span><span class="hljs-params">()</span>;<br>    E <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span>;<br>    E <span class="hljs-title function_">removeLast</span><span class="hljs-params">()</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>新增SequencedMap</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SequencedMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt; &#123;<br>    <span class="hljs-comment">// 新方法</span><br>    SequencedMap&lt;K,V&gt; <span class="hljs-title function_">reversed</span><span class="hljs-params">()</span>;<br>    SequencedSet&lt;K&gt; <span class="hljs-title function_">sequencedKeySet</span><span class="hljs-params">()</span>;<br>    SequencedCollection&lt;V&gt; <span class="hljs-title function_">sequencedValues</span><span class="hljs-params">()</span>;<br>    SequencedSet&lt;Entry&lt;K,V&gt;&gt; <span class="hljs-title function_">sequencedEntrySet</span><span class="hljs-params">()</span>;<br>    V <span class="hljs-title function_">putFirst</span><span class="hljs-params">(K, V)</span>;<br>    V <span class="hljs-title function_">putLast</span><span class="hljs-params">(K, V)</span>;<br>    <span class="hljs-comment">// 从 NavigableMap 提取的方法</span><br>    Entry&lt;K, V&gt; <span class="hljs-title function_">firstEntry</span><span class="hljs-params">()</span>;<br>    Entry&lt;K, V&gt; <span class="hljs-title function_">lastEntry</span><span class="hljs-params">()</span>;<br>    Entry&lt;K, V&gt; <span class="hljs-title function_">pollFirstEntry</span><span class="hljs-params">()</span>;<br>    Entry&lt;K, V&gt; <span class="hljs-title function_">pollLastEntry</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终类图：<br><img src="/../../images/tech/java/jdk21-seq-collection.png" alt="jdk21中新增的有序接口"></p><ul><li><strong><a href="https://openjdk.org/jeps/452">JEP 452</a> Key Encapsulation Mechanism API</strong>(密钥封装机制) : 一种使用公钥密码学来保护对称密钥的加密技术,现在java把这套标准接口实现类。</li></ul><h3 id="性能提升"><a href="#性能提升" class="headerlink" title="性能提升"></a>性能提升</h3><ul><li><strong><a href="https://openjdk.org/jeps/439">JEP 439</a> Generational ZGC</strong>(ZGC垃圾回收器) : 垃圾收集器（ZGC）扩展到维护年轻和旧对象的单独代，提高应用程序性能</li></ul><h3 id="其他新特性"><a href="#其他新特性" class="headerlink" title="其他新特性"></a>其他新特性</h3><ul><li><strong><a href="https://openjdk.org/jeps/451">JEP 451</a> Prepare to Disallow the Dynamic Loading of Agents</strong>(准备禁止动态加载Agents) : 动态加载（Attach API）可以在程序运行过程中，“热加载”一些功能(比如修复bug)到运行的程序中，这不安全，也不符合代码的完整性。所以这个版本会提示警告，并在未来将这个功能禁用。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8301226">JDK-8301226</a> 新增Math.clamp() 和 StrictMath.clamp() 方法</strong> : 这两个方法可以方便地将数值值限制在指定的最小值和最大值之间。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8302590">JDK-8302590</a> 新增 String indexOf(int,int,int) 和 indexOf(String,int,int) 方法</strong> : 添加了两个新方法 indexOf(int ch, int beginIndex, int endIndex) 和 indexOf(String str, int beginIndex, int endIndex) 到 java.lang.String 中，以支持对字符 ch 的前向搜索，以及分别对 String str 的搜索，并限制在指定的索引范围内。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8305486">JDK-8305486</a> 新增 splitWithDelimiters 方法</strong> : 与这些 split() 方法不同，在 <code>java.lang.String</code> 和 <code>java.util.regex.Pattern</code> 中新增的 <code>splitWithDelimiters()</code> 方法返回字符串和分隔符，而不仅仅是字符串。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8302323">JDK-8302323</a> StringBuilder和StringBuffer新增 repeat 方法</strong> : sb.repeat(‘-‘, 80) 将将 80 个连字符插入到 java.lang.StringBuilder sb 对象的值中</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8305107">JDK-8305107</a> 支持Emoji的正则匹配</strong> : 可以使用新的 \p{IsXXX} 构造来匹配具有 Emoji 相关属性的字符, 如：<code>Pattern.compile(&quot;\\p&#123;IsEmoji&#125;&quot;).matcher(&quot;🉐&quot;).matches()</code></li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8191565">JDK-8191565</a> Last Resort G1 Full GC Moves Humongous Objects</strong> : G1垃圾回收时会移动巨型对象，这样可以保持尽量多的连续空间，方便后续巨型对象的分配。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8298127">JDK-8298127</a> 新增 HSS&#x2F;LMS 签名验证</strong> </li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8288050">JDK-8288050</a> PBES2 摘要算法新增 SHA-512&#x2F;224 和 SHA-512&#x2F;256 实现</strong> </li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8301553">JDK-8301553</a> 新增基于密码的加密的算法SunPKCS11</strong> </li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8306560">JDK-8306560</a> JShell 里可以调用jdk工具</strong> ： 比如在JShell里调用<code>jmap</code>工具 </li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8208077">JDK-8208077</a> File::listRoots 将 Windows 上可用的驱动器全部返回</strong> ： 在本次版本中，方法 java.io.File.listRoots() 在 Microsoft Windows 上的行为已更改，返回的数组现在包括所有可用磁盘驱动器的 File 对象。这与 JDK 10 到 JDK 20 中的行为不同，当时此方法会过滤掉不可访问或没有媒体的磁盘驱动器。此更改避免了在先前版本中观察到的性能问题，并确保该方法与 FileSystem.getDefault().getRootDirectories() 返回的根目录迭代保持一致。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8305092">JDK-8305092</a> Thread.sleep(millis, nanos) 现在能够执行亚毫秒级睡眠</strong> ： Thread.sleep(millis, nanos) 方法能够在 POSIX 平台上执行亚毫秒级睡眠。在此更改之前，非零 nanos 参数会向上取整到完整的毫秒。虽然大多数 POSIX 系统上的精度得到了提高，但实际的睡眠持续时间仍然受系统设施的精度和准确性的影响。</li></ul><h2 id="预览阶段特性"><a href="#预览阶段特性" class="headerlink" title="预览阶段特性:"></a>预览阶段特性:</h2><h3 id="语言特性-1"><a href="#语言特性-1" class="headerlink" title="语言特性"></a>语言特性</h3><ul><li><strong><a href="https://openjdk.org/jeps/430">JEP 430</a> String Templates</strong>(字符串模板) : 对原来的<code>str.format()</code>能力进行了增强，使其可以更易读和更容易使用。<ul><li>比如：<code>STR.&quot;\&#123;x&#125; + \&#123;y&#125; = \&#123;x + y&#125;&quot;;</code> 结果为：<code>&quot;10 + 20 = 30&quot;</code></li><li>支持数组：<code>STR.&quot;\&#123;array[0]&#125; + \&#123;array[1]&#125; = \&#123;array[0] + array[1]&#125;&quot;;</code> </li><li>支持模板的嵌套使用：<code>String tmp = STR.&quot;\&#123;x&#125;, \&#123;y&#125;&quot;;  String s = STR.&quot;\&#123;z&#125;, \&#123;tmp&#125;&quot;;</code></li><li>跨行使用：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;My Web Page&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">text</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, world&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> STR.<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">&lt;title&gt;\&#123;title&#125;&lt;/title&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;p&gt;\&#123;text&#125;&lt;/p&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>自定义字符串模板工具：<code>FMT</code>和<code>RAW </code>，其中<code>FMT</code>负责字符串模板的插值操作，<code>RAW</code>负责生成一个未经解析的<code>StringTemplate</code>对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Joan&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> STR.<span class="hljs-string">&quot;My name is \&#123;name&#125;&quot;</span>;<br><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Joan&quot;</span>;<br><span class="hljs-type">StringTemplate</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> RAW.<span class="hljs-string">&quot;My name is \&#123;name&#125;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> STR.process(st);<br></code></pre></td></tr></table></figure><ul><li><strong><a href="https://openjdk.org/jeps/443">JEP 443</a> Unnamed Patterns and Variables</strong>(未命名模式) : 通过未命名模式增强 Java 语言，这些模式匹配记录组件而不声明组件的名称或类型，以及未命名变量，这些变量可以初始化但不能使用。两者均以下划线字符表示，即 _。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (Order order : orders) &#123;<br>        <span class="hljs-keyword">if</span> (acc &lt; LIMIT) &#123;<br>         acc++;<br>        &#125;<br>&#125;<br><span class="hljs-comment">// order 声明了但是没有使用，可以简化成下面形式</span><br><span class="hljs-keyword">for</span> (Order _ : orders) &#123;<br>    <span class="hljs-keyword">if</span> (acc &lt; LIMIT) &#123; <br>        acc++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong><a href="https://openjdk.org/jeps/445">JEP 445</a> Unnamed Classes and Instance Main Methods</strong>(未命名主方法) : 简单来说，就是简化了main入口方法的声明。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <br>        System.out.println(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 可以写成实例主方法，而不再是一个静态方法：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 甚至可以写成未命名类的形式：</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  System.out.println(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这种方式简化java主方法的声明，但这也带来了一个问题，当一个类里有多个main方法的时候，执行的是哪一个呢？jvm会选择下面的第一个来调用</p><ol><li>public static void main(String[] args)</li><li>public static void main()</li><li>void main(String[] args)</li><li>void main()</li></ol><h3 id="库升级-1"><a href="#库升级-1" class="headerlink" title="库升级"></a>库升级</h3><ul><li><strong><a href="https://openjdk.org/jeps/442">JEP 442</a> Foreign Function &amp; Memory API</strong>(外部函数和内存访问) : 第三次预览。java 程序可以通过它与 Java 运行时之外代码和数据交互。通过高效调用外部函数（即 JVM 之外的代码），以及安全访问外部内存（即不由 JVM 管理的内存），该 API 使 Java 程序能够在没有 JNI 的脆弱性和危险的情况下调用本地库和处理本地数据.</li><li><strong><a href="https://openjdk.org/jeps/446">JEP 446</a> Scoped Values</strong>(作用域值) : 通过引入作用域值，使得一些信息可以在线程及其子线程间共享数据,类似<code>ThreadLocal</code>这样，跳过传参来进行值传递的方式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ScopedValue&lt;String&gt; X = ScopedValue.newInstance();<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span> &#123;<br>    ScopedValue.where(X, <span class="hljs-string">&quot;hello&quot;</span>).run(() -&gt; bar());<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">bar</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(X.get()); <span class="hljs-comment">// prints hello</span><br>    ScopedValue.where(X, <span class="hljs-string">&quot;goodbye&quot;</span>).run(() -&gt; baz());<br>    System.out.println(X.get()); <span class="hljs-comment">// prints hello</span><br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">baz</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(X.get()); <span class="hljs-comment">// prints goodbye</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong><a href="https://openjdk.org/jeps/448">JEP 448</a> Vector API</strong>(向量api) : 第六次预览。现代的CPU都提供了向量指令集，该 API 能够在支持的 CPU 架构上可靠地编译为最优向量指令，从而实现比等效标量计算更优越的性能。</li></ul><h2 id="移除的功能"><a href="#移除的功能" class="headerlink" title="移除的功能"></a>移除的功能</h2><ul><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8300977">JDK-8300977</a> java.io.File’s Canonical Path Cache Is Removed</strong> ： <code>File::getCanonicalFile</code> 和 <code>File::getCanonicalPath</code>的路径缓存功能被废除，对使用没有影响</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8297295">JDK-8297295</a> ThreadGroup.allowThreadSuspension Is Removed</strong> ： 本版本中已移除 java.lang.ThreadGroup.allowThreadSuspension(boolean) 方法。该方法用于 JDK 1.1 中的低内存处理，但从未完全指定。它在 JDK 1.2（1998 年）中被弃用，并改为“无操作”。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8205129">JDK-8205129</a> The java.lang.Compiler Class Has Been Removed</strong> ：java.lang.Compiler 类已被移除。这个未指定充分 API 始于 JDK 1.0，早期 JDK 版本中使用的“经典 VM”。在 HotSpot VM 中的实现只是打印一条警告，指出它不受支持。该类自 Java SE 9 以来已被弃用并标记为删除。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8302819">JDK-8302819</a> Remove the JAR Index Feature</strong> ：“JAR 索引”功能已被从 JAR 文件规范中删除。JAR 索引是早期 JDK 版本中的遗留优化，允许在通过网络加载小程序或其他类时推迟下载 JAR 文件。自 JDK 18 以来，该功能已被禁用，意味着 JAR 文件中的 META-INF&#x2F;INDEX.LIST 条目在运行时将被忽略。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8307244">JDK-8307244</a> Remove the JAR Index Feature</strong> ：该类 javax.management.remote.rmi.RMIIIOPServerImpl 已被移除。在 JDK 9 中，IIOP 传输已被从 JMX 远程 API 中移除。自 Java SE 9 以来，此类已被弃用，其构造函数已更改为抛出 UnsupportedOperationException 。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8225409">JDK-8225409</a> Removal of G1 Hot Card Cache</strong> ：G1 热卡缓存已被移除。性能测试表明，在并发精炼控制的改进之后，它对性能没有贡献。而移除该功能后，减少了 G1 垃圾收集器的内存占用，大约为 Java 堆大小的 0.2%</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8302385">JDK-8302385</a> The MetaspaceReclaimPolicy Flag has Been Obsoleted</strong> ：MetaspaceReclaimPolicy 选项曾用于在类卸载后微调元空间的内存回收行为。实际上，这效果有限，很少使用。</li></ul><h2 id="废弃的功能（后来会移除）"><a href="#废弃的功能（后来会移除）" class="headerlink" title="废弃的功能（后来会移除）"></a>废弃的功能（后来会移除）</h2><ul><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8280031">JDK-8280031</a> Deprecate GTK2 for Removal</strong> ： GTK2 用于linux上对 AWT&#x2F;Swing 的实现支持，随着 GTK4 在 2020 年 12 月的发布，GTK 2 工具包即将达到其生命周期的终点</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8303175">JDK-8303175</a> com.sun.nio.file.SensitivityWatchEventModifier Is Deprecated</strong> ： 该枚举中的常量用于在 macOS 上基于轮询的 WatchService 实现中设置轮询文件更改的间隔。基于轮询的 WatchService 已更改，在注册要监视的文件时忽略这些修饰符。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8304982">JDK-8304982</a> Emit Warning for Removal of COMPAT Provider</strong> ： COMPAT 在 JDK 9 时代提供，用于迁移到 CLDR 区域数据，当时它成为了默认的区域数据（JEP 252）。JDK 21 为了兼容性保留了 JDK 8 的遗留区域数据，但一些新功能并未应用。遗留的区域数据将在未来的版本中删除。鼓励用户迁移到 CLDR 区域数据</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8298966">JDK-8298966</a> Deprecate JMX Subject Delegation and the JMXConnector.getMBeanServerConnection(Subject) Method for Removal</strong> ： JMX Subject Delegation 功能已被废弃，并计划在未来版本中删除。</li></ul><h2 id="问题修复"><a href="#问题修复" class="headerlink" title="问题修复"></a>问题修复</h2><ul><li><p><strong><a href="https://bugs.openjdk.org/browse/JDK-8307990">JDK-8307990</a> Fixed Indefinite jspawnhelper Hangs</strong> ： 修复了不定时 jspawnhelper 停滞问题</p><p>自 JDK 13 以来，在 Linux 上执行子进程的命令默认使用所谓的 POSIX_SPAWN 启动机制（即 -Djdk.lang.Process.launchMechanism&#x3D;POSIX_SPAWN ）。在父 JVM 进程在 JVM 与新创建的 jspawnhelper 进程之间的握手完成之前异常终止的情况下， jspawnhelper 在 JDK 13 到 JDK 20 中可能会无限期地停滞。此问题已在 JDK 21 中修复。如果父进程有打开的套接字，则此问题尤其有害，因为在这种情况下，派生的 jspawnhelper 进程将继承它们并保持所有相应的端口打开，从而有效地阻止其他进程绑定到它们。 </p><p>这种异常行为已在内存约束严格的环境中频繁 fork 子进程的应用程序中观察到。在这种情况下，操作系统可能会在 fork 过程中终止 JVM，从而导致所述问题。如果新进程尝试绑定与初始应用程序相同的端口，则由于它们将被挂起的 jspawnhelper 子进程阻塞，因此无法在崩溃后重启 JVM 进程。</p><p>此问题的根本原因是 jspawnhelper 未关闭用于与父 JVM 握手的管道的写入端，这已在尝试从父进程读取数据之前关闭了通信管道的写入端得到修复。这样， jspawnhelper 将可靠地从通信管道读取 EOF 事件，并在父进程意外死亡时终止。</p><p>这种问题的第二个变体可能发生，因为 JDK 中的握手代码没有正确处理 write(2) 的中断。这可能导致向 jspawnhelper 子进程发送不完整的信息。结果是父线程和子进程之间的死锁，这表现为在读取管道时被阻塞的 jspawnhelper 进程，以及相应的父 Java 进程中的以下堆栈跟踪</p></li><li><p><strong><a href="https://bugs.openjdk.org/browse/JDK-8307466">JDK-8307466</a> Error Computing the Amount of Milli- and Microseconds between java.time.Instants</strong> ： 使用 <code>ChronoUnit.MILLIS.between(t1, t2)</code> 、 <code>ChronoUnit.MICROS.between(t1, t2)</code> 、 <code>t1.until(t2, MILLIS)</code> 或 <code>t1.until(t2, MICROS)</code> 计算两个时间点之间的时间差已被纠正。自 JDK 18 以来，计算实例之间单位的实现没有在计算毫秒和微秒时在秒和纳秒时进行进位和借位。</p></li><li><p><strong><a href="https://bugs.openjdk.org/browse/JDK-8303465">JDK-8303465</a> Enhance Contents (Trusted Certificate Entries) of macOS KeychainStore</strong> : macOS KeychainStore 实现现在在用户域、管理员域或两者中正确信任证书。在此之前，只有用户域被考虑。此外，如果证书的信任设置中在任一域存在针对特定目的的“拒绝”条目，则该证书将不会成为 macOS KeychainStore 的一部分.</p></li><li><p><strong><a href="https://bugs.openjdk.org/browse/JDK-8305091">JDK-8305091</a> Allow Key&#x2F;Nonce Reuse for DECRYPT_MODE ChaCha20 and ChaCha20-Poly1305 Cipher Objects</strong> : SunJCE 对 Cipher 对象使用 ChaCha20 和 ChaCha20-Poly1305 算法的实现现在将在 DECRYPT_MODE 时允许密钥&#x2F;nonce 重用。此更改使这些算法与当前 SunJCE AES-GCM 解密模式行为在密钥&#x2F;nonce 重用方面保持一致。所有 ENCRYPT_MODE 密钥&#x2F;nonce 重用禁令的行为保持不变。</p></li><li><p><strong><a href="https://bugs.openjdk.org/browse/JDK-8027682">JDK-8027682</a> Disallow Extra Semicolons Between “import” Statements</strong> : Java 语言规范不允许在 import 语句之间出现多余的分号，然而编译器之前允许这样做；JDK21 修复了这个问题。</p></li></ul><h2 id="jdk21-支持的工具"><a href="#jdk21-支持的工具" class="headerlink" title="jdk21 支持的工具"></a>jdk21 支持的工具</h2><p>全平台可用的jdk 工具<br><img src="/../../images/tech/java/jdk21-tool-all.png" alt="全平台可用"></p><p>仅windows可用的jdk工具<br><img src="/../../images/tech/java/jdk21-tool-windows.png" alt="windows only"></p><h2 id="名词解析"><a href="#名词解析" class="headerlink" title="名词解析"></a>名词解析</h2><ul><li><p>HarfBuzz: 一个开源的用于文字塑形的软件开发库，亦即用于转换Unicode文本到字形指标及方位的过程</p></li><li><p>FreeType:  同HarfBuzz一样, 也是一个开源字体库. 它是一个用C语言实现的一个字体光栅化库。它可以用来将字符栅格化并映射成位图以及提供其他字体相关业务的支持</p></li><li><p>Preview(预览): 功能已经基本完整, 可以试用了. 可以简单理解为beta公测版. 来源于 <a href="https://openjdk.org/jeps/12">JEP12</a></p><blockquote><p>功能以预览版的形式发布，以收集有关它们的反馈而不承诺保持其向后兼容性——这意味着鼓励每个人尝试它们，但同时不鼓励在生产中使用它们。</p><p>预览功能不是开箱即用的，为了访问它们，需要使用*–enable-preview*编译器标志。</p></blockquote></li><li><p>Incubator(孵化) : 实验性 API已经到了一定阶段, 已经计划开发出一整套完整的功能.以独立模块的形式发布. 来源于 <a href="https://openjdk.org/jeps/11">JEP11</a></p></li><li><p>Experimental(实验) : vm级的早期功能, 不稳定, 功能不完整. 实验性质.</p><blockquote><p>实验性功能代表（主要是）VM 级功能的早期版本，这些功能可能是有风险的、不完整的，甚至是不稳定的。在大多数情况下，需要使用专用标志启用它们</p><p>出于比较的目的，如果一个实验功能被认为是 25%“完成”，那么一个预览功能应该至少 95%“完成”。</p><p>预览,孵化,实验三者的关系大致: 实验 &#x3D;&gt; 孵化 &#x3D;&gt; 预览 &#x3D;&gt; 合并jdk主体功能.</p></blockquote></li><li><p>JEP : JDK Enhancement Proposal , jdk增强建议. 也就是我们常说的jdk新特性的来源. <a href="https://openjdk.org/jeps/0">JEP大全</a></p></li></ul><h2 id="往期文章"><a href="#往期文章" class="headerlink" title="往期文章"></a>往期文章</h2><p><a href="/2022/10/20/java-jdk-v19/">jdk19新特性</a></p><p><a href="/2023/04/04/java-jdk-v20/">jdk20新特性</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://docs.oracle.com/en/java/javase/21/">jdk21官方文档</a><br><a href="https://www.oracle.com/java/technologies/javase/21-relnote-issues.html#NewFeature">jdk21的新特性</a><br><a href="https://www.oracle.com/java/technologies/javase/21all-relnotes.html">jdk21及后续修复bug版本文档</a><br><a href="https://docs.oracle.com/en/java/javase/21/gctuning/index.html">jdk21垃圾回收器官网</a><br><a href="https://docs.oracle.com/en/java/javase/21/vm/preface.html">jdk21虚拟机介绍</a>    </p><p><a href="https://openjdk.org/">openjdk官网</a><br><a href="https://4comprehension.com/preview-experimental-and-incubating-features-in-java/">jdk中预览,实验,孵化的关系</a><br><a href="https://www.oracle.com/java/technologies/java-se-support-roadmap.html">jdk各版本支持时间</a></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>java版本特性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java版本特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于工作中考核代码量的一些思考</title>
    <link href="/2025/04/16/life-code-line/"/>
    <url>/2025/04/16/life-code-line/</url>
    
    <content type="html"><![CDATA[<p>不知道是不是因为现在大环境不太好的原因，现在公司开始考核代码量了。</p><p>考核方式也挺简单，有一个叫<code>思码逸</code>的平台（链接不贴了，不想推广这种产品），可以统计代码行数，代码的复杂度等情况，然后根据一定的规则，得到一定的分数，最后根据这个分数排名，然后和绩效挂钩。</p><p>理论上，这个平台想对代码情况做到一个量化，但真的做得到吗？</p><p>写代码理论上作为一个脑力劳动，代码写出来也是不可见的，除非人工复检，不然很难评估某一段代码的价值高低。</p><p>比如：</p><ul><li>写核心逻辑引擎的部分，肯定比写接口层的代码量要少，但接口层的代码可能一年就废掉了，而核心逻辑引擎的代码可能要运行七八年，而且核心代码付出的脑力思考更是要多得多。</li><li>修bug这种事该怎么量化呢？查了半天bug，结果是一个配置导致的问题，一行代码量也没有。</li><li>而且不同地方的bug，修复难度也不一样，有的时候一行代码就是比别人几十行代码管用。</li><li>现在有很多模板引擎可以生成代码，这里又是怎么考核呢？</li><li>前端、后端、运维不同工种，不同语言的的代码，效果也是完全不一样的，有的人全栈，他归在哪一类考核呢？</li><li>等等</li></ul><p>既然现在机器考核代码量， 还要这么多的问题难以解决，为什么公司还要推行这个考核呢？</p><p>我觉得最大的问题，就是公司领导层对于底层的一种不信任的心理在作怪。</p><p>也就是说，老板们花钱雇员工来是干活的，不是来摸鱼的，可能老板们在网上看到员工摸鱼的段子多了，就不自然的带入到了自己身上，自己的员工在不在摸鱼呢？</p><p>可是高管们又不能天天盯着员工干活，还不相信自己的员工在认真的干活，就只能拿出所谓的“管理大法”来“科学”的管理员工了。</p><p>而现代的管理工具，说到底就两件事：量化，绩效。</p><blockquote><p>绩效：就是把本来应该发给员工的钱分成两部分，一部分是必发底薪，一部分是浮动绩效，看你的表现而给钱。<br>量化：辅助绩效的评估办法，给一个员工发多少绩效，总要有个依据吧，这就要对员工的工作进行量化了，也就是员工做的工作都要能够用数字体现出来。</p></blockquote><p>你看，从设计上看，都是很好的工具，既能激发员工的能动性，又能保证绩效发放的公平性。</p><p>但无论什么工具都能被中国的老板把经给念歪了。</p><p>老板不想多出钱搞继续，就把继续强制比例分布，比如2：7：1，相当于把底层1成的员工的绩效来补贴给上部的2成的员工，而对于公司，没有多花任何成本。而且这种行为还有一个很好听的名字：“不断奔跑”，“选择合适的人”。</p><p>在量化上，就是万物皆可量化，不能量化的东西就是管理不科学、创新不到位。量化最终演化成了公司监视员工的工具，而失去了其本来公平考核的本面目。</p><p>而且，最重要的，量化和绩效评定都是非公开的，“薪酬保密制度”最终成了高管们暗箱操作的保护衣。</p><p>所以，对于程序员这个产出只有代码的脑力劳动群体，代码量考核，就成了老板们的“科学考核”下的一个必然选择。</p><p>然后我说一下，代码量化考核后的现状：</p><ul><li>大家更倾向于写CURD这种容易产生代码量的部分，而不是核心业务，有那种代码生成工具的更好</li><li>代码越复杂越好，能10行解决的事，坚决不一行搞定</li><li>为了增加代码量，可能会有一些根本用不上的代码被提交上去，导致后面除了当事人，谁也不敢删这段逻辑</li><li>在明知有bug的情况下，仍然提交代码，为的就是后面修改bug的代码量（不用找bug，耗时很短）。</li><li>大量的代码复制粘贴的现场出现，完全背离了代码复用的初衷。但也有个好处，降低了代码耦合度。</li><li>重复造轮子现象出现，尽管有一些开源成熟方案。</li><li>等等我一些没发现的坑。</li></ul><p>本来多个人维护一个项目，就容易导致“代码屎山”的产生，如何维护就是业界的一个大难题，现在“屎山”的产生速度指数倍的增长。</p><p>只能说，上有政策，下有对策。反正过几年就被裁员了，没必要为了代码的质量而跟工资过不去。</p><p>回到问题，为什么会要有代码量考核呢？更深一层，为什么会存在所谓的“管理大法”呢？</p><p>本质上是公司老板对员工天然的不信任感导致的：既想马儿跑，又不相信马儿会真的跑，还不舍得给马儿吃草。</p><p>今年，有一个问题在网络上很火：为什么大公司没有搞出deepseek这样的产品呢？</p><p>我觉得看到今天的文章，可能会有一些思考吧。</p>]]></content>
    
    
    <categories>
      
      <category>思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>吐槽</tag>
      
      <tag>思考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何实现一套推荐系统？</title>
    <link href="/2025/04/08/architecture-sys-recommendation/"/>
    <url>/2025/04/08/architecture-sys-recommendation/</url>
    
    <content type="html"><![CDATA[<p>我们经常说大数据比你还懂你，无论在刷抖音，听音乐，看剧还是购物时，都会看到一些我们很喜欢的东西，让我们忍不住的去看一看。</p><p>那么我们和“它”是如何相遇的呢？ 这背后的原因是，各个系统的推荐引擎在不断的学习你的喜好，给你推送你喜欢的内容。</p><p>这里我们就聊一聊，推荐引擎是如何给我们推荐内容的。</p><h2 id="推荐的核心思路"><a href="#推荐的核心思路" class="headerlink" title="推荐的核心思路"></a>推荐的核心思路</h2><p>所谓推荐，就是根据用户的喜好，推荐给用户一些用户不知道的内容（商品、书籍、音乐、视频等），将人与内容联系起来。</p><p>这里涉及到两个概念：</p><ul><li>用户喜好：一般用户是不会将自己的喜欢什么告诉别人的，甚至用户可能自己都不知道自己喜欢什么，这里主要是通过用户在网站里所有的行为记录来进行综合分析，比如下面的用户行为<ul><li>购买记录：用户买了什么，就能分析出很多东西。比如用户需求、价格、品牌接受度等。</li><li>点赞、分享等一切正向行为：分析用户的喜好</li><li>点踩、举报等一切负向行为：分享用户的不喜欢</li><li>评论、搜索记录等主动行为：用户的主观意愿表达，无论是文字，还是语音，都可以通过分词技术、自然语言处理技术，得到一些关键词，这些关键词就是用户的好恶。</li><li>点击、浏览时长：最直观的，喜欢、好奇才会点击；感兴趣，看的时间越长。</li><li>收藏：强烈喜欢意志的一种表现。</li><li>等等</li></ul></li><li>推荐内容: 抖音的视频，淘宝的商品，广告，QQ的音乐,以及好友，网上展示的一切，都可以算是内容，而每个内容也可以挖掘出一些特征，比如：<ul><li>作者、商家、品牌</li><li>价格</li><li>风格、主题</li><li>内容</li><li>语言</li><li>地域</li><li>等等</li></ul></li></ul><p>通过分析用户行为，将内容的熟悉与用户的喜好联系起来的过程，就实现了平台对用户的内容推荐了，这也就是所谓“大数据比你给了解你”的原因。</p><h2 id="推荐引擎的实现"><a href="#推荐引擎的实现" class="headerlink" title="推荐引擎的实现"></a>推荐引擎的实现</h2><p>推荐引擎的指导思想有了，我们接下来要做的就是在技术层面实现这个推荐引擎如何实现，按照不同的实现思路，大致可以分为以下几个方面：</p><h3 id="协同过滤时代"><a href="#协同过滤时代" class="headerlink" title="协同过滤时代"></a>协同过滤时代</h3><p>协同过滤算法，可以说是最古老的推荐算法了，这个算法诞生于1992年，甚至可以说，这个算法的诞生，才有了推荐系统的出现。</p><p>这个算法的核心思想很简单：</p><ul><li>基于用户的协同过滤算法：一个用户对一个内容很喜欢，那么相似的用户可能也会喜欢这个内容。</li><li>基于内容的协同过滤算法：一个内容被很多用户喜欢，那么相似的内容可能也会被这些人喜欢。</li></ul><h4 id="基于用户的协同过滤算法"><a href="#基于用户的协同过滤算法" class="headerlink" title="基于用户的协同过滤算法"></a>基于用户的协同过滤算法</h4><p>无论是视频网站，还是购物网站，此时已经收集到了相当多维度的用户行为数据，比如 购买记录、点赞、收藏等。</p><p>这个时候，我们可以通过简单的集合近似度算法，比如<code>jaccard</code>算法（核心逻辑：交集&#x2F;并集）来寻找相似的用户。</p><p>比如，通过将用户的购买记录，收藏记录的内容组成一个集合，然后通过<code>jaccard</code>算法，两两比较，找到相似度比较高的用户集合，然后把彼此购买、收藏内容推荐给对方，一个最简单的基于用户的协同内容推荐就完成了。</p><h4 id="基于内容的协同过滤算法"><a href="#基于内容的协同过滤算法" class="headerlink" title="基于内容的协同过滤算法"></a>基于内容的协同过滤算法</h4><p>同<code>基于用户的协同过滤算法</code>一样， <code>基于内容的协同过滤算法</code>是以内容为判断依据，来寻找会喜欢这个内容的人。</p><p>如果说<code>基于用户的协同过滤算法</code>还需要记录用户行为的化，那么<code>基于内容的协同过滤算法</code>只需要分析内容相似度就可以了，而内容的所有信息，网站是全部都掌握的，比如风格、价格、商户等，而且还能通过基本元素组合的方式，整合出更多的信息。</p><p>我们可以通过将有类似的风格、价格等组成一个个集合，最后根据用户的点击、收藏等习惯，直接推荐集合里的相关内容即可。</p><p>这里内容的最终选择，可以直接从相关集合里随机选择，也可以进一步，通过类似<code>jaccard</code>算法，将用户点击内容的组成的集合与相关内容集合进行相似度比较，将相似度最高的内容推荐给用户。</p><h4 id="综合使用"><a href="#综合使用" class="headerlink" title="综合使用"></a>综合使用</h4><p>任何推荐算法都不是万能的，正常来说，可以将各种算法综合来使用，比如通过<code>基于用户的协同过滤算法</code>找到相似用户，然后再根据相似用户的内容，通过<code>基于内容的协同过滤算法</code>进一步筛选出相似内容，推荐给这些用户。</p><h3 id="标签时代"><a href="#标签时代" class="headerlink" title="标签时代"></a>标签时代</h3><p>在<code>协同过滤算法</code>时代，主要还是通过用户的行为，和商品的原始信息，来推荐内容。</p><p>但如何想要更精确的去挖掘用户的喜欢，实现内容得更精准推荐，这个时候就引入了标签的概念。</p><p>所谓标签，就是在原先的用户属性，内容属性外，从另一个垂直维度，来对所有的用户、内容打标签，这个标签是很灵活的，如用户、内容完全无关的。</p><p>举个极端的例子：我们完全可以给一本书，打上“苹果”的标签，这个规则上是允许的。</p><p>而标签的来源，整体上可以分为两种：</p><ul><li>主动标签：用户主动给内容的标记行为<ul><li>比如豆瓣电影评价的时候，会要求提供印象标签</li><li>我们第一次登录微博是，会让我们选择喜欢的领域，这就是给自己打标签。</li><li>等等</li></ul></li><li>被动标签<ul><li><code>基于内容的协同过滤算法</code>里物品的原始属性都可以当做标签来使用，比如作者是“金庸”，内容是“美女跳舞”等</li><li>基于自然语言技术的发展，我们还可以对内容进行分析，提取内容的关键词进行打标</li><li>类似搜索引擎这样的，我们的搜索关键词也是天然的标签。</li><li>等等</li></ul></li></ul><p><img src="/../../images/funny/movie_nezha.png" alt="哪吒电影的标签"></p><p>通过上面的主动标签、被动标签，我们就得到了我们需要的标签，这些标签可能是一维的，比如“书籍”；也可以是二维的，比如“作者：金庸”；还可以是多维的，完全看我们的设计。</p><p>有了标签，特别是主动标签的加入，我们的内容在各个维度上的特征（这些特征也开启了后面机器学习的原始养料）也就更加的精准。</p><p>内容精细化了，上面的<code>协同过滤算法</code>计算出来的结果也就更加的精准了。</p><h3 id="向量推荐"><a href="#向量推荐" class="headerlink" title="向量推荐"></a>向量推荐</h3><p>不仅仅如此，标签的出现，还允许我们在<code>协同过滤算法</code>外，还可以使用一种更高效的推荐算法：基于向量的<code>余弦相似度算法</code>，来进行内容的整合、推荐。</p><p>向量推荐 和之前的 <code>jaccard</code>等集合算法，在实现上有着根本的差异。 </p><p>一个是基于集合的算法，基于集合的算法，无论如何优化，粒度都不过精细，也就是我们常说的推荐不准。</p><p>另一个是基于向量的算法，向量算法脱离了集合元素匹配的限制，而是通过不同的元素组成的向量，通过向量的方向来判断内容是否相似。<br>而且向量的特性是有方向的。 <code>[a,b]</code>和 <code>[b,a]</code>是完全不同的向量。 这样，我们不仅可以更加细粒度的量化各种 内容特征，还可以通过一些行为发生的先后的顺序来判断内容是否相似。</p><p>比如用户a,给电影b,打了c的标签，这样我们就可以得到一个三维标签<code>[a,b,c]</code>，这种带有很明确方向性行为的数据，用集合是很难处理的，但是如果当做向量，就很好处理了。</p><p>所以，向量推荐算法的出现，不仅可能让我们对内容实现更细粒度的划分和推荐，还能更加精准的识别用户的意图，挖掘内容的<code>隐式语义相似性</code>，为以后的AI时代的千人千面打下了基础。</p><p>而且，更进一步，我们还可以对不同的标签添加不同的权重，用来标识标签的质量。比如用户评价里，喜欢&#x3D;100分，一般&#x3D;50分，不喜欢&#x3D;-100分。</p><p>这样，有了权重的加持，就更可以从浩如烟海的内容中，匹配到用户最喜欢的内容了，还可以同时把用户的雷区规避掉。</p><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>有了向量，有了权重，在加上内容当作点，有没有想到些什么？</p><p>通过这些要素，我们就可以组成一个<code>图</code>。</p><p>我们完全可以把所有的内容向量，导入图数据库中，形成一个庞大的关系图，只要在一定距离内，能够彼此到达的节点，都是具有相似性的。</p><p>这样，我们要寻找的推荐的内容，就可以转换成在图中，点和点之间距离的相似度 问题了。</p><p><img src="/../../images/tech/architecture/sys/map_demo.png" alt="图"></p><p>如图中，我们研究左右两侧节点的点距离</p><ul><li>u1-&gt;A : [u1,甲，天，A] , [u1,乙，天，A] , [u1,乙，地，A] </li><li>u1-&gt;B : [u1,甲，天，B] , [u1,乙，天，B]</li><li>u1-&gt;C : [u1,乙，天，C]</li><li>u2-&gt;A : [u2,乙，天，A] , [u2,乙，地，A]</li><li>u2-&gt;B : [u2,乙，天，B] </li><li>u2-&gt;C : [u2,乙，地，C] , [u2,丙，玄，C]</li><li>u3-&gt;A : []</li><li>u3-&gt;B : []</li><li>u3-&gt;C : [u3,丙，玄，C]</li></ul><p>通过路径，我们可以找到与<code>u1-&gt;A</code>相似度最高的是<code>u2-&gt;A</code>（<code>乙-&gt;地-&gt;A</code>）, 然后可以通过u2的这条路径，把C推荐给A。</p><p>当然这是最简单的例子，我们还没有讨论权重的影响，图论中，与很多找最优路径的算法，和基于距离的相似度算法。</p><p>但如果仅仅是用来做系统推荐的话，现在更多是使用向量数据库来存储向量，可以更方便的进行相似度查询和搜索。</p><h3 id="AI-千人千面时代"><a href="#AI-千人千面时代" class="headerlink" title="AI 千人千面时代"></a>AI 千人千面时代</h3><p>随着大模型的开源与普及，我们完全可以把上面收集到的所有的用户特征，内容特征全服导入到大模型里，通过大模型的训练，来构建每个人的用户画像，以及内容倾向。</p><p>因为大模型的训练，是通过训练数据，来构建出模型的参数，这就脱离了某个算法的局限性，通过事实反推关系，再通过不断的奖励数据和惩罚数据，进行正负反馈，最终构建出来的模型会更“懂你”。</p><h2 id="迭代进化"><a href="#迭代进化" class="headerlink" title="迭代进化"></a>迭代进化</h2><p>是的，任何一套推荐引擎都不是万能的，包括大模型。</p><p>因为人是随时都在变的，社会也在不断的变化，所以我们要不断的去迭代，不断的去观察用户对于我们推荐内容的喜欢程度，以此来更新我们的推荐引擎，来满足用户的需求。</p><p>简单来说，要做到以下两点：</p><ul><li>激励机制：总结推荐给用户的内容中，用户喜欢的部分的特征，作为改进方向添加到推荐引擎中。</li><li>惩罚机制：总结推荐给用户的内容中，用户不喜欢的部分的特征，作为过滤方向添加到推荐引擎中。</li></ul><p>这两个概念在大模型训练里常见到，但其实是在各种推荐算法里都适用，就是让正确的内容出现的概率更高，无效的内容出现的概率更低，不断的增强推荐内容的准确率的一个根本思路。</p><p>要做到不断的去迭代我们的推荐引擎，就需要有一些指标来衡量推荐引擎的推荐效果。</p><p>我们该如何衡量推荐的效果呢？可以通过以下几个指标来度量：</p><ul><li><p>准确率（Precision）：推荐列表中用户真正感兴趣的内容占比，衡量推荐结果的精准性，避免“滥推荐”。例如，推荐10个商品中有6个被用户点击，则准确率为60%。</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Precision</mtext><mo>=</mo><mfrac><mtext>推荐的正确内容数</mtext><mtext>推荐的总内容数</mtext></mfrac></mrow><annotation encoding="application/x-tex">\text{Precision} = \frac{推荐的正确内容数}{推荐的总内容数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">Precision</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">推荐的总内容数</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">推荐的正确内容数</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></li><li><p>召回率（Recall）：系统推荐的物品占用户所有可能感兴趣物品的比例，衡量是否能够把所有的用户喜欢的内容推荐给用户。例如，用户喜欢10个商品，系统推荐了其中6个，则召回率为60%。</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Recall</mtext><mo>=</mo><mfrac><mtext>推荐的正确内容数</mtext><mtext>用户实际喜欢的内容数</mtext></mfrac></mrow><annotation encoding="application/x-tex">\text{Recall} = \frac{推荐的正确内容数}{用户实际喜欢的内容数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">Recall</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">用户实际喜欢的内容数</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">推荐的正确内容数</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></li><li><p>覆盖率（Coverage）：推荐系统能够覆盖的物品占全部物品的比例，衡量系统对长尾物品（冷门商品）的挖掘能力。</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Coverage</mtext><mo>=</mo><mfrac><mtext>推荐的内容数</mtext><mtext>系统拥有的内容总数</mtext></mfrac></mrow><annotation encoding="application/x-tex">\text{Coverage} = \frac{推荐的内容数}{系统拥有的内容总数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Coverage</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">系统拥有的内容总数</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">推荐的内容数</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></li><li><p>兴趣度（Interest）：用户对推荐内容的偏好程度，通常通过隐式反馈（如点击率、停留时间）或显式评分（如5星评价）量化。</p></li></ul><h2 id="冷启动"><a href="#冷启动" class="headerlink" title="冷启动"></a>冷启动</h2><p>所谓冷启动，就是在没有任何用户数据和内容数据的关系时，如何快速构建推荐引擎，让系统正向的跑起来。</p><p>按照不同的维度，又可以分为以下几种：用户冷启动，内容冷启动 和 系统冷启动。</p><h3 id="用户冷启动"><a href="#用户冷启动" class="headerlink" title="用户冷启动"></a>用户冷启动</h3><p>一个新注册的用户，系统没有他的任何行为数据，也没有历史交互数据，该如何给他推荐内容。</p><p>既然我们没有新用户的行为数据，那就尽量的去获取用户的一些静态标签数据，比如用户注册时，让用户填写性别、年龄、职业、兴趣方向等基本信息。</p><p>除此之外，我们还可以根据用户登录ip获取其大概地域信息，登录时间获取作息规律等。</p><p>甚至可以通过用户登录邮箱的服务商，来获取用户的一些静态标签数据。</p><p>这些静态标签就是用户的原始数据，将这些信息投放到推荐引擎里，我们就可以把其他类似用户的喜好内容，推荐给新用户，实现新用户的冷启动。</p><h3 id="内容冷启动"><a href="#内容冷启动" class="headerlink" title="内容冷启动"></a>内容冷启动</h3><p>一个新加入系统的内容，没有被任何人关注过，数据层面出于长尾部，该如何把它推荐给合适的用户。</p><p>这里主要要解决两部分内容：</p><ul><li>新内容，如何快速拆解其内容、特征等标签信息。</li><li>长尾内容，新内容的数据一般很差，无法和热点内容竞争，该如何快速曝光的问题。</li></ul><p>针对这两个问题，我们需要分别来解决：</p><ul><li>新内容的打标：<ul><li>让内容提供商尽可能全的去填写这个内容的特征信息</li><li>通过内容提供商本身的信息，对内容进行打标。</li><li>通过一些内容分析系统，获取内容本身的特性信息。</li><li>人工分类推荐</li></ul></li><li>对长尾特征<ul><li>可以考虑将新内容增加权重基本，或者给新内容单独的流量池子，比如音乐软件里的新歌推荐等。</li><li>打破推荐模型，增加纯粹按时间更新的内容模块</li><li>使用一些反长尾的推荐算法</li></ul></li></ul><h3 id="系统冷启动"><a href="#系统冷启动" class="headerlink" title="系统冷启动"></a>系统冷启动</h3><p>一个新网站，没有用户或用户很少，该如何快速的收集用户行为数据，构建推荐引擎。</p><p>这里内容的方面可以参考内容冷启动部分，也暂不考虑用户的拓新问题，仅考虑在自然增长的用户体系内，尽快的收集用户的行为数据。</p><ul><li>排行榜，热门榜等榜单，吸引用户的点击，构建用户和兴趣关系。</li><li>搜索，让用户在搜索框中输入内容，构建用户和关键词的关系。</li><li>社交网络，如果用户是社交账号登录的，我们可以获得用户的社交关系（需授权）。</li><li>随机，增加随机内容推荐，快速收集用户和内容的关系。</li></ul><p>当然还有一些没有提到的其他方法，本身上都是尽可能的将全量的内容尽量全面的呈现在用户面前，尽可能全面的构建全量的用户和内容的关系，获取推荐引擎的训练数据。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>推荐系统是一个庞大且复杂的系统，其中涉及到推荐算法、产品设计、系统设计、数据分析、系统调优甚至大模型等各个方面。</p><p>知易行难，本文只是将自己了解到的推荐系统的一些基本概念和设计思路进行了一些整理，如果要深入的了解，还需要按图索骥，去各个方向深化学习。</p><p>希望对大家有所帮助。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.hancher.top/2025/04/03/base-algorithm-similarity/">相似度算法在地址匹配中的应用</a> </p><p><a href="https://url41.ctfile.com/f/62647441-1494884764-d5fd95?p=45fsk">Recommender_systems_handbook</a></p><p><a href="https://url41.ctfile.com/f/62647441-1494884743-3552c9?p=45fsk">推荐系统实践</a></p>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>架构</tag>
      
      <tag>推荐系统</tag>
      
      <tag>推荐算法</tag>
      
      <tag>方法论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>相似度算法在地址匹配中的应用</title>
    <link href="/2025/04/03/base-algorithm-similarity/"/>
    <url>/2025/04/03/base-algorithm-similarity/</url>
    
    <content type="html"><![CDATA[<p>在做地址匹配的时候，我们经常会遇到一个问题：</p><p>addr1 &#x3D; 河北省石家庄市裕华区万达广场<br>addr2 &#x3D; 河北石家庄市裕华万达广场    </p><p>是同一个地址吗？</p><p>addr1 &#x3D; 河北石家庄市裕华万达广场<br>addr3 &#x3D; 河北石家庄市裕华万达公馆    </p><p>是同一个地址吗？</p><p>在人的眼里，这可能不是什么问题，可是在计算机眼里，这就不好说了。</p><p>计算机能够很快的匹配两个字符串是否完全一样，但是对于差那么几个字符的，计算机是无法识别其差别有多大的，而且计算机也无法识别出来差的那几个字是关键词还是普通的辅助词。</p><p>所以相似度算法也就派上用场了。</p><p>所谓相似度算法，就是通过一定的计算逻辑，老判断两个字符串（不仅仅是字符串）之间差距有多大，然后给出一个评分，评分越高，则两个字符串越相似，如果两个字符串完全一样，则评分为1。</p><p>根据实现原理的不同，相似度算法又可以分为：</p><ul><li>基于向量的近似匹配<ul><li>cosine余弦相似度匹配</li></ul></li><li>基于编辑距离的近似匹配<ul><li>Levenshtein算法</li></ul></li><li>基于字符串局部匹配的近似匹配<ul><li>jaroWinkler</li><li>needlemanWunch</li><li>smithWaterman</li></ul></li><li>基于集合的近似匹配<ul><li>jaccard</li><li>dice</li><li>overlap Coefficient</li></ul></li></ul><h2 id="1-基于向量的余弦近似度匹配"><a href="#1-基于向量的余弦近似度匹配" class="headerlink" title="1. 基于向量的余弦近似度匹配"></a>1. 基于向量的余弦近似度匹配</h2><p>所谓向量，就是我们数学上学习过的那个向量（数学照进现实），是一个有方向的字段。<br>在向量近似匹配的逻辑里，如果两个向量间的夹角越小，则两个向量越相似，这里用到的算法就是余弦相似度算法。</p><p><img src="/../../../images/tech/algorithm/cosine.png" alt="余弦夹角与向量"></p><p>余弦相似度公式：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>cosine</mtext><mo stretchy="false">(</mo><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo separator="true">⋅</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant="normal">∥</mi><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mi mathvariant="normal">∥</mi><mi mathvariant="normal">∥</mi><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mi mathvariant="normal">∥</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\text{cosine}(\vec{a}, \vec{b}) = \frac{\vec{a}·\vec{b}}{\|\vec{a}\|\|\vec{b}\|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2274em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">cosine</span></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewBox="0 0 471 714" preserveAspectRatio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewBox="0 0 471 714" preserveAspectRatio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.7719em;vertical-align:-1.1174em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6544em;"><span style="top:-2.1326em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewBox="0 0 471 714" preserveAspectRatio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord">∥∥</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewBox="0 0 471 714" preserveAspectRatio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewBox="0 0 471 714" preserveAspectRatio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewBox="0 0 471 714" preserveAspectRatio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1174em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p>对应到字符串匹配上，结合TF-IDF算法, 统计每个地址里分词出现的频率，这些频率就组成了这个这个地址的向量值,然后套用上面的公式，就可以计算出上面的余弦相似度了。</p><p>然后，问题的关键就来到了如何有效的对每个地址字符串进行分词拆分了，这里推荐一个java里好用的工具<a href="https://github.com/hankcs/HanLP">HanLP</a>，这是一个专门面向汉语分词的工具包，1.0版本提供了一套java的分词器，比较好用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.hankcs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hanlp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>portable-1.8.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后通过HanLP对字符串进行分词，分词结果：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">addr1</span> = [河北省, 石家庄市, 裕华区, 万达, 广场]<br><span class="hljs-attr">addr2</span> = [河北, 石家庄市, 裕华, 万达, 广场]<br><span class="hljs-attr">addr3</span> = [河北, 石家庄市, 裕华, 万达, 公馆]<br></code></pre></td></tr></table></figure><p>然后将比较的两个短语取并集，统计每个词出现的频率，就可以得到这个地址的向量值了.</p><ul><li>addr1 vs addr2</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">addr1 vs addr2 并集 = <span class="hljs-selector-attr">[河北省, 石家庄市, 裕华区, 万达, 广场, 河北，裕华]</span><br><span class="hljs-comment">// 并集中每个词出现的频率就是其坐标点位</span><br>addr1 = <span class="hljs-selector-attr">[1, 1, 1, 1, 1, 0, 0]</span><br>addr2 = <span class="hljs-selector-attr">[0, 1, 0, 1, 1, 1, 1]</span><br></code></pre></td></tr></table></figure><p>余弦向量计算结果：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mn>1</mn><mo separator="true">⋅</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo separator="true">⋅</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo separator="true">⋅</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo separator="true">⋅</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo separator="true">⋅</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo separator="true">⋅</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo separator="true">⋅</mo><mn>1</mn></mrow><mrow><msqrt><mrow><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>0</mn><mn>2</mn></msup><mo>+</mo><msup><mn>0</mn><mn>2</mn></msup></mrow></msqrt><mo separator="true">⋅</mo><msqrt><mrow><msup><mn>0</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>0</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup></mrow></msqrt></mrow></mfrac><mo>=</mo><mn>0.6</mn></mrow><annotation encoding="application/x-tex">\frac{1·0+1·1+1·0+1·1+1·1+0·1+0·1}{\sqrt{1^2+1^2+1^2+1^2+1^2+0^2+0^2}·\sqrt{0^2+1^2+0^2+1^2+1^2+1^2+1^2}} = 0.6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2514em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.1966em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9134em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.8734em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1266em;"><span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9134em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.8734em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1266em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.6</span></span></span></span></span><ul><li>addr1 vs  addr3</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">addr1 vs addr3 并集 = <span class="hljs-selector-attr">[河北省, 石家庄市, 裕华区, 万达, 广场, 河北，裕华,公馆]</span><br><span class="hljs-comment">// 并集中每个词出现的频率就是其坐标点位</span><br>addr1 = <span class="hljs-selector-attr">[1, 1, 1, 1, 1, 0, 0, 0]</span><br>addr3 = <span class="hljs-selector-attr">[0, 1, 0, 1, 0, 1, 1, 1]</span><br></code></pre></td></tr></table></figure><p>余弦向量计算结果：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mn>1</mn><mo separator="true">⋅</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo separator="true">⋅</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo separator="true">⋅</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo separator="true">⋅</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo separator="true">⋅</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo separator="true">⋅</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo separator="true">⋅</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo separator="true">⋅</mo><mn>1</mn></mrow><mrow><msqrt><mrow><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>0</mn><mn>2</mn></msup><mo>+</mo><msup><mn>0</mn><mn>2</mn></msup><mo>+</mo><msup><mn>0</mn><mn>2</mn></msup></mrow></msqrt><mo separator="true">⋅</mo><msqrt><mrow><msup><mn>0</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>0</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>0</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup></mrow></msqrt></mrow></mfrac><mo>=</mo><mn>0.4</mn></mrow><annotation encoding="application/x-tex">\frac{1·0+1·1+1·0+1·1+1·1+0·1+0·1+0·1}{\sqrt{1^2+1^2+1^2+1^2+1^2+0^2+0^2+0^2}·\sqrt{0^2+1^2+0^2+1^2+0^2+1^2+1^2+1^2}} = 0.4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2514em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.1966em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9134em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.8734em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1266em;"><span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9134em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.8734em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1266em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.4</span></span></span></span></span><p>所以，addr1 和 addr2 更相似。</p><h2 id="2-基于字符串编辑距离的近似度匹配"><a href="#2-基于字符串编辑距离的近似度匹配" class="headerlink" title="2. 基于字符串编辑距离的近似度匹配"></a>2. 基于字符串编辑距离的近似度匹配</h2><p>所谓编辑距离，就是一个字符串，删除一个字符，或者增加一个字符，或者替换一个字符，可以得到另外一个字符串，那么，变动几次就是这两个字符串的编辑距离。</p><p>这个很好理解，我们可以拿上面的三个地址举例。</p><p>addr2 可以通过增加“省”，“区”两个字得到 addr1, 所以addr1 和 addr2 的编辑距离为2 。 </p><p>addr3 可以通过替换“公馆”为“广场”两个字得到 addr2, 而addr2 和addr1 的编辑距离为2， 所以addr1 和 addr3 的编辑距离为4 。</p><p>这个算法，仅关注两个字符的变化差异，受到一些辅助性词汇的干扰比较大，所以，这个算法并不适合于比较两个地址是否一样的逻辑。</p><h2 id="3-基于字符串局部匹配的近似度匹配"><a href="#3-基于字符串局部匹配的近似度匹配" class="headerlink" title="3. 基于字符串局部匹配的近似度匹配"></a>3. 基于字符串局部匹配的近似度匹配</h2><p>关于字符串的局部匹配的算法就很多了，我们就以上面说的那几个算法举例：</p><ul><li>smithWaterman ：局部序列比对：对比两个字符串中的子序列部分，通过一套打分系统，来寻找两个字符中每一个相似片段，最后返回最大的匹配得分。</li><li>needlemanWunch：全局序列比对：通过填充替换等方式，对两个字符串进行改造，配合一套打分系统，对每一种全字符串改造成功后的方案进行打分，最后返回最大的匹配得分。</li><li>jaroWinkler：jaro算法改进版，引入了前缀因子，相同前缀的数据，匹配得分会更高</li></ul><p>因为地址的特殊性，jaroWinkler算法会更适用一些。</p><h2 id="4-基于集合的近似度匹配"><a href="#4-基于集合的近似度匹配" class="headerlink" title="4. 基于集合的近似度匹配"></a>4. 基于集合的近似度匹配</h2><p>将字符串拆解成分词，然后将每一组分词看出一个集合，通过集合间的交集、并集等方式，是实现字符串相似度匹配的另一种实现逻辑。</p><h3 id="4-1-jaccard"><a href="#4-1-jaccard" class="headerlink" title="4.1 jaccard"></a>4.1 jaccard</h3><p>jaccard算法，也叫杰卡德算法， 是一种比较有限样本集的相似性与差异性的算法，值越大，相似度越高。</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>jaccard</mtext><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>a</mi><mo>∩</mo><mi>b</mi></mrow><mrow><mi>a</mi><mo>∪</mo><mi>b</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\text{jaccard}(a, b) = \frac{a \cap b}{a \cup b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">jaccard</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p>同样以上面的地址举例：<br>addr1 和 addr2 交集 &#x3D; [石家庄市, 万达, 广场]<br>addr1 和 addr2 并集 &#x3D; [河北省, 石家庄市, 裕华区, 万达, 广场, 河北，裕华]</p><p>所以：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>jaccard</mtext><mo stretchy="false">(</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>3</mn><mn>7</mn></mfrac><mo>=</mo><mn>0.42857</mn></mrow><annotation encoding="application/x-tex">\text{jaccard}(addr1, addr2) = \frac{3}{7} = 0.42857</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">jaccard</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.42857</span></span></span></span></span><p>addr1 和 addr3 交集 &#x3D; [石家庄市, 万达]<br>addr1 和 addr3 并集 &#x3D; [河北省, 石家庄市, 裕华区, 万达, 广场, 河北，裕华,公馆]</p><p>所以：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>jaccard</mtext><mo stretchy="false">(</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>3</mn><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>2</mn><mn>8</mn></mfrac><mo>=</mo><mn>0.25</mn></mrow><annotation encoding="application/x-tex">\text{jaccard}(addr1, addr3) = \frac{2}{8} = 0.25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">jaccard</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.25</span></span></span></span></span><h3 id="4-2-dice"><a href="#4-2-dice" class="headerlink" title="4.2 dice"></a>4.2 dice</h3><p>dice算法，jaccard算法的一个改进版本，增加了相似集合的权重。</p><p>dice 的算法公式：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>dice</mtext><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mn>2</mn><mi mathvariant="normal">∣</mi><mi>a</mi><mo>∩</mo><mi>b</mi><mi mathvariant="normal">∣</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>b</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\text{dice}(a, b) = \frac{2|a \cap b |}{|a| + |b|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">dice</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathnormal">a</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">∣</span><span class="mord mathnormal">b</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2∣</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">b</span><span class="mord">∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|a|  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">a</span><span class="mord">∣</span></span></span></span> 表示集合a的元素个数。</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>b</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|b|  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">b</span><span class="mord">∣</span></span></span></span> 表示集合b的元素个数。</li></ul><p>同样以上面的地址举例：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>dice</mtext><mo stretchy="false">(</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mn>2</mn><mo separator="true">⋅</mo><mn>3</mn></mrow><mrow><mn>5</mn><mo>+</mo><mn>5</mn></mrow></mfrac><mo>=</mo><mn>0.6</mn></mrow><annotation encoding="application/x-tex">\text{dice}(addr1, addr2) = \frac{2·3}{5 + 5} = 0.6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">dice</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0908em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.6</span></span></span></span></span><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>dice</mtext><mo stretchy="false">(</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>3</mn><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mn>2</mn><mo separator="true">⋅</mo><mn>2</mn></mrow><mrow><mn>5</mn><mo>+</mo><mn>5</mn></mrow></mfrac><mo>=</mo><mn>0.4</mn></mrow><annotation encoding="application/x-tex">\text{dice}(addr1, addr3) = \frac{2·2}{5+5} = 0.4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">dice</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0908em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.4</span></span></span></span></span><h3 id="4-3-Overlap-Coefficient"><a href="#4-3-Overlap-Coefficient" class="headerlink" title="4.3 Overlap Coefficient"></a>4.3 Overlap Coefficient</h3><p>Overlap Coefficient（重叠系数）是一种用于衡量两个集合相似度的算法，其核心原理是计算两个集合的交集大小与较小集合大小的比值。</p><p>Overlap Coefficient的计算公式：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Overlap</mtext><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>a</mi><mo>∩</mo><mi>b</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>a</mi><mi mathvariant="normal">∣</mi><mo separator="true">,</mo><mi mathvariant="normal">∣</mi><mi>b</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\text{Overlap}(a, b) = \frac{a \cap b}{min(|a|, |b|)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Overlap</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3074em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal">a</span><span class="mord">∣</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal">b</span><span class="mord">∣</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><p>依据这个公式，上面地址的计算结果为：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Overlap</mtext><mo stretchy="false">(</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>3</mn><mn>5</mn></mfrac><mo>=</mo><mn>0.6</mn></mrow><annotation encoding="application/x-tex">\text{Overlap}(addr1, addr2) = \frac{3}{5} = 0.6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Overlap</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.6</span></span></span></span></span><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Overlap</mtext><mo stretchy="false">(</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mn>3</mn><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>2</mn><mn>5</mn></mfrac><mo>=</mo><mn>0.4</mn></mrow><annotation encoding="application/x-tex">\text{Overlap}(addr1, addr3) = \frac{2}{5} = 0.4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Overlap</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.4</span></span></span></span></span><h2 id="5-应用实践"><a href="#5-应用实践" class="headerlink" title="5. 应用实践"></a>5. 应用实践</h2><p>以上，这些字符串的相似度算法的原理我们都了解了，在实际应用中，我们完全可以根据业务场景和算法特点，选择合适的算法应用，甚至可以组合的使用。</p><p>我这边是要做了一个地址比较的项目，因为地址的特点，我选择了前缀匹配的jaroWinkler算法，组合cosine余弦算法来实现，只有两个算法都成功的时候，才认为两个地址是相似的。</p><p>具体步骤如下：</p><ol><li>预处理：将两个地址对齐，统一按照省市县镇的格式补全地址，不然单给一个万达广场，根本无法匹配准确地址。</li><li>地址规范化补全后，使用hanLP分词，对地址进行分词，得到一个词表。</li><li>使用jaroWinkler相似度算法匹配地址</li><li>使用cosine算法匹配地址</li><li>两个算法的成功率都达到阈值，才认为两个地址是相似的。</li><li>最后再根据地址的特点，前面的词都是辅助性定语，只有最后的词才是关键词，所以我最后又增加了一次优化：对比两个地址的尾串，如果完全相同的部分大于某个阈值，则认为两个地址是相似的。</li></ol><h2 id="6-这些算法的代码demo"><a href="#6-这些算法的代码demo" class="headerlink" title="6. 这些算法的代码demo"></a>6. 这些算法的代码demo</h2><p>以下是这些算法的代码demo，大家可以参考一下：</p><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.mpkorstanje<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>simmetrics-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.hankcs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hanlp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>portable-1.8.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>hanLP: 前面已经介绍过了，是一个很好用的中文分词工具类。</p><p>simmetrics： 一个开源的字符串相似度算法库，集成了很多常用的算法，可以拿来直接使用。</p><ul><li>code</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">addr1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;河北省石家庄市裕华区万达广场&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">addr2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;河北石家庄市裕华万达广场&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">addr3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;河北石家庄市裕华万达公馆&quot;</span>;<br><br><br>        List&lt;String&gt; addr1List = hanlpSeg(addr1);<br>        List&lt;String&gt; addr2List = hanlpSeg(addr2);<br>        List&lt;String&gt; addr3List = hanlpSeg(addr3);<br><br>        <span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;---cosine：  a·b / (||a|| * ||b||)---&quot;</span>);<br>        CosineSimilarity&lt;String&gt; cosineClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CosineSimilarity</span>&lt;String&gt;();<br>        <span class="hljs-type">float</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> cosineClient.compare(HashMultiset.create(addr1List),<br>                HashMultiset.create(addr2List));<br>        System.out.println(score);<br>        score = cosineClient.compare(HashMultiset.create(addr1List),<br>                HashMultiset.create(addr3List));<br>        System.out.println(score);<br><br><br>        System.out.println(<span class="hljs-string">&quot;---jaccard：∣a ∩ b∣ / ∣a ∪ b∣--- &quot;</span>);<br>        <span class="hljs-type">Jaccard</span> <span class="hljs-variable">jaccard</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jaccard</span>&lt;String&gt;();<br>        System.out.println(jaccard.compare(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr1List),<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr2List)));<br>        System.out.println(jaccard.compare(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr1List),<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr3List)));<br><br>        System.out.println(<span class="hljs-string">&quot;---dice：2倍交集大小除以两集合大小之和 类似Jaccard但对共有词更敏感 --- &quot;</span>);<br>        Dice&lt;String&gt; dice = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dice</span>&lt;String&gt;();<br>        System.out.println(dice.compare(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr1List),<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr2List)));<br>        System.out.println(dice.compare(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr1List),<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr3List)));<br><br>        System.out.println(<span class="hljs-string">&quot;---overlapCoefficient：交集大小除以较短集合的大小--- &quot;</span>);<br>        OverlapCoefficient&lt;String&gt; overlapCoefficient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OverlapCoefficient</span>&lt;String&gt;();<br>        System.out.println(overlapCoefficient.compare(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr1List),<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr2List)));<br>        System.out.println(overlapCoefficient.compare(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr1List),<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(addr3List)));<br>        <br><br>        System.out.println(<span class="hljs-string">&quot;---smithWaterman：局部序列对齐 动态规划+得分矩阵--- &quot;</span>);<br>        <span class="hljs-type">StringMetric</span> <span class="hljs-variable">smithWaterman</span> <span class="hljs-operator">=</span> StringMetrics.smithWaterman();<br>        System.out.println(smithWaterman.compare(addr1,addr2));<br>        System.out.println(smithWaterman.compare(addr1,addr3));<br><br>        System.out.println(<span class="hljs-string">&quot;---needlemanWunch：全局序列对齐，动态规划+固定空位罚分--- &quot;</span>);<br>        <span class="hljs-type">StringMetric</span> <span class="hljs-variable">needlemanWunch</span> <span class="hljs-operator">=</span> StringMetrics.needlemanWunch();<br>        System.out.println(needlemanWunch.compare(addr1,addr2));<br>        System.out.println(needlemanWunch.compare(addr1,addr3));<br><br>        System.out.println(<span class="hljs-string">&quot;---jaroWinkler：关注前缀匹配--- &quot;</span>);<br>        <span class="hljs-type">StringMetric</span> <span class="hljs-variable">jaroWinkler</span> <span class="hljs-operator">=</span> StringMetrics.jaroWinkler();<br>        System.out.println(jaroWinkler.compare(addr1,addr2));<br>        System.out.println(jaroWinkler.compare(addr1,addr3));<br><br>        System.out.println(<span class="hljs-string">&quot;---levenshtein：编辑距离--- &quot;</span>);<br>        <span class="hljs-type">Levenshtein</span> <span class="hljs-variable">levenshtein</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Levenshtein</span>();<br>        System.out.println(levenshtein.compare(addr1,addr2)+<span class="hljs-string">&quot;:距离=&quot;</span>+levenshtein.distance(addr1,addr2));<br>        System.out.println(levenshtein.compare(addr1,addr3)+<span class="hljs-string">&quot;:距离=&quot;</span>+levenshtein.distance(addr1,addr3));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">hanlpSeg</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">Segment</span> <span class="hljs-variable">segment</span> <span class="hljs-operator">=</span> HanLP.newSegment().enablePlaceRecognize(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 可以通过这种方式，自己指定分词</span><br><span class="hljs-comment">//      CustomDictionary.add(&quot;万达广场&quot;,&quot;ns 1000&quot;);</span><br>      <br>      List&lt;String&gt; list = segment.seg(str).stream().map(term -&gt; term.word).toList();<br>        System.out.println(list);<br>        <span class="hljs-keyword">return</span> list;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hanlp.hankcs.com/install.html#_1-x%E7%89%88">hanLp 1.x文档</a></p><p><a href="https://github.com/Simmetrics/simmetrics">simmetrics github</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>相似度算法</tag>
      
      <tag>余弦相似度</tag>
      
      <tag>向量</tag>
      
      <tag>jaroWinkler</tag>
      
      <tag>blockDistance</tag>
      
      <tag>jaccard</tag>
      
      <tag>simmetrics</tag>
      
      <tag>hanlp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring AI 功能初体验</title>
    <link href="/2025/03/24/spring-springboot-ai-demo/"/>
    <url>/2025/03/24/spring-springboot-ai-demo/</url>
    
    <content type="html"><![CDATA[<p>上一篇文章，我们介绍了如何在本地部署deepseek,这一篇我们继续学以致用，探索一下如何通过springAI 框架快速继承我们的deepseek服务，实现对外服务的功能。</p><h2 id="1-创建一个springboot-ai项目"><a href="#1-创建一个springboot-ai项目" class="headerlink" title="1. 创建一个springboot ai项目"></a>1. 创建一个springboot ai项目</h2><p>springboot提供了一个ai框架，可以快速创建一个ai项目，并可以通过配置的方式，快速集成：</p><ul><li><code>openai</code></li><li><code>智谱ai</code></li><li><code>千帆ai</code></li><li><code>google vertexAI</code></li><li><code>Azure openAI</code></li><li><code>deepseek</code></li><li>月之暗面<code>kimi</code></li><li><code>英伟达chat</code></li><li>IBM的<code>watsonX ai</code></li><li><code>ollma</code>大模型</li><li>各种常见的向量数据库</li></ul><p>可以看到，deepseek很快就集成进去了，正好满足我们的诉求。</p><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><p>打开springboot的<a href="https://start.spring.io/">快速构建页面</a>,添加<code>Open AI</code> 和 <code>Spring Reactive Web</code>两个依赖，然后开始。<br><img src="/../../images/tech/spring/spring-ai-project.png" alt="spring AI项目"></p><ul><li><code>Open AI</code> 是一个chat框架，除了接入openai外，还可以接入我们的deepseek r1模型。</li><li><code>Spring Reactive Web</code> 是交互式web框架，deepseek的流式交互需要用的此框架，而我们部署的<code>deepseek r1 1.5b</code>模型似乎只支持流式交互，所以需要用到此框架。<ul><li>神奇的时，如果我连deepseek官方的满血r1模型，及时不是流式交互，也是可以的，这里尚未找到原因，有知道的朋友可以解答一下。</li></ul></li></ul><p>这就是我们创建好的springboot AI项目的pom配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.ai<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-ai-openai-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span><br><br><span class="hljs-comment">&lt;!--r1 必须是流模式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="api接口"><a href="#api接口" class="headerlink" title="api接口"></a>api接口</h3><p>chat controller 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/ai/chat&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> OpenAiChatModel chatModel;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChatController</span><span class="hljs-params">(OpenAiChatModel chatModel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.chatModel = chatModel;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阻塞式接口，可以使用普通的web框架，会等deepseek回答完成后一次性返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 问题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/generate&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">generate</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        System.out.printf(<span class="hljs-string">&quot;uid=%s, message: %s%n&quot;</span>, uuid, message);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.chatModel.call(message);<br>        System.out.printf(<span class="hljs-string">&quot;uid=%s, message: %s%n&quot;</span>, uuid, res);<br>        <span class="hljs-keyword">return</span> Map.of(<span class="hljs-string">&quot;generation&quot;</span>, res);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 流式交互接口，会一个字一个字的返回数据，需要使用响应式web框架</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 问题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/generateStream&quot;)</span><br>    <span class="hljs-keyword">public</span> Flux&lt;ChatResponse&gt; <span class="hljs-title function_">generateStream</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;<br>        <span class="hljs-type">Prompt</span> <span class="hljs-variable">prompt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Prompt</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserMessage</span>(message));<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.chatModel.stream(prompt);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>generate： 阻塞式接口，如果我们介入的deepseekV3模型，R1满血模型，可以用这个接口请求，会一次性把回答全部返回。需要添加依赖<code>spring-boot-starter-web</code></li><li>generateStream：流式接口，如果deepseekV3模型，R1模型，可以用这个接口请求，会一个字一个字返回数据。 经验证，R1的1.5B模型仅支持流式交互。</li></ul><h3 id="配置deepseek"><a href="#配置deepseek" class="headerlink" title="配置deepseek"></a>配置deepseek</h3><p>最后，我们就可以介入自己搭建的deepseek了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs application.properties"># r1 模型需要使用流模式<br>spring.ai.openai.base-url=http://192.168.2.68:8000<br>spring.ai.openai.api-key=test-key # 自己搭建的模型不用key<br>spring.ai.openai.chat.options.model=model/DeepSeek-R1-Distill-Qwen-1.5B<br>spring.ai.openai.embedding.enabled=false<br><br></code></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>然后在浏览器里访问<code>http://localhost:8080/ai/chat/generateStream?message=你是谁</code> ，就可以看到deepseek的回答了，会看到一长串的流式数据，类似下面：<br><img src="/../../images/tech/spring/spring-ai-deepseek-r1-res.png" alt="deepseek r1流式返回demo"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.spring.io/spring-ai/reference/concepts.html">spring AI 官方文档</a></p><p><a href="https://github.com/Hanchers/springboot3-demo/tree/main/hello-ai">github demo代码</a></p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>springAI</tag>
      
      <tag>deepseek</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>纯cpu版linux本地安装DeepSeek-R1-Distill-Qwen-1.5B</title>
    <link href="/2025/03/13/ai-deepseek-install-ds-r1-1-5b/"/>
    <url>/2025/03/13/ai-deepseek-install-ds-r1-1-5b/</url>
    
    <content type="html"><![CDATA[<p>想要学习一下deepseek的运行原理与模型调优，所以就有了在本地安装一套deepseek的想法。</p><p>因为是学习为主，就选择了DeepSeek-R1-Distill-Qwen-1.5B版本为我们的学习版本。</p><p>但我只有一台centos7的纯cpu服务器，用来学习也够用了。以下记录deepseek在纯cpu版本的linux上部署的过程。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>cpu: Intel Xeon Processor (Skylake, IBRS)</li><li>os： centos7</li><li>内存：16g</li><li>gpu: 无</li></ul><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h3><p>vllm 官方需要python: 3.9 - 3.12</p><blockquote><p>Python: 3.9 – 3.12</p></blockquote><h4 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h4><p>因为linux里已经有了一套2.7的Python了，所以要按照Python3的话，只能重新安装一套了。综合考虑，选择使用<code>pyenv</code>工具来安装，比较简单</p><p>安装pyenv:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://pyenv.run | bash<br></code></pre></td></tr></table></figure><p>也可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s -S -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash<br></code></pre></td></tr></table></figure><h4 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h4><p>pyenv安装完成后，使用pyenv安装 Python3.10.16（3.x版本都可以,尽量用最新的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv install -v 3.10.16<br></code></pre></td></tr></table></figure><p>在这里大概率会提示<code>Missing the OpenSSL lib</code>这个问题，可以参考<a href="https://www.hancher.top/2025/03/11/linux-centos7-install-py3-10-no-ssl-err/">centos7安装Python3.10，提示no ssl 问题解决</a>解决</p><p>这里有两个选择：</p><p>如果希望将Python3.10 设置为全局的Python环境配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv global 3.10.16<br></code></pre></td></tr></table></figure><p>这样我们就可以在任意位置使用python3了，而且Python命令也指向了Python3.</p><p>如果希望仅在某个目录下使用Python3.10，可以配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyenv <span class="hljs-built_in">local</span> 3.10.16<br></code></pre></td></tr></table></figure><p>这样，我们只有在这个目录下，才会使用到Python3.10. 其他配置下，还是使用系统配置。</p><p><strong>注意，以上配置需要重启终端生效</strong></p><h3 id="安装vllm"><a href="#安装vllm" class="headerlink" title="安装vllm"></a>安装vllm</h3><p>安装好python3.10后，开始安装vllm.</p><p>因为vllm官方没有提供cpu版本的轮子，所以我们需要从源码手动编译vllm。</p><h4 id="开启虚拟环境"><a href="#开启虚拟环境" class="headerlink" title="开启虚拟环境"></a>开启虚拟环境</h4><p>开启虚拟环境，使vllm的安装与其他python环境隔离。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m venv vllm_env<br><span class="hljs-built_in">source</span> vllm_env/bin/activate<br><br></code></pre></td></tr></table></figure><h3 id="升级gcc"><a href="#升级gcc" class="headerlink" title="升级gcc"></a>升级gcc</h3><p>查看一下当前系统的gcc版本, centos7 大概率是<code>4.8.5</code>. 如果要安装vllm，需要将gcc升级到<code>11.x</code>。</p><p>如果当前系统gcc已经是<code>11.x</code>, 可以跳过此步。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc --version<br><br>gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)<br>Copyright (C) 2015 Free Software Foundation, Inc.<br>This is free software; see the <span class="hljs-built_in">source</span> <span class="hljs-keyword">for</span> copying conditions.  There is NO<br>warranty; not even <span class="hljs-keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br></code></pre></td></tr></table></figure><p>升级gcc，请参考<a href="https://www.hancher.top/2025/03/12/linux-centos7-gcc-upgrade/">centos7升级gcc到版本8</a></p><h3 id="安装vllm-1"><a href="#安装vllm-1" class="headerlink" title="安装vllm"></a>安装vllm</h3><p>vllm 需要依赖 PyTorch 来进行底层计算。因为我这是纯cpu的学习版，所以只有安装cpu版即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install torch torchvision torchaudio numactl-devel python3-devel openssl-devel xz-devel libffi-devel<br></code></pre></td></tr></table></figure><p>查看cpu是否支持<code>avx512_bf16</code>向量指令集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep avx512_bf16 /proc/cpuinfo<br></code></pre></td></tr></table></figure><p>如果没有输出，则说明不支持，需要在打包vllm的时候禁用<code>VLLM_CPU_AVX512BF16=1</code></p><p>克隆源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/vllm-project/vllm.git vllm_source<br><span class="hljs-built_in">cd</span> vllm_source<br></code></pre></td></tr></table></figure><p>在vllm源码目录下，打包cpu版vllm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装cmake打包工具</span><br>pip install <span class="hljs-string">&quot;cmake&gt;=3.26&quot;</span> wheel packaging ninja <span class="hljs-string">&quot;setuptools-scm&gt;=8&quot;</span> numpy<br><br><span class="hljs-comment"># 根据官方推荐的cpu配置，下载cpu版的依赖</span><br>pip install -v -r requirements/cpu.txt --extra-index-url https://download.pytorch.org/whl/cpu<br><br><span class="hljs-comment"># 指定cpu模式，打包</span><br>FORCE_CUDA=0 VLLM_TARGET_DEVICE=cpu VLLM_CPU_AVX512BF16=1 python setup.py install<br></code></pre></td></tr></table></figure><p>有的centos7版本比较老（比如我），会报如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">vllm_source/csrc/cpu/utils.cpp:84:38: error: ‘gettid’ was not declared in this scope; did you mean ‘getuid’?<br>   84 |     thread_core_mapping.emplace_back(gettid(), omp_cpu_ids[i]);<br></code></pre></td></tr></table></figure><p>也就是说<code>gettid</code>这个方法找不到，这个方法是用于获取线程ID的，我的系统不支持这个功能，需要自己去定义相关逻辑：</p><p>在<code>vllm_source/csrc/cpu/utils.cpp</code>文件头部添加如下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> gettid() syscall(SYS_gettid)</span><br></code></pre></td></tr></table></figure><p>最终效果如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> VLLM_NUMA_DISABLED</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numa.h&gt;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cpu_types.hpp&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> gettid() syscall(SYS_gettid)</span><br></code></pre></td></tr></table></figure><p>修改完成后，清理掉cmake 缓存，重新打包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在vllm_source目录下</span><br><span class="hljs-built_in">rm</span> -rf build<br><br><span class="hljs-comment"># 指定cpu模式，打包</span><br>FORCE_CUDA=0 VLLM_TARGET_DEVICE=cpu VLLM_CPU_AVX512BF16=1 python setup.py install<br></code></pre></td></tr></table></figure><p>最终，vllm终于安装成功了,验证一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python -c <span class="hljs-string">&quot;import vllm; print(vllm.__version__)&quot;</span><br><br>INFO 03-14 08:37:09 [__init__.py:256] Automatically detected platform cpu.<br>0.7.4.dev410+ga73122d.d20250314<br></code></pre></td></tr></table></figure><p>vllm安装成功。</p><h3 id="启动deepseek"><a href="#启动deepseek" class="headerlink" title="启动deepseek"></a>启动deepseek</h3><p>deepseek模型一般都比较大，最后提前下载下来。</p><p>推荐使用<code>modelscope</code>来管理。<code>modelscope</code>是一个用来管理大模型的平台，可以用来下载各大平台的开源模型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br>pip install modelscope<br><br><span class="hljs-comment"># 下载deepseek 模型</span><br><span class="hljs-built_in">mkdir</span> -p model/DeepSeek-R1-Distill-Qwen-1.5B<br>modelscope download --model deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B --local_dir model/DeepSeek-R1-Distill-Qwen-1.5B<br></code></pre></td></tr></table></figure><p><img src="/../../../images/tech/ai/model/modelscope_models.png" alt="modelscope支持的模型"></p><p>启动DeepSeek-R1-Distill-Qwen-1.5B模型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vllm serve model/DeepSeek-R1-Distill-Qwen-1.5B --tensor-parallel-size 2 --max-model-len 32768 --enforce-eager<br></code></pre></td></tr></table></figure><p>提示如下，项目启动成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">INFO:     Started server process [28967]<br>INFO:     Waiting for application startup.<br>INFO:     Application startup complete.<br></code></pre></td></tr></table></figure><p>我们在日志里会发现，模型提供了很多接口，我们可以尝试一下：</p><ul><li>查看模型信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl http://localhost:8000/v1/models<br></code></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;object&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;list&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/root/bai/deepseek/model/DeepSeek-R1-Distill-Qwen-1.5B&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;object&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;model&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1741916807</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;owned_by&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vllm&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/root/bai/deepseek/model/DeepSeek-R1-Distill-Qwen-1.5B&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;parent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;max_model_len&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">32768</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;permission&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;modelperm-74deb10e678f409698477a7818e7d57c&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;object&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;model_permission&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1741916807</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;allow_create_engine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;allow_sampling&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;allow_logprobs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;allow_search_indices&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;allow_view&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;allow_fine_tuning&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;organization&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;is_blocking&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>对话</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST http://localhost:8000/v1/chat/completions \<br>  -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>  -d <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">        &quot;model&quot;: &quot;model/DeepSeek-R1-Distill-Qwen-1.5B&quot;,</span><br><span class="hljs-string">        &quot;messages&quot;: [</span><br><span class="hljs-string">          &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;你是谁&quot;&#125;</span><br><span class="hljs-string">        ],</span><br><span class="hljs-string">        &quot;stream&quot;: false</span><br><span class="hljs-string">      &#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chatcmpl-5620282684554598b0448f1f7f4b6bda&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;object&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chat.completion&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1742174087</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;model/DeepSeek-R1-Distill-Qwen-1.5B&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;choices&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;role&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;assistant&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;reasoning_content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;您好！我是由中国的深度求索（DeepSeek）公司开发的智能助手DeepSeek-R1。如您有任何任何问题，我会尽我所能为您提供帮助。\n&lt;/think&gt;\n\n您好！我是由中国的深度求索（DeepSeek）公司开发的智能助手DeepSeek-R1。如您有任何任何问题，我会尽我所能为您提供帮助。&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;tool_calls&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;logprobs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;finish_reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stop&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;stop_reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;usage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;prompt_tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;total_tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">80</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;completion_tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">73</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;prompt_tokens_details&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;prompt_logprobs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>项目swagger文档</p><p>浏览器打开：<a href="http://localhost:8000/docs">http://localhost:8000/docs</a></p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.vllm.ai/en/latest/getting_started/installation/cpu.html">vllm 官方安装cpu版本说明</a></p><p><a href="https://www.modelscope.cn/docs/intro/quickstart">安装modelscope</a></p><p><a href="https://huggingface.co/deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B">huggingface：DeepSeek-R1-Distill-Qwen-1.5B模型</a></p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deepseek</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7系统升级gcc到gcc8及以上版本</title>
    <link href="/2025/03/12/linux-centos7-gcc-upgrade/"/>
    <url>/2025/03/12/linux-centos7-gcc-upgrade/</url>
    
    <content type="html"><![CDATA[<p>因为centos停止维护了，导致<code>mirror.centos.org</code>这个域名也失效了，这就让我们在使用<code>yum</code>命令升级一些组件的时候，发生一些域名问题。</p><p>比如，我这次要把gcc 4.x版本 升级到 gcc 8.x版本， 使用<code>yum</code>安装就遇到域名失效了问题，这里记录了解决办法。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="跟换阿里云镜像域名"><a href="#跟换阿里云镜像域名" class="headerlink" title="跟换阿里云镜像域名"></a>跟换阿里云镜像域名</h3><p>进入<code>/etc/yum.repos.d/</code>目录, 将<code>CentOS-SCLo-scl.repo</code>和<code>CentOS-SCLo-scl-rh.repo</code>两个文件备份，</p><p>然后修改里面的<code>baseurl</code> 或者 <code>mirrorlist</code>, 用<code>mirrors.aliyun.com</code>替换原先的已经过期的域名。</p><p><code>CentOS-SCLo-scl.repo</code>最终效果如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[centos-sclo-sclo]</span><br><span class="hljs-attr">name</span>=CentOS-<span class="hljs-number">7</span> - SCLo sclo<br><span class="hljs-attr">baseurl</span>=https://mirrors.aliyun.com/centos/<span class="hljs-number">7</span>/sclo/x<span class="hljs-number">86_64</span>/sclo/<br><span class="hljs-comment">#baseurl=https://vault.centos.org/centos/7/sclo/$basearch/sclo/</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo<br></code></pre></td></tr></table></figure><p><code>CentOS-SCLo-scl-rh.repo</code>最终效果如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[centos-sclo-rh]</span><br><span class="hljs-attr">name</span>=CentOS-<span class="hljs-number">7</span> - SCLo rh<br><span class="hljs-attr">baseurl</span>=https://mirrors.aliyun.com/centos/<span class="hljs-number">7</span>/sclo/x<span class="hljs-number">86_64</span>/rh/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo<br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清理yum缓存</span><br>yum clean all<br><span class="hljs-comment"># 重新构建缓存</span><br>yum makecache<br></code></pre></td></tr></table></figure><h3 id="重新安装devtoolset-8"><a href="#重新安装devtoolset-8" class="headerlink" title="重新安装devtoolset-8"></a>重新安装devtoolset-8</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y centos-release-scl<br>yum install -y devtoolset-8-gcc*<br></code></pre></td></tr></table></figure><h3 id="验证安装成功"><a href="#验证安装成功" class="headerlink" title="验证安装成功"></a>验证安装成功</h3><p>激活devtoolset-8环境（临时生效）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">scl <span class="hljs-built_in">enable</span> devtoolset-8 bash<br>gcc --version  <span class="hljs-comment"># 应显示gcc 8.x.x</span><br></code></pre></td></tr></table></figure><h3 id="激活gcc8"><a href="#激活gcc8" class="headerlink" title="激活gcc8"></a>激活gcc8</h3><p>进入终端的配置文件：<code>~/.bashrc</code>或<code>/etc/profile</code>, 添加如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /opt/rh/devtoolset-8/enable<br></code></pre></td></tr></table></figure><p>然后 <code>source</code>对应的文件，或者重启终端，命令生效。</p><p>我因为要安装vllm环境，需要C++ 17的版本，所以需要gcc11的环境，按照上述步骤升级的gcc11，效果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># $ yum install -y devtoolset-11-gcc*</span><br>$ gcc --version<br><br>gcc (GCC) 11.2.1 20220127 (Red Hat 11.2.1-9)<br>Copyright (C) 2021 Free Software Foundation, Inc.<br>This is free software; see the <span class="hljs-built_in">source</span> <span class="hljs-keyword">for</span> copying conditions.  There is NO<br>warranty; not even <span class="hljs-keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>问题解决</tag>
      
      <tag>centos</tag>
      
      <tag>gcc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7安装Python3.10提示no ssl错误解决</title>
    <link href="/2025/03/11/linux-centos7-install-py3-10-no-ssl-err/"/>
    <url>/2025/03/11/linux-centos7-install-py3-10-no-ssl-err/</url>
    
    <content type="html"><![CDATA[<p>在centos7系统默认安装的Python是2.7， 现在要升级到3.10.x。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>本着方便版本管理的原因，使用<a href="https://github.com/pyenv/pyenv">pyenv</a>的方式来安装python3.10.16版本。</p><p>然后遇到了所有程序员安装Python3.10必然会遇到的噩梦：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs log">Traceback (most recent call last):<br>  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;<br>  File &quot;/root/.pyenv/versions/3.10.16/lib/python3.10/ssl.py&quot;, line 99, in &lt;module&gt;<br>    import _ssl             # if we can&#x27;t import it, let the error propagate<br>ModuleNotFoundError: No module named &#x27;_ssl&#x27;<br>ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?<br><br>Please consult to the Wiki page to fix the problem.<br>https://github.com/pyenv/pyenv/wiki/Common-build-problems<br><br><br>BUILD FAILED (CentOS Linux 7 using python-build 20180424)<br></code></pre></td></tr></table></figure><p>也就是说，没有找到系统的ssl配置？</p><p>可是我的系统上安装了openssl呀！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ openssl version<br><br>OpenSSL 3.0.0 7 sep 2021 (Library: OpenSSL 3.0.0 7 sep 2021)<br></code></pre></td></tr></table></figure><p>经过搜索，确认Python3.10的安装依赖openssl 1.11版本，我的版本太高了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>执行如下命令解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装openssl 1.11</span><br>yum install -y openssl-devel openssl11-devel openssl11-lib xz-devel<br><span class="hljs-comment"># 安装Python</span><br>CPPFLAGS=<span class="hljs-string">&quot;-I/usr/include/openssl11&quot;</span> LDFLAGS=<span class="hljs-string">&quot;-L/usr/lib64/openssl11 -lssl -lcrypto &quot;</span> pyenv install -v 3.10.16<br></code></pre></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems#error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib">pyenv 官方常见问题解决参考</a></p>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>问题解决</tag>
      
      <tag>centos</tag>
      
      <tag>python</tag>
      
      <tag>pyenv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot可以把项目打包成app了，docker打包版</title>
    <link href="/2025/03/08/spring-spring-native-image-docker/"/>
    <url>/2025/03/08/spring-spring-native-image-docker/</url>
    
    <content type="html"><![CDATA[<p>上一篇文章介绍了如果通过graalVM 打包java本地应用，这里我们继续介绍如何通过docker打包java的原生镜像。</p><p>在操作之前，我们先思考一下问题：为什么要打包成docker容器呢？</p><p>就是为了云原生！</p><p>或者说，java的本地app打包功能的支持，一大原因就是为了适应云原生时代，所以支持容器也是必然的选择了。</p><p><img src="/../../images/tech/spring/spring_native_app_docker.png" alt="java原生app docker化后部署架构图"></p><p>下面开始展现代码实现。</p><h2 id="代码和依赖"><a href="#代码和依赖" class="headerlink" title="代码和依赖"></a>代码和依赖</h2><p>代码部分和本地环境配置方面，和上篇文章 <a href="https://www.hancher.top/2025/03/04/spring-spring-native-image-graalvm/">springboot可以把项目打包成app了，Graal打包版</a> 里的<code>graalvm-native-app</code>项目完全一致，就不多说了。</p><p>接下来是打包部分的差异。</p><p>要将项目打包成docker的原生应用镜像，需要先在操作系统上安装docker环境。</p><ul><li>linux: 参考<a href="https://docs.docker.com/engine/install/">官方文档</a>选择自己的发行版安装</li><li>mac&#x2F;windows: 个人开发这可以安装docker desktop应用，一键安装，很简单。</li></ul><p>docker 安装好 和 nik包（见上文）安装完成后，我们的环境就准备好了。</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>要想打包成docker 原生app镜像，需要依赖一个<code>paketobuildpacks/builder-jammy-java-tiny</code>镜像。</p><p>项目打包过程中也会自动下载，但是提前准备好会提升打包效率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull paketobuildpacks/builder-jammy-java-tiny:latest<br></code></pre></td></tr></table></figure><p>镜像pull成功后，就可以执行打包命令了，理论上，不用任何操作，一条命令即可将springboot项目打包成docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn -Pnative spring-boot:build-image<br></code></pre></td></tr></table></figure><p>此命令和下面的配置效果一样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>build-image<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>都是触发springboot构建插件里的构建docker镜像逻辑。</p><p>下面是部分构建过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><code class="hljs log">[INFO] --- spring-boot-maven-plugin:3.4.3:build-image (default-cli) @ graalvm-native-app ---<br>[INFO] Building image &#x27;docker.io/library/graalvm-native-app:0.0.1-SNAPSHOT&#x27;<br>[INFO] <br>[INFO]  &gt; Pulling builder image &#x27;docker.io/paketobuildpacks/builder-jammy-java-tiny:latest&#x27; 100%<br>[INFO]  &gt; Pulled builder image &#x27;paketobuildpacks/builder-jammy-java-tiny@sha256:c5c53c656d9151071482c79f2460aee477e25d05d83b5286549074707d1f76f1&#x27;<br>[INFO]  &gt; Pulling run image &#x27;docker.io/paketobuildpacks/run-jammy-tiny:latest&#x27; for platform &#x27;linux/arm64&#x27; 12%<br>[INFO]  &gt; Pulling run image &#x27;docker.io/paketobuildpacks/run-jammy-tiny:latest&#x27; for platform &#x27;linux/arm64&#x27; 32%<br>[INFO]  &gt; Pulling run image &#x27;docker.io/paketobuildpacks/run-jammy-tiny:latest&#x27; for platform &#x27;linux/arm64&#x27; 100%<br>[INFO]  &gt; Pulled run image &#x27;paketobuildpacks/run-jammy-tiny@sha256:0c5ac79d549c4b077a7d857631f817f8b573f5da2c109a51f320ee584d44d3f2&#x27;<br>[INFO]  &gt; Executing lifecycle version v0.20.6<br>[INFO]  &gt; Using build cache volume &#x27;pack-cache-064fa27f6606.build&#x27;<br>[INFO] <br>[INFO]  &gt; Running creator<br>[INFO]     [creator]     ===&gt; ANALYZING<br>[INFO]     [creator]     Image with name &quot;docker.io/library/graalvm-native-app:0.0.1-SNAPSHOT&quot; not found<br>[INFO]     [creator]     ===&gt; DETECTING<br>[INFO]     [creator]     target distro name/version labels not found, reading /etc/os-release file<br>[INFO]     [creator]     6 of 15 buildpacks participating<br>[INFO]     [creator]     paketo-buildpacks/ca-certificates   3.9.1<br>[INFO]     [creator]     paketo-buildpacks/bellsoft-liberica 11.0.5<br>[INFO]     [creator]     paketo-buildpacks/syft              2.8.0<br>[INFO]     [creator]     paketo-buildpacks/executable-jar    6.12.1<br>[INFO]     [creator]     paketo-buildpacks/spring-boot       5.32.1<br>[INFO]     [creator]     paketo-buildpacks/native-image      5.15.1<br>[INFO]     [creator]     ===&gt; RESTORING<br>[INFO]     [creator]     ===&gt; BUILDING<br>[INFO]     [creator]     target distro name/version labels not found, reading /etc/os-release file<br>[INFO]     [creator]     <br>[INFO]     [creator]     Paketo Buildpack for CA Certificates 3.9.1<br>[INFO]     [creator]       https://github.com/paketo-buildpacks/ca-certificates<br>[INFO]     [creator]       Build Configuration:<br>[INFO]     [creator]         $BP_EMBED_CERTS                    false  Embed certificates into the image<br>[INFO]     [creator]         $BP_ENABLE_RUNTIME_CERT_BINDING    true   Deprecated: Enable/disable certificate helper layer to add certs at runtime<br>[INFO]     [creator]         $BP_RUNTIME_CERT_BINDING_DISABLED  false  Disable certificate helper layer to add certs at runtime<br>[INFO]     [creator]       Launch Helper: Contributing to layer<br>[INFO]     [creator]         Creating /layers/paketo-buildpacks_ca-certificates/helper/exec.d/ca-certificates-helper<br>[INFO]     [creator]     <br>[INFO]     [creator]     Paketo Buildpack for BellSoft Liberica 11.0.5<br>[INFO]     [creator]       https://github.com/paketo-buildpacks/bellsoft-liberica<br>[INFO]     [creator]       Build Configuration:<br>[INFO]     [creator]         $BP_JVM_JLINK_ARGS           --no-man-pages --no-header-files --strip-debug --compress=1  configure custom link arguments (--output must be omitted)<br>[INFO]     [creator]         $BP_JVM_JLINK_ENABLED        false                                                        enables running jlink tool to generate custom JRE<br>[INFO]     [creator]         $BP_JVM_TYPE                 JRE                                                          the JVM type - JDK or JRE<br>[INFO]     [creator]         $BP_JVM_VERSION              21                                                           the Java version<br>[INFO]     [creator]       Launch Configuration:<br>[INFO]     [creator]         $BPL_DEBUG_ENABLED           false                                                        enables Java remote debugging support<br>[INFO]     [creator]         $BPL_DEBUG_PORT              8000                                                         configure the remote debugging port<br>[INFO]     [creator]         $BPL_DEBUG_SUSPEND           false                                                        configure whether to suspend execution until a debugger has attached<br>[INFO]     [creator]         $BPL_HEAP_DUMP_PATH                                                                       write heap dumps on error to this path<br>[INFO]     [creator]         $BPL_JAVA_NMT_ENABLED        true                                                         enables Java Native Memory Tracking (NMT)<br>[INFO]     [creator]         $BPL_JAVA_NMT_LEVEL          summary                                                      configure level of NMT, summary or detail<br>[INFO]     [creator]         $BPL_JFR_ARGS                                                                             configure custom Java Flight Recording (JFR) arguments<br>[INFO]     [creator]         $BPL_JFR_ENABLED             false                                                        enables Java Flight Recording (JFR)<br>[INFO]     [creator]         $BPL_JMX_ENABLED             false                                                        enables Java Management Extensions (JMX)<br>[INFO]     [creator]         $BPL_JMX_PORT                5000                                                         configure the JMX port<br>[INFO]     [creator]         $BPL_JVM_HEAD_ROOM           0                                                            the headroom in memory calculation<br>[INFO]     [creator]         $BPL_JVM_LOADED_CLASS_COUNT  35% of classes                                               the number of loaded classes in memory calculation<br>[INFO]     [creator]         $BPL_JVM_THREAD_COUNT        250                                                          the number of threads in memory calculation<br>[INFO]     [creator]         $JAVA_TOOL_OPTIONS                                                                        the JVM launch flags<br>[INFO]     [creator]         Using Java version 17 extracted from MANIFEST.MF<br>[INFO]     [creator]       BellSoft Liberica NIK 17.0.14: Contributing to layer<br>[INFO]     [creator]         Downloading from https://github.com/bell-sw/LibericaNIK/releases/download/23.0.7+1-17.0.14+10/bellsoft-liberica-vm-core-openjdk17.0.14+10-23.0.7+1-linux-aarch64.tar.gz<br>[INFO]     [creator]         Verifying checksum<br>[INFO]     [creator]         Expanding to /layers/paketo-buildpacks_bellsoft-liberica/native-image-svm<br>[INFO]     [creator]         Adding 146 container CA certificates to JVM truststore<br>[INFO]     [creator]         Writing env.build/JAVA_HOME.override<br>[INFO]     [creator]         Writing env.build/JDK_HOME.override<br>[INFO]     [creator]     <br>[INFO]     [creator]     Paketo Buildpack for Syft 2.8.0<br>[INFO]     [creator]       https://github.com/paketo-buildpacks/syft<br>[INFO]     [creator]         Downloading from https://github.com/anchore/syft/releases/download/v1.20.0/syft_1.20.0_linux_arm64.tar.gz<br>[INFO]     [creator]         Verifying checksum<br>[INFO]     [creator]         Writing env.build/SYFT_CHECK_FOR_APP_UPDATE.default<br>[INFO]     [creator]     <br>[INFO]     [creator]     Paketo Buildpack for Executable JAR 6.12.1<br>[INFO]     [creator]       https://github.com/paketo-buildpacks/executable-jar<br>[INFO]     [creator]       Class Path: Contributing to layer<br>[INFO]     [creator]         Writing env/CLASSPATH.delim<br>[INFO]     [creator]         Writing env/CLASSPATH.prepend<br>[INFO]     [creator]       Process types:<br>[INFO]     [creator]         executable-jar: java org.springframework.boot.loader.launch.JarLauncher (direct)<br>[INFO]     [creator]         task:           java org.springframework.boot.loader.launch.JarLauncher (direct)<br>[INFO]     [creator]         web:            java org.springframework.boot.loader.launch.JarLauncher (direct)<br>[INFO]     [creator]     <br>[INFO]     [creator]     Paketo Buildpack for Spring Boot 5.32.1<br>[INFO]     [creator]       https://github.com/paketo-buildpacks/spring-boot<br>[INFO]     [creator]       Build Configuration:<br>[INFO]     [creator]         $BPL_JVM_CDS_ENABLED                 false  whether to enable CDS optimizations at runtime<br>[INFO]     [creator]         $BPL_SPRING_AOT_ENABLED              false  whether to enable Spring AOT at runtime<br>[INFO]     [creator]         $BP_JVM_CDS_ENABLED                  false  whether to enable CDS &amp; perform JVM training run<br>[INFO]     [creator]         $BP_SPRING_AOT_ENABLED               false  whether to enable Spring AOT<br>[INFO]     [creator]         $BP_SPRING_CLOUD_BINDINGS_DISABLED   false  whether to contribute Spring Boot cloud bindings support<br>[INFO]     [creator]         $BP_SPRING_CLOUD_BINDINGS_VERSION    1      default version of Spring Cloud Bindings library to contribute<br>[INFO]     [creator]       Launch Configuration:<br>[INFO]     [creator]         $BPL_SPRING_CLOUD_BINDINGS_DISABLED  false  whether to auto-configure Spring Boot environment properties from bindings<br>[INFO]     [creator]         $BPL_SPRING_CLOUD_BINDINGS_ENABLED   true   Deprecated - whether to auto-configure Spring Boot environment properties from bindings<br>[INFO]     [creator]       Class Path: Contributing to layer<br>[INFO]     [creator]         Writing env.build/CLASSPATH.append<br>[INFO]     [creator]         Writing env.build/CLASSPATH.delim<br>[INFO]     [creator]       Image labels:<br>[INFO]     [creator]         org.opencontainers.image.title<br>[INFO]     [creator]         org.opencontainers.image.version<br>[INFO]     [creator]         org.springframework.boot.version<br>[INFO]     [creator]     <br>[INFO]     [creator]     Paketo Buildpack for Native Image 5.15.1<br>[INFO]     [creator]       https://github.com/paketo-buildpacks/native-image<br>[INFO]     [creator]       Build Configuration:<br>[INFO]     [creator]         $BP_BINARY_COMPRESSION_METHOD          Compression mechanism used to reduce binary size. Options: `none` (default), `upx` or `gzexe`<br>[INFO]     [creator]         $BP_NATIVE_IMAGE                       enable native image build<br>[INFO]     [creator]         $BP_NATIVE_IMAGE_BUILD_ARGUMENTS       arguments to pass to the native-image command<br>[INFO]     [creator]         $BP_NATIVE_IMAGE_BUILD_ARGUMENTS_FILE  a file with arguments to pass to the native-image command<br>[INFO]     [creator]         $BP_NATIVE_IMAGE_BUILT_ARTIFACT        the built application artifact explicitly, required if building from a JAR<br>[INFO]     [creator]       Native Image: Contributing to layer<br>[INFO]     [creator]         Executing native-image --no-fallback -H:+StaticExecutableWithDynamicLibC -H:Name=/layers/paketo-buildpacks_native-image/native-image/com.hancher.springboot3.graalvmnativeapp.GraalvmNativeAppApplication -cp /workspace:/workspace/BOOT-INF/classes:/workspace/BOOT-INF/lib/spring-boot-3.4.3.jar:/workspace/BOOT-INF/lib/spring-boot-autoconfigure-3.4.3.jar:/workspace/BOOT-INF/lib/logback-classic-1.5.16.jar:/workspace/BOOT-INF/lib/logback-core-1.5.16.jar:/workspace/BOOT-INF/lib/log4j-to-slf4j-2.24.3.jar:/workspace/BOOT-INF/lib/log4j-api-2.24.3.jar:/workspace/BOOT-INF/lib/jul-to-slf4j-2.0.16.jar:/workspace/BOOT-INF/lib/jakarta.annotation-api-2.1.1.jar:/workspace/BOOT-INF/lib/snakeyaml-2.3.jar:/workspace/BOOT-INF/lib/jackson-databind-2.18.2.jar:/workspace/BOOT-INF/lib/jackson-annotations-2.18.2.jar:/workspace/BOOT-INF/lib/jackson-core-2.18.2.jar:/workspace/BOOT-INF/lib/jackson-datatype-jdk8-2.18.2.jar:/workspace/BOOT-INF/lib/jackson-datatype-jsr310-2.18.2.jar:/workspace/BOOT-INF/lib/jackson-module-parameter-names-2.18.2.jar:/workspace/BOOT-INF/lib/tomcat-embed-core-10.1.36.jar:/workspace/BOOT-INF/lib/tomcat-embed-el-10.1.36.jar:/workspace/BOOT-INF/lib/tomcat-embed-websocket-10.1.36.jar:/workspace/BOOT-INF/lib/spring-web-6.2.3.jar:/workspace/BOOT-INF/lib/spring-beans-6.2.3.jar:/workspace/BOOT-INF/lib/micrometer-observation-1.14.4.jar:/workspace/BOOT-INF/lib/micrometer-commons-1.14.4.jar:/workspace/BOOT-INF/lib/spring-webmvc-6.2.3.jar:/workspace/BOOT-INF/lib/spring-aop-6.2.3.jar:/workspace/BOOT-INF/lib/spring-context-6.2.3.jar:/workspace/BOOT-INF/lib/spring-expression-6.2.3.jar:/workspace/BOOT-INF/lib/slf4j-api-2.0.16.jar:/workspace/BOOT-INF/lib/spring-core-6.2.3.jar:/workspace/BOOT-INF/lib/spring-jcl-6.2.3.jar:/workspace/BOOT-INF/lib/spring-boot-jarmode-tools-3.4.3.jar com.hancher.springboot3.graalvmnativeapp.GraalvmNativeAppApplication<br>[INFO]     [creator]     ================================================================================<br>[INFO]     [creator]     GraalVM Native Image: Generating &#x27;com.hancher.springboot3.graalvmnativeapp.GraalvmNativeAppApplication&#x27; (static executable)...<br>[INFO]     [creator]     ================================================================================<br>[INFO]     [creator]     For detailed information and explanations on the build output, visit:<br>[INFO]     [creator]     https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/BuildOutput.md<br>[INFO]     [creator]     --------------------------------------------------------------------------------<br>[INFO]     [creator]     Warning: Method ch.qos.logback.core.FileAppender.valueOf(String) not found.<br>[INFO]     [creator]     Warning: Method ch.qos.logback.core.Layout.valueOf(String) not found.<br>[INFO]     [creator]     Warning: Method ch.qos.logback.core.rolling.RollingPolicy.valueOf(String) not found.<br>[INFO]     [creator]     Warning: Method ch.qos.logback.core.rolling.TriggeringPolicy.valueOf(String) not found.<br>[INFO]     [creator]     Warning: Method ch.qos.logback.core.spi.ContextAware.valueOf(String) not found.<br>[INFO]     [creator]     Warning: Could not resolve class jakarta.inject.Inject for reflection configuration. Reason: java.lang.ClassNotFoundException: jakarta.inject.Inject.<br>[INFO]     [creator]     Warning: Could not resolve class jakarta.inject.Provider for reflection configuration. Reason: java.lang.ClassNotFoundException: jakarta.inject.Provider.<br>[INFO]     [creator]     Warning: Could not resolve class jakarta.inject.Qualifier for reflection configuration. Reason: java.lang.ClassNotFoundException: jakarta.inject.Qualifier.<br>[INFO]     [creator]     Warning: Could not resolve class javax.inject.Inject for reflection configuration. Reason: java.lang.ClassNotFoundException: javax.inject.Inject.<br>[INFO]     [creator]     Warning: Could not resolve class javax.inject.Qualifier for reflection configuration. Reason: java.lang.ClassNotFoundException: javax.inject.Qualifier.<br>[INFO]     [creator]     Warning: Could not resolve class javax.money.MonetaryAmount for reflection configuration. Reason: java.lang.ClassNotFoundException: javax.money.MonetaryAmount.<br>[INFO]     [creator]     Warning: Could not resolve class kotlin.Metadata for reflection configuration. Reason: java.lang.ClassNotFoundException: kotlin.Metadata.<br>[INFO]     [creator]     Warning: Could not resolve class kotlin.reflect.full.KClasses for reflection configuration. Reason: java.lang.ClassNotFoundException: kotlin.reflect.full.KClasses.<br>[INFO]     [creator]     Warning: Could not resolve class org.eclipse.core.runtime.FileLocator for reflection configuration. Reason: java.lang.ClassNotFoundException: org.eclipse.core.runtime.FileLocator.<br>[INFO]     [creator]     Warning: Could not resolve class org.reactivestreams.Publisher for reflection configuration. Reason: java.lang.ClassNotFoundException: org.reactivestreams.Publisher.<br>[INFO]     [creator]     [1/8] Initializing...                                            (5.0s @ 0.12GB)<br>[INFO]     [creator]      Java version: 17.0.14+10-LTS, vendor version: Liberica-NIK-23.0.7-1<br>[INFO]     [creator]      Graal compiler: optimization level: 2, target machine: armv8-a<br>[INFO]     [creator]      C compiler: gcc (linux, aarch64, 11.4.0)<br>[INFO]     [creator]      Garbage collector: Serial GC (max heap size: 80% of RAM)<br>[INFO]     [creator]      1 user-specific feature(s)<br>[INFO]     [creator]      - org.springframework.aot.nativex.feature.PreComputeFieldFeature<br>[INFO]     [creator]     SLF4J(W): No SLF4J providers were found.<br>[INFO]     [creator]     SLF4J(W): Defaulting to no-operation (NOP) logger implementation<br>[INFO]     [creator]     SLF4J(W): See https://www.slf4j.org/codes.html#noProviders for further details.<br>[INFO]     [creator]     [2/8] Performing analysis...  [*******]                         (69.2s @ 1.53GB)<br>[INFO]     [creator]       16,540 (90.76%) of 18,224 types reachable<br>[INFO]     [creator]       27,186 (67.63%) of 40,196 fields reachable<br>[INFO]     [creator]       79,799 (63.18%) of 126,298 methods reachable<br>[INFO]     [creator]        5,144 types,   355 fields, and 5,950 methods registered for reflection<br>[INFO]     [creator]           64 types,    72 fields, and    55 methods registered for JNI access<br>[INFO]     [creator]            4 native libraries: dl, pthread, rt, z<br>[INFO]     [creator]     [3/8] Building universe...                                       (6.4s @ 1.98GB)<br>[INFO]     [creator]     [4/8] Parsing methods...      [***]                              (7.4s @ 1.32GB)<br>[INFO]     [creator]     [5/8] Inlining methods...     [***]                              (2.6s @ 1.02GB)<br>[INFO]     [creator]     [6/8] Compiling methods...    [*******]                         (50.6s @ 1.30GB)<br>[INFO]     [creator]     [7/8] Layouting methods...    [***]                              (5.8s @ 1.92GB)<br>[INFO]     [creator]     [8/8] Creating image...       [***]                              (6.5s @ 2.08GB)<br>[INFO]     [creator]       36.96MB (49.04%) for code area:    51,972 compilation units<br>[INFO]     [creator]       35.49MB (47.09%) for image heap:  387,870 objects and 253 resources<br>[INFO]     [creator]        2.92MB ( 3.88%) for other data<br>[INFO]     [creator]       75.38MB in total<br>[INFO]     [creator]     --------------------------------------------------------------------------------<br>[INFO]     [creator]     Top 10 origins of code area:            Top 10 object types in image heap:<br>[INFO]     [creator]       12.67MB java.base                        8.53MB byte[] for code metadata<br>[INFO]     [creator]        4.24MB tomcat-embed-core-10.1.36.jar    3.95MB java.lang.Class<br>[INFO]     [creator]        3.38MB java.xml                         3.68MB java.lang.String<br>[INFO]     [creator]        2.00MB jackson-databind-2.18.2.jar      3.30MB byte[] for java.lang.String<br>[INFO]     [creator]        1.58MB spring-core-6.2.3.jar            3.23MB byte[] for general heap data<br>[INFO]     [creator]        1.55MB spring-boot-3.4.3.jar            2.11MB byte[] for embedded resources<br>[INFO]     [creator]        1.33MB svm.jar (Native Image)           1.39MB c.o.s.c.h.DynamicHubCompanion<br>[INFO]     [creator]      983.63kB spring-web-6.2.3.jar             1.01MB byte[] for reflection metadata<br>[INFO]     [creator]      910.71kB spring-beans-6.2.3.jar         740.64kB java.lang.String[]<br>[INFO]     [creator]      876.46kB spring-webmvc-6.2.3.jar        597.34kB c.o.s.c.h.DynamicHu~onMetadata<br>[INFO]     [creator]        7.22MB for 69 more packages             6.20MB for 3523 more object types<br>[INFO]     [creator]     --------------------------------------------------------------------------------<br>[INFO]     [creator]     Recommendations:<br>[INFO]     [creator]      HEAP: Set max heap for improved and more predictable memory usage.<br>[INFO]     [creator]      CPU:  Enable more CPU features with &#x27;-march=native&#x27; for improved performance.<br>[INFO]     [creator]     --------------------------------------------------------------------------------<br>[INFO]     [creator]        27.4s (17.7% of total time) in 132 GCs | Peak RSS: 3.50GB | CPU load: 2.69<br>[INFO]     [creator]     --------------------------------------------------------------------------------<br>[INFO]     [creator]     Produced artifacts:<br>[INFO]     [creator]      /layers/paketo-buildpacks_native-image/native-image/com.hancher.springboot3.graalvmnativeapp.GraalvmNativeAppApplication (executable)<br>[INFO]     [creator]     ================================================================================<br>[INFO]     [creator]     Finished generating &#x27;com.hancher.springboot3.graalvmnativeapp.GraalvmNativeAppApplication&#x27; in 2m 34s.<br>[INFO]     [creator]       Removing bytecode<br>[INFO]     [creator]       Process types:<br>[INFO]     [creator]         native-image: ./com.hancher.springboot3.graalvmnativeapp.GraalvmNativeAppApplication (direct)<br>[INFO]     [creator]         task:         ./com.hancher.springboot3.graalvmnativeapp.GraalvmNativeAppApplication (direct)<br>[INFO]     [creator]         web:          ./com.hancher.springboot3.graalvmnativeapp.GraalvmNativeAppApplication (direct)<br>[INFO]     [creator]     ===&gt; EXPORTING<br>[INFO]     [creator]     Adding layer &#x27;paketo-buildpacks/ca-certificates:helper&#x27;<br>[INFO]     [creator]     Adding layer &#x27;paketo-buildpacks/executable-jar:classpath&#x27;<br>[INFO]     [creator]     Adding layer &#x27;buildpacksio/lifecycle:launch.sbom&#x27;<br>[INFO]     [creator]     Added 1/1 app layer(s)<br>[INFO]     [creator]     Adding layer &#x27;buildpacksio/lifecycle:launcher&#x27;<br>[INFO]     [creator]     Adding layer &#x27;buildpacksio/lifecycle:config&#x27;<br>[INFO]     [creator]     Adding layer &#x27;buildpacksio/lifecycle:process-types&#x27;<br>[INFO]     [creator]     Adding label &#x27;io.buildpacks.lifecycle.metadata&#x27;<br>[INFO]     [creator]     Adding label &#x27;io.buildpacks.build.metadata&#x27;<br>[INFO]     [creator]     Adding label &#x27;io.buildpacks.project.metadata&#x27;<br>[INFO]     [creator]     Adding label &#x27;org.opencontainers.image.title&#x27;<br>[INFO]     [creator]     Adding label &#x27;org.opencontainers.image.version&#x27;<br>[INFO]     [creator]     Adding label &#x27;org.springframework.boot.version&#x27;<br>[INFO]     [creator]     Setting default process type &#x27;web&#x27;<br>[INFO]     [creator]     Saving docker.io/library/graalvm-native-app:0.0.1-SNAPSHOT...<br>[INFO]     [creator]     *** Images (ede8e2b9d153):<br>[INFO]     [creator]           docker.io/library/graalvm-native-app:0.0.1-SNAPSHOT<br>[INFO]     [creator]     Adding cache layer &#x27;paketo-buildpacks/bellsoft-liberica:native-image-svm&#x27;<br>[INFO]     [creator]     Adding cache layer &#x27;paketo-buildpacks/syft:syft&#x27;<br>[INFO]     [creator]     Adding cache layer &#x27;paketo-buildpacks/native-image:native-image&#x27;<br>[INFO]     [creator]     Adding cache layer &#x27;buildpacksio/lifecycle:cache.sbom&#x27;<br>[INFO] <br>[INFO] Successfully built image &#x27;docker.io/library/graalvm-native-app:0.0.1-SNAPSHOT&#x27;<br>[INFO] <br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time:  06:41 min<br>[INFO] Finished at: 2025-03-08T00:22:42+08:00<br>[INFO] ------------------------------------------------------------------------<br><br></code></pre></td></tr></table></figure><p>同打包java本地应用一样，打包docker 镜像也会比较慢，慢慢等待。</p><p>这里的打包慢，也是为了以后的app在启动和运行时速度快。</p><p>打包成功后，我们就可以在docker镜像里看到我们自己的应用镜像了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><p>运行docker </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> -p 8080:8080 docker.io/library/graalvm-native-app:0.0.1-SNAPSHOT<br></code></pre></td></tr></table></figure><ul><li>–rm 容器结束后会自动删除</li></ul><p>容器在0.08秒就启动起来了，是不是很快。</p><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ curl localhost:8080/hancher<br><br>Hello hancher<br></code></pre></td></tr></table></figure><h2 id="build-image-VS-build-image-no-fork"><a href="#build-image-VS-build-image-no-fork" class="headerlink" title="build-image VS build-image-no-fork"></a>build-image VS build-image-no-fork</h2><p>springboot 在打包docker镜像的时候，有<code>build-image</code> 和 <code>build-image-no-fork</code>两种模式，有什么区别呢？</p><h3 id="build-image"><a href="#build-image" class="headerlink" title="build-image"></a>build-image</h3><p>这是 Spring Boot Maven 插件的默认目标，用于构建基于 Cloud Native Buildpacks 的 Docker 镜像</p><p>先调用 Paketo Buildpacks（默认构建工具）来分析项目、编译代码并生成镜像。<br>然后 打包 JAR 文件，再基于 JAR 生成镜像。</p><ul><li><p>执行过程：</p><ul><li>在独立的 Maven 进程（forked process）中运行。</li><li>会启动一个新的 JVM 实例来执行构建任务，与当前的 Maven 构建进程分离。</li></ul></li><li><p>优点</p><ul><li>隔离性好，构建镜像的过程不会干扰主 Maven 进程。</li><li>适合标准构建流程，尤其是 CI&#x2F;CD 环境。</li></ul></li><li><p>缺点</p><ul><li>启动新进程会增加少量开销</li></ul></li></ul><h3 id="build-image-no-fork"><a href="#build-image-no-fork" class="headerlink" title="build-image-no-fork"></a>build-image-no-fork</h3><p>在当前 Maven 进程中构建 Docker 镜像，而不启动新的子进程，这样虽然会与其他操作冲突，但会更快，适合本地开发时使用（没有并发）。</p><ul><li><p>执行过程：</p><ul><li>在当前 JVM 实例内直接执行镜像构建任务，不进行 fork</li></ul></li><li><p>优点</p><ul><li>减少进程创建的开销，构建速度可能略快（尤其在小型项目中）</li><li>更适合调试或本地开发，因为它与当前 Maven 上下文紧密耦合。</li></ul></li><li><p>缺点</p><ul><li>如果构建过程中出现问题（例如内存不足、异常），可能会影响整个 Maven 构建流程</li><li>因为没有进程隔离的原因，可能导致资源竞争或配置冲突</li></ul></li></ul><p>主要区别</p><table><thead><tr><th>特性</th><th><code>build-image</code></th><th><code>build-image-no-fork</code></th></tr></thead><tbody><tr><td><strong>执行进程</strong></td><td>新建独立进程（forked）</td><td>当前进程（no fork）</td></tr><tr><td><strong>隔离性</strong></td><td>高，独立于主 Maven 进程</td><td>低，与主 Maven 进程共享环境</td></tr><tr><td><strong>性能开销</strong></td><td>略高（启动新 JVM）</td><td>略低（无需新进程）</td></tr><tr><td><strong>适用场景</strong></td><td>CI&#x2F;CD、标准构建</td><td>本地调试、小型项目</td></tr><tr><td><strong>稳定性</strong></td><td>更稳定（隔离问题）</td><td>可能受主进程影响</td></tr></tbody></table><p>你学废了吗？</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.spring.io/spring-boot/how-to/native-image/developing-your-first-application.html#howto.native-image.developing-your-first-application.native-build-tools">使用GraalVM打包系统可执行程序</a></p><p><a href="https://github.com/Hanchers/springboot3-demo/tree/main/graalvm-native-app">github demo</a></p><p><a href="https://docs.spring.io/spring-boot/maven-plugin/build-image.html">springboot打包docker镜像配置</a></p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>spring</tag>
      
      <tag>springboot3.x</tag>
      
      <tag>native-image</tag>
      
      <tag>GraalVM</tag>
      
      <tag>native-application</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot可以把项目打包成app了，Graal打包版</title>
    <link href="/2025/03/04/spring-spring-native-image-graalvm/"/>
    <url>/2025/03/04/spring-spring-native-image-graalvm/</url>
    
    <content type="html"><![CDATA[<p>我们都知道，在java的世界，有一个神奇的存在，那就是虚拟机（jvm）。</p><p>因为虚拟机的存在，java实现了最早的“一处编译，处处执行”的设计思想，成功在早期的各大语言的竞争中脱颖而出，并在各种后起之秀的冲击下，长期保持最受欢迎的编程语言的头部区域。</p><p>实在是太方便了，只要有虚拟机的存在，我们在编程的时候就不用考虑各种运行系统的复杂性与差异，这些由各种系统的虚拟机开发专家们替我们解决了，而我们仅需要关注编码就行了。</p><p>但进入了21时间，云原生的兴起，java的最大的优势虚拟机，也渐渐阻碍了其在云上开疆扩土的阻力。</p><p>“内存占用高”、“STW” 、 “启动速度慢”等一些虚拟机的固有特性，导致java在go等这些为云而设计的语言面前尽显颓势。</p><p>所以，java能不能跳过虚拟机，直接把程序编译打包成可以直接在目标系统上运行的呢？</p><p>说实话，刚开始学习java的时候，我就有这个疑问，为了把java的可执行程序（jar）打包成可以在windows上运行的exe程序，当时还搞过很多偏门的的办法。</p><p>现在，随着GraalVM的成熟，springboot的也提出了直接将java程序直接打包成系统可执行程序（本地应用）的技术方案。</p><p><img src="/../../images/tech/spring/spring_native_app_graalvm.png" alt="java本地app部署架构"></p><p>今天我们就来验证一下！</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>先写一套<code>hello world</code>的springboot程序，使用maven或gradle打包。</p><p>这里和我们正常的项目开发流程完成一致，没有任何不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GraalvmNativeAppApplication</span> &#123;<br><br><span class="hljs-meta">@RequestMapping(&quot;/&#123;name&#125;&quot;)</span><br>String <span class="hljs-title function_">home</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>System.out.println(x);<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(GraalvmNativeAppApplication.class, args);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这是这个项目的业务代码，没有其他的了。</p><h3 id="配置GraalVM"><a href="#配置GraalVM" class="headerlink" title="配置GraalVM"></a>配置GraalVM</h3><p>在<code>pom.xml</code>里配置GraalVM 本地应用打包插件,这是我们的springboot程序能够打包成本地应用的核心入口，一定要有。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.graalvm.buildtools<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>native-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其他的，项目里就不需要了。</p><p>也可以通过<a href="https://start.spring.io/">start.spring.io</a>来构建项目，spring会把一切配置好,记得看构架好后的<code>HELP.MD</code>文件呦。<br><img src="/../../images/tech/spring/start-springboot-graalvm.png" alt="springboot初始化时配置graalvm"></p><h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><p>接下来就是要配置一下系统环境了。</p><p>要将项目打包成系统原生运行应用，需要在我们的系统里安装一套本地镜像支持库(<a href="https://bell-sw.com/pages/downloads/native-image-kit/#nik-23-(jdk-17)">Liberica Native Image Kit page</a>),这个nik库实现了将java字节码编译成操作系统二进制执行码这一过程。</p><p>安装nik包可以手动安装，也可以使用<a href="https://sdkman.io/install">sdk</a>版本控制工具来安装, 这个比较简单，我使用的是这种方式（我使用的是mac电脑）。</p><p>使用sdk安装java nik 的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sdk install 23.0.7.r17-nik<br></code></pre></td></tr></table></figure><p>安装完成后，系统就自动将当前的jdk切换成刚下载的这个jdk了。</p><p>可以在<a href="https://sdkman.io/jdks/nik">官方配置</a>这里查看安装对应jdk的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">% java --version<br><br>openjdk 17.0.14 2025-01-21 LTS<br>OpenJDK Runtime Environment Liberica-NIK-23.0.7-1 (build 17.0.14+10-LTS)<br>OpenJDK 64-Bit Server VM Liberica-NIK-23.0.7-1 (build 17.0.14+10-LTS, mixed mode, sharing)<br></code></pre></td></tr></table></figure><p>出现这个信息，我们就可以打包了。</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn -Pnative native:compile<br></code></pre></td></tr></table></figure><p>这个命令会触发<code>native-maven-plugin</code>maven插件，执行本地打包app。</p><p>这个过程会很慢，而且会很耗cpu，我的电脑cpu基本都跑满了，现在终于理解，那些c程序员们在编译项目时会去抽烟了，确实这段时间啥也干不了。</p><p>执行过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs log">...<br>[1/8] Initializing...                                                                                    (3.9s @ 0.14GB)<br> Java version: 17.0.14+10-LTS, vendor version: Liberica-NIK-23.0.7-1<br> Graal compiler: optimization level: 2, target machine: armv8-a<br> C compiler: cc (apple, arm64, 15.0.0)<br> Garbage collector: Serial GC (max heap size: 80% of RAM)<br> 1 user-specific feature(s)<br> - org.springframework.aot.nativex.feature.PreComputeFieldFeature<br>SLF4J(W): No SLF4J providers were found.<br>SLF4J(W): Defaulting to no-operation (NOP) logger implementation<br>SLF4J(W): See https://www.slf4j.org/codes.html#noProviders for further details.<br>[2/8] Performing analysis...  [******]                                                                  (35.5s @ 1.50GB)<br>  16,529 (90.73%) of 18,218 types reachable<br>  27,176 (67.68%) of 40,151 fields reachable<br>  79,715 (63.21%) of 126,116 methods reachable<br>   5,144 types,   357 fields, and 5,957 methods registered for reflection<br>      64 types,    72 fields, and    55 methods registered for JNI access<br>       5 native libraries: -framework CoreServices, -framework Foundation, dl, pthread, z<br>[3/8] Building universe...                                                                               (3.9s @ 1.59GB)<br>[4/8] Parsing methods...      [**]                                                                       (2.7s @ 1.79GB)<br>[5/8] Inlining methods...     [****]                                                                     (1.6s @ 1.95GB)<br>[6/8] Compiling methods...    [*****]                                                                   (23.4s @ 1.61GB)<br>[7/8] Layouting methods...    [**]                                                                       (4.5s @ 1.70GB)<br>[8/8] Creating image...       [***]                                                                      (7.9s @ 1.29GB)<br>  36.95MB (50.32%) for code area:    51,915 compilation units<br>  35.50MB (48.34%) for image heap:  386,138 objects and 253 resources<br>1006.98kB ( 1.34%) for other data<br>  73.44MB in total<br>------------------------------------------------------------------------------------------------------------------------<br>Top 10 origins of code area:                                Top 10 object types in image heap:<br>  12.68MB java.base                                            8.53MB byte[] for code metadata<br>   4.24MB tomcat-embed-core-10.1.36.jar                        3.95MB java.lang.Class<br>   3.38MB java.xml                                             3.68MB java.lang.String<br>   2.00MB jackson-databind-2.18.2.jar                          3.30MB byte[] for java.lang.String<br>   1.58MB spring-core-6.2.3.jar                                3.23MB byte[] for general heap data<br>   1.54MB spring-boot-3.4.3.jar                                2.11MB byte[] for embedded resources<br>   1.29MB svm.jar (Native Image)                               1.39MB com.oracle.svm.core.hub.DynamicHubCompanion<br> 983.58kB spring-web-6.2.3.jar                                 1.01MB byte[] for reflection metadata<br> 910.85kB spring-beans-6.2.3.jar                             741.69kB java.lang.String[]<br> 876.34kB spring-webmvc-6.2.3.jar                            597.07kB c.o.svm.core.hub.DynamicHub$ReflectionMetadata<br>   7.23MB for 69 more packages                                 6.15MB for 3522 more object types<br>------------------------------------------------------------------------------------------------------------------------<br>Recommendations:<br> HEAP: Set max heap for improved and more predictable memory usage.<br> CPU:  Enable more CPU features with &#x27;-march=native&#x27; for improved performance.<br>------------------------------------------------------------------------------------------------------------------------<br>                       10.3s (12.1% of total time) in 171 GCs | Peak RSS: 2.64GB | CPU load: 5.10<br>------------------------------------------------------------------------------------------------------------------------<br>Produced artifacts:<br> ../springboot3-demo/graalvm-native-app/target/graalvm-native-app (executable)<br>========================================================================================================================<br>Finished generating &#x27;graalvm-native-app&#x27; in 1m 24s.<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time:  01:38 min<br>[INFO] Finished at: 2025-03-03T16:41:31+08:00<br>[INFO] ------------------------------------------------------------------------<br><br></code></pre></td></tr></table></figure><p>运行app</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./graalvm-native-app<br></code></pre></td></tr></table></figure><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ curl localhost:8080/hancher<br><br>Hello hancher<br></code></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>先说优点</p><ul><li>去掉了jvm这一层，部署更加简单方便了</li><li>通过app这种形式，原生级别支持了windows、mac、linux等主流操作系统</li><li>启动更快，因为代码都编译成系统直接运行的二进制文件，不需要jvm的解析<ul><li>上面的helloWorld，使用jar启动，耗时0.9s，使用app启动，耗时0.18秒，将近5倍的差距。</li></ul></li><li>运行时占用内存更低，据统计，能减少50%左右</li></ul><p>再说缺点</p><ul><li>打包很慢,会占用很高的内存和cpu</li><li>对于反射等动态特性支持的不好，比如<code>Class.forName()</code>, 所以仅适用于一些简易项目，重量级项目现阶段还不太支持</li><li>一个系统仅能打包本系统的app，不像go那样，一个系统能打包所有平台的app。</li><li>包体积比原生的jar大了不少<ul><li>上面的helloWorld，jar大小空间20M，app大小73M， 大了3倍</li><li>但如果算上jdk， 我统计了我安装后的jdk17大小300M，再加上jar， 使用jar的总体空间比app大了近5倍</li></ul></li></ul><p>总得来说，java在编译成本地app这一块，还有很大的空间，但已经完成了从0到1的进步，更适合云原生了，剩下的就是不断的优化了。</p><p>适用的场景：</p><ul><li>新项目，轻量级项目。老项目不太建议使用这个特性，因为动态特性的限制，可能会有一些功能验证不到</li><li>类似云原生的Serverless架构，逻辑简单，更强调启动速度与内存占比的服务</li><li>容器化部署的微服务等（native app 有容器版，下篇文章介绍）</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.spring.io/spring-boot/how-to/native-image/developing-your-first-application.html#howto.native-image.developing-your-first-application.native-build-tools">使用GraalVM打包系统可执行程序</a></p><p><a href="https://github.com/Hanchers/springboot3-demo/tree/main/graalvm-native-app">github demo</a></p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot3.x</tag>
      
      <tag>native-image</tag>
      
      <tag>GraalVM</tag>
      
      <tag>native-application</tag>
      
      <tag>spring6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过优化robot的方式，加速谷歌收录我们的网站</title>
    <link href="/2025/02/25/site-google-optimize-robot/"/>
    <url>/2025/02/25/site-google-optimize-robot/</url>
    
    <content type="html"><![CDATA[<p>前段时间不是讲这个博客网站录入到google的google search console 站点了吗， 现在通过<code>site:www.hancher.top</code>确实能看到我的网站了。</p><p>但是，我发现，我的新内容，google收录的很慢，即使增加了主动提交url的功能，也还是很慢。</p><h2 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h2><p>然后我在查看google站点后台的时候，发现我们是能看到google的爬虫爬取我们网站的记录的。</p><p>位置：设置 -&gt; 抓取统计信息(打开报告) -&gt; 按响应统计 -&gt; 成功(200) ， 然后就能看到爬虫爬取我们网站的记录了。</p><p>结果我发现，谷歌爬取我们网站，每天只有一定的次数（3-20次左右），而其中大部分次数都被js,css,图片等内容占用了，导致我们新内容，google爬取不到。</p><p><img src="/../../images/site/seo/google_url_crawl.png" alt="谷歌每天的爬取链接情况"></p><p>仔细分析就能发现，除了2月21日的那一天爬到了我的文章外，其他的爬取的都是js,css,图片等无效内容，严重干扰了谷歌对我们文章的收录。</p><p>所以，我们要通过<code>robots.txt</code>的方式，告诉google，哪些内容能爬，哪些内容不爬，来提升google对我们文章的收录效率。</p><blockquote><p>robots.txt 文件规定了搜索引擎抓取工具可以访问您网站上的哪些网址。 此文件主要用于避免您的网站收到过多请求</p></blockquote><p>下面是我的优化后的robots.txt配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs robots.txt">User-agent: *<br>Disallow: /*.js$<br>Disallow: /*.css$<br><br>Sitemap: https://www.hancher.top/sitemap.xml<br></code></pre></td></tr></table></figure><p>注意，按照谷歌官方的说法，js等也是一个网页的重要组成部分, 如非必要，建议不要禁止js的爬取。</p><p>所以我们这里的配置是一个临时举措，等google将我们的网站内容全部收录后，可以再把js等内容放开。</p><p><img src="/../../images/site/seo/google_crawl_js.png" alt="JavaScript SEO 基础知识"></p><p>对了，robots.txt文件更新后，要记得到谷歌官网提交一下，否则google不会及时更新。<br><img src="/../../images/site/seo/google-sitemap-add.png" alt="重新添加网站地图"></p><p>更新robots的爬虫效果：<br><img src="/../../images/site/seo/google-crawl-no-js.png" alt="只爬文章"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developers.google.com/search/docs/crawling-indexing/robots/create-robots-txt?hl=zh-cn">如何编写和提交 robots.txt 文件</a></p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>seo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring6 restClient如何打印请求和响应日志</title>
    <link href="/2025/02/25/spring-spring6-http-interface-log/"/>
    <url>/2025/02/25/spring-spring6-http-interface-log/</url>
    
    <content type="html"><![CDATA[<p>在项目升级到springboot3.x后，官方提供的RestClient客户端是必须体验的。</p><p>那么，在实际生产中，我们经常会遇到一种情况，就行希望在日志里打印我们对第三方接口的请求参数和返回值，以便我们更好的调参和定位问题，那么，本文就让我们来了解一下，如何使用最新的spring6 restClient打印请求和响应日志。</p><p>其实，和springboot2.x时代，实现方案一样，还是通过spring的<code>ClientHttpRequestInterceptor</code>扩展点来实现。</p><p><code>ClientHttpRequestInterceptor</code>是一个函数式接口，很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ClientHttpResponse <span class="hljs-title function_">intercept</span><span class="hljs-params">(HttpRequest request, <span class="hljs-type">byte</span>[] body, ClientHttpRequestExecution execution)</span> <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure><p>其可以拦截RestClient对外请求的request请求体，body参数，以及发生的异常，同时还能拦截返回的Response结果。</p><p>所以，实现了这个接口，我们就可以同时获得请求实际发生时的参数情况和结果值了，打印日志的功能也就有了。</p><p>show code:</p><p>打印日志的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingRequestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClientHttpRequestInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(LoggingRequestInterceptor.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ClientHttpResponse <span class="hljs-title function_">intercept</span><span class="hljs-params">(HttpRequest request, <span class="hljs-type">byte</span>[] body, ClientHttpRequestExecution execution)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 打印请求信息</span><br>        logRequest(request, body);<br>        <span class="hljs-comment">// 执行请求</span><br>        <span class="hljs-type">ClientHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RepeatReadClientHttpRequestWrapper</span>(execution.execute(request, body));<br>        <span class="hljs-comment">// 打印响应信息</span><br>        logResponse(response);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logRequest</span><span class="hljs-params">(HttpRequest request, <span class="hljs-type">byte</span>[] body)</span> &#123;<br>        logger.debug(<span class="hljs-string">&quot;Request URI: &#123;&#125; &#123;&#125;&quot;</span>,request.getMethod(), request.getURI());<br>        logger.debug(<span class="hljs-string">&quot;Request Headers: &#123;&#125;&quot;</span>, request.getHeaders());<br>        <span class="hljs-keyword">if</span> (body.length &gt; <span class="hljs-number">0</span>) &#123;<br>            logger.debug(<span class="hljs-string">&quot;Request Body: &#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body, StandardCharsets.UTF_8));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logResponse</span><span class="hljs-params">(ClientHttpResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        logger.debug(<span class="hljs-string">&quot;Response  Code: &#123;&#125; , Headers: &#123;&#125;&quot;</span>, response.getStatusCode(),response.getHeaders());<br><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">responseBody</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(response.getBody(), StandardCharsets.UTF_8))) &#123;<br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                responseBody.append(line);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (responseBody.length() &gt; <span class="hljs-number">0</span>) &#123;<br>            logger.debug(<span class="hljs-string">&quot;Response Body: &#123;&#125;&quot;</span>, responseBody.toString());<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回的响应流只能读取一次，所以需要重新封装一个类，实现ClientHttpResponse接口，重写getBody方法，返回一个InputStream，</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RepeatReadClientHttpRequestWrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClientHttpResponse</span> &#123;<br>        <span class="hljs-keyword">private</span> ClientHttpResponse response;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] bodyData = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">RepeatReadClientHttpRequestWrapper</span><span class="hljs-params">(ClientHttpResponse response)</span> &#123;<br>            <span class="hljs-built_in">this</span>.response = response;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> HttpStatusCode <span class="hljs-title function_">getStatusCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-keyword">return</span> response.getStatusCode();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStatusText</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-keyword">return</span> response.getStatusText();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>            response.close();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">getBody</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-keyword">if</span> (Objects.isNull(bodyData)) &#123;<br>                bodyData = response.getBody().readAllBytes();<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bodyData);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> HttpHeaders <span class="hljs-title function_">getHeaders</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> response.getHeaders();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>日志打印类实现后，还需要注入到RestClient客户端中才能实现，很简单：</p><p>还记得<a href="/2025/02/20/spring-spring6-http-interface/#3-2-%E6%B3%A8%E5%86%8C%E4%BB%A3%E7%90%86%E7%B1%BB">前文</a>的RestClient的构建bean配置类吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RestClient</span> <span class="hljs-variable">restClient</span> <span class="hljs-operator">=</span> RestClient.builder()<br>        .baseUrl(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>)<br>        .requestInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingRequestInterceptor</span>())  <span class="hljs-comment">//注入日志打印类</span><br>        .build();<br><br></code></pre></td></tr></table></figure><p>结束，下班!</p><h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h2><p><a href="/2025/02/20/spring-spring6-http-interface/">spring6.x使用@HttpExchange注解调用第三方接口</a></p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>springboot3.x</tag>
      
      <tag>http interface</tag>
      
      <tag>HttpExchange</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给博客添加自定义的图标</title>
    <link href="/2025/02/23/site-self-icon/"/>
    <url>/2025/02/23/site-self-icon/</url>
    
    <content type="html"><![CDATA[<p>在用惯了fluid官方介绍的icon图片后，想要添加一些自己的icon，改如何使用呢？</p><p>比如，我的页面需要一个公众号icon <i class = 'iconfont icon-gongzhonghao'></i>，官方提供的icon图标里就没有，就只能自己想办法寻找添加了。</p><p>所幸，官方还提供了一个<a href="https://hexo.fluid-dev.com/docs/icon/">扩展点</a>, 本文就详细介绍如何利用阿里巴巴的iconfont来添加自定义的图标的操作流程。</p><h2 id="注册阿里iconfont"><a href="#注册阿里iconfont" class="headerlink" title="注册阿里iconfont"></a>注册阿里iconfont</h2><p>点击<a href="https://www.iconfont.cn/">iconfont</a> 注册账号。</p><p>然后就可以在这个网站里寻找自己喜欢的图标了，2000w个图标，总有一款你喜欢的，如果不喜欢，还可以自己制作，上传自己的icon。<br><img src="/../../images/site/icon/iconfont_total.png" alt="iconfont图标总量"></p><p>将选择好的icon，加入到自己的iconfont项目里，然后就可以使用了。</p><h2 id="网站引入icon"><a href="#网站引入icon" class="headerlink" title="网站引入icon"></a>网站引入icon</h2><p>想要让自己的网站里使用我们在iconfont里选择的icon，有两种方式：</p><ol><li>直接将对应的icon下载下来，然后自定义css脚本</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.icon</span> &#123;<br>    <span class="hljs-comment">/* 设置背景图的路径，可根据实际情况修改 */</span><br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;path/to/your/icon.png&#x27;</span>); <br>    <span class="hljs-comment">/* 背景图不重复 */</span><br>    <span class="hljs-attribute">background-repeat</span>: no-repeat; <br>    <span class="hljs-comment">/* 背景图覆盖元素 */</span><br>    <span class="hljs-attribute">background-size</span>: cover; <br>    <span class="hljs-comment">/* 元素的宽度 */</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>; <br>    <span class="hljs-comment">/* 元素的高度 */</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>; <br>    <span class="hljs-comment">/* 可根据需要添加其他样式 */</span><br>    <span class="hljs-attribute">display</span>: inline-block; <br>&#125;<br></code></pre></td></tr></table></figure><p>接着在<code>_config.yml</code>配置文件里引入自定义的css</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/custom.css</span> <span class="hljs-comment"># 自定义css路径, 可多个</span><br></code></pre></td></tr></table></figure><p>然后，我们就可以在网站的任意地方（包括文章）里使用自定义的icon了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&#x27;iconfont icon-word&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用iconfont官方的css引入方式</li></ol><p>使用自定义css的方式，灵活度很高，但比较繁琐。 </p><p>其实iconfont官方已经提供了在线的css方式，供我们在线引入使用。</p><p>进入我的项目，点击<code>查看在线链接</code>，可以看到我们项目下收藏的图标的会全部打包进一个在线css链接里，这是一个绝对路径，前面加上<code>http</code>或<code>https</code>就能在线访问了。 </p><p><img src="/../../images/site/icon/iconfont_css_url.png" alt="iconfont css路径"></p><p>接着，将这个css链接复制，在自己的项目下<code>source/css</code>目录，新建一个<code>custom.css</code>文件(随意命名)，存储这个路径。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;//at.alicdn.com/t/c/xxx.css&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>也可以点击这个路径，查看里面的内容，然后将内容复制到这个css文件中，这样还可以对样式进行修改。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;iconfont&quot;</span>; <span class="hljs-comment">/* Project id 4835676 */</span><br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;//at.alicdn.com/t/c/xxx.woff2?t=1740236137377&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff2&#x27;</span>),<br>       <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;//at.alicdn.com/t/c/xxx.woff?t=1740236137377&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff&#x27;</span>),<br>       <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;//at.alicdn.com/t/c/xxx.ttf?t=1740236137377&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-selector-class">.iconfont</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;iconfont&quot;</span> <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>  -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;<br>  -moz-osx-<span class="hljs-attribute">font-smoothing</span>: grayscale;<br>&#125;<br><br><span class="hljs-selector-class">.icon-gongzhonghao</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;\eb79&quot;</span>;<br>&#125;<br><br><span class="hljs-selector-class">.icon-word</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;\e7d4&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接着，就和自定义css一样，在<code>_config.yml</code>配置文件里引入自定义的css</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/custom.css</span> <span class="hljs-comment"># 自定义css路径, 可多个</span><br></code></pre></td></tr></table></figure><p>最后，我们就可以在网站的任意地方（包括文章）里使用自定义的icon了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&#x27;iconfont icon-gongzhonghao&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个方式更简单，推荐使用这种方式。</p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>iconfont</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows系统java启动时如何指定jdk？</title>
    <link href="/2025/02/22/java-java-with-specify-jdk/"/>
    <url>/2025/02/22/java-java-with-specify-jdk/</url>
    
    <content type="html"><![CDATA[<p>在日常的开发环境中，我们一般在我们的机器上安装一个jdk，然后再通过配置环境变量的方式，实现java命令的使用。</p><p>但是，在日常项目中，我们经常会遇到一种情况，那就是服务器上已经安装了一个jdk了，但是不符合我们的版本，比如windows服务器上，安装了一个jdk8，而且还配置好了环境变量。<br>这种情况下，我们是不能修改关于这个jdk8的配置的，尤其是环境变量，万一引起其他的程序不能运行，就是我们的锅了，而我们需要的jdk版本是17。</p><p>这种情况该怎么办呢？</p><p>所以，最理想的情况就是，我们自己安装一个jdk17，然后在程序运行的时候指定运行的jdk就是我们安装的jdk17，这样就可以完美避免这个问题了。</p><p>以下就是在linux 和 windows 系统下，指定jdk版本运行java程序的命令。</p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>假设jdk的目录是和你的jar程序在一个目录下，然后在这个目录，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">jdk-17.0.12/bin/java  -jar your_app.jar<br><span class="hljs-comment"># 或绝对路径</span><br>/home/jdk-17.0.12/bin/java  -jar your_app.jar<br></code></pre></td></tr></table></figure><p>进阶：<br>我们可以把上面的启动命令，写到一个bash文件里，比如叫<code>start.sh</code>, 然后在启动程序的时候，直接执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash start.sh<br></code></pre></td></tr></table></figure><p>这样，我们就不用记忆繁琐的启动命令了，尤其是启动命令里还有很多参数的情况下。</p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>假设jdk的目录是和你的jar程序在一个目录下，然后在这个目录，打开CMD命令终端，执行以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmd">&quot;.\jdk-<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>\bin\java.exe&quot; -jar your_app.jar<br># 或<br>&quot;jdk-<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>\bin\java.exe&quot; -jar your_app.jar<br># 或<br>&quot;jdk-<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>/bin/java.exe&quot; -jar your_app.jar<br># 或绝对路径<br>&quot;C:\Program Files\Java\jdk-<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>\bin\java.exe&quot; -jar your_app.jar<br></code></pre></td></tr></table></figure><p>注意，表示jdk目录的路径，一定要加引号，才能被CMD程序识别成一个整体，否则会报错。</p><p>当然，win10以后，windows上有了一个新的命令终端，叫powershell，这个命令终端，在使用习惯上更贴近linux，所以，也可以去掉多余的引号：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">.\jdk<span class="hljs-literal">-17</span>.<span class="hljs-number">0.12</span>\bin\java.exe <span class="hljs-literal">-jar</span> your_app.jar<br></code></pre></td></tr></table></figure><p>进阶：<br>在windows下，我们同样也可以把上面的windows命令写入一个bat文件，比如叫<code>start.bat</code>。<br>然后在启动程序的时候，直接双击这个脚本，程序就可以自动执行了，更简单。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实有些年头编程经验的朋友都明白，所谓的环境变量，就是把我们常用的一些程序的目录，存储到系统的配置里。<br>这样，当我们在命令行里直接输入一个命令时，比如<code>java</code>，系统会去我们配置的路径里找这个命令，然后在配置环境变量的jdk8目录里，找到java命令，然后执行这个命令。</p><p>本质上还是调用对应目录下的java命令。 </p><p>所以，可以理解为，这就是一个语法糖。</p><p>同样的，如果我们想要指定java程序的运行jdk或jre，只要通过这个目录下的java可执行程序运行这个程序就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>java</tag>
      
      <tag>jdk</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring6.x使用@HttpExchange注解调用第三方接口</title>
    <link href="/2025/02/20/spring-spring6-http-interface/"/>
    <url>/2025/02/20/spring-spring6-http-interface/</url>
    
    <content type="html"><![CDATA[<p>最近有一个新项目，因为没有历史负担，整哈上手了最新的springboot3.x体系，所以就顺带也升级了spring6.x。</p><p>在使用spring6.x时，发现spring官方提供了一套HTTP Interface的功能 挺好用，类似@FeignClient的那样，也可以通过@HttpExchange注解来调用第三方接口，从此可以摆脱RestTemplate臃肿的调用，实现轻量级的第三方接口服务了。</p><p>所以特此记录，与大家分享一下。</p><h2 id="1-版本"><a href="#1-版本" class="headerlink" title="1. 版本"></a>1. 版本</h2><ul><li>springboot3.3.5</li><li>spring-framework 6.1.14</li><li>jdk 17 (spring6.x 最低jdk版本)</li></ul><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h2><p>其实，从架构上来说，spring框架并没有对外接口调用的底层做太多的改变，<code>HTTP Interface</code> 是在原先的<code>RestTemplate</code>这类http客户端的上面，又搞了一个接口代理层,<br>代理层上面是我们<code>HTTP Interface</code>的接口定义部分，然后通过代理层的代理，将http 请求功能转发到底层的http客户端实现。而这底层的http客户端实现，就是我们之前使用过的<code>RestTemplate</code>，以及spring6.x 新提供的<code>RestClient</code>。<br><img src="/../../images/tech/spring/spring6-http-interface.png" alt="http-interface设计原理"></p><p>通过上面的架构图，我们可以看出，<code>HTTP Interface</code>并不是响应式web（webFlux）独有的，而是可以通过自由的组合底层的http客户端实现, 来支持不同的场景，也就是说<code>servlet</code>阻塞式web也支持。</p><p>再次印证了技术圈的那句老话：</p><blockquote><p>没有问题不是通过加一层不能解决，如果不行，那就再加一层</p></blockquote><h3 id="2-1-RestClient"><a href="#2-1-RestClient" class="headerlink" title="2.1 RestClient"></a>2.1 RestClient</h3><p>多说一句<code>RestClient</code>，大家可能对<code>RestTemplate</code>和<code>WebClient</code>很熟悉了，一个数阻塞式web请求常青树，一个是响应式web请求客户端。<br>但是<code>RestTemplate</code> 相对于 <code>WebClient</code> 来说太难用了，语法繁琐，解析不变。 所以spring6.1版本 引入了<code>RestClient</code>这一实现。</p><p>安装官方的解释：</p><blockquote><p>The RestClient offers a more modern API for synchronous HTTP access. RestTemplate uses the same HTTP library abstraction as RestClient.<br>翻译：RestTemplate和RestClient使用相同的HTTP库， 但是RestClient提供了一种现代的HTTP访问API，方便大家使用。</p></blockquote><p>RestClient的使用demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">Pet</span> <span class="hljs-variable">pet</span> <span class="hljs-operator">=</span> restClient.get()<br>  .uri(<span class="hljs-string">&quot;https://petclinic.example.com/pets/&#123;id&#125;&quot;</span>, id)<br>  .accept(APPLICATION_JSON)<br>  .retrieve()<br>  .body(Pet.class);<br></code></pre></td></tr></table></figure><p>是不是很简洁，现代的很多http客户端都是这种流式调用语法糖，比如<code>okhttp</code>、java原生的<code>HTTPClient</code>等</p><h3 id="2-2-HttpExchange"><a href="#2-2-HttpExchange" class="headerlink" title="2.2 HttpExchange"></a>2.2 HttpExchange</h3><p><code>HTTP Interface</code>的核心注解，可以放到一个java接口类上，也可以放到一个接口方法上。通feign一样，可以同步使用spring-web体系下的相关的注解，比如<code>@PathVariable</code>、<code>@RequestParam</code>等，<br>这些可以在controller里能够正常使用的注解，都可以无缝的在<code>@HttpExchange</code>注解标记的接口或方法上使用。</p><p>在方法上使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">RepositoryService</span> &#123;<br><br><span class="hljs-meta">@GetExchange(&quot;/repos/&#123;owner&#125;/&#123;repo&#125;&quot;)</span><br>Repository <span class="hljs-title function_">getRepository</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String owner, <span class="hljs-meta">@PathVariable</span> String repo)</span>;<br><br><span class="hljs-comment">// more HTTP exchange methods...</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>在类上使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@HttpExchange(url = &quot;/repos/&#123;owner&#125;/&#123;repo&#125;&quot;, accept = &quot;application/vnd.github.v3+json&quot;)</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">RepositoryService</span> &#123;<br><br><span class="hljs-meta">@GetExchange</span><br>Repository <span class="hljs-title function_">getRepository</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String owner, <span class="hljs-meta">@PathVariable</span> String repo)</span>;<br><br><span class="hljs-meta">@PatchExchange(contentType = MediaType.APPLICATION_FORM_URLENCODED_VALUE)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateRepository</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String owner, <span class="hljs-meta">@PathVariable</span> String repo,</span><br><span class="hljs-params"><span class="hljs-meta">@RequestParam</span> String name, <span class="hljs-meta">@RequestParam</span> String description, <span class="hljs-meta">@RequestParam</span> String homepage)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>看到这里，大家会有一个疑问， 第三方调研的域名地址在哪里配置呢？</p><p>在feign里，我们在<code>@FeignClient</code>注解里，可以通过<code>url</code>属性来指定域名地址，但是<code>HTTP Interface</code>不行，需要在接口对应的代理bean里配置对应的域名地址，这里不如feign好用。</p><p>我们上面配置的接口<code>RepositoryService</code>必须手动注册到<code>HttpServiceProxyFactory</code>里才生效，不然无法使用。</p><p>在这里，我们可以自己指定底层实际的http客户端。</p><ul><li>RestClient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RepositoryService <span class="hljs-title function_">repositoryService</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">RestClient</span> <span class="hljs-variable">restClient</span> <span class="hljs-operator">=</span> RestClient.builder().baseUrl(<span class="hljs-string">&quot;https://api.github.com/&quot;</span>).build();<br>    <span class="hljs-type">RestClientAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> RestClientAdapter.create(restClient);<br>    <span class="hljs-type">HttpServiceProxyFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> HttpServiceProxyFactory.builderFor(adapter).build();<br><br>    <span class="hljs-type">RepositoryService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> factory.createClient(RepositoryService.class);<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>WebClient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RepositoryService <span class="hljs-title function_">repositoryService</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">WebClient</span> <span class="hljs-variable">webClient</span> <span class="hljs-operator">=</span> WebClient.builder().baseUrl(<span class="hljs-string">&quot;https://api.github.com/&quot;</span>).build();<br>    <span class="hljs-type">WebClientAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> WebClientAdapter.create(webClient);<br>    <span class="hljs-type">HttpServiceProxyFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> HttpServiceProxyFactory.builderFor(adapter).build();<br><br>    <span class="hljs-type">RepositoryService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> factory.createClient(RepositoryService.class);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>RestTemplate</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> RepositoryService <span class="hljs-title function_">repositoryService</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    restTemplate.setUriTemplateHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultUriBuilderFactory</span>(<span class="hljs-string">&quot;https://api.github.com/&quot;</span>));<br>    <span class="hljs-type">RestTemplateAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> RestTemplateAdapter.create(restTemplate);<br>    <span class="hljs-type">HttpServiceProxyFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> HttpServiceProxyFactory.builderFor(adapter).build();<br><br>    <span class="hljs-type">RepositoryService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> factory.createClient(RepositoryService.class);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后，我们的接口<code>RepositoryService</code>就注册成spring容器里的一个bean，可以在任何地方注入了。</p><h3 id="2-3-HttpExchange的变种"><a href="#2-3-HttpExchange的变种" class="headerlink" title="2.3 HttpExchange的变种"></a>2.3 HttpExchange的变种</h3><p>spring官方对<code>@HttpExchange</code>注解，提供了一些扩展，方便使用：</p><ul><li>GetExchange</li><li>PostExchange</li><li>PutExchange</li><li>PatchExchange</li><li>DeleteExchange</li></ul><h2 id="3-上代码"><a href="#3-上代码" class="headerlink" title="3. 上代码"></a>3. 上代码</h2><p>好了，我们来写一个简单的例子，看看<code>HTTP Interface</code>的使用。</p><h3 id="3-1-业务接口"><a href="#3-1-业务接口" class="headerlink" title="3.1 业务接口"></a>3.1 业务接口</h3><p>这是我们项目里的业务接口，定义了<code>HTTP Interface</code>的接口定义，通过<code>@GetExchange</code>注解来定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestApi</span> &#123;<br><br>    <span class="hljs-meta">@GetExchange(value = &quot;/queryTest&quot;,accept = &quot;application/json&quot;)</span><br>    TestRes <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;pageNum&quot;,defaultValue = &quot;1&quot;)</span> <span class="hljs-type">int</span> pageNum,</span><br><span class="hljs-params">                     <span class="hljs-meta">@RequestParam(value = &quot;pageSize&quot;,defaultValue = &quot;10&quot;)</span> <span class="hljs-type">int</span> pageSize,</span><br><span class="hljs-params">                     <span class="hljs-meta">@RequestParam(value = &quot;jobName&quot;,required = false)</span> String jobName</span><br><span class="hljs-params">                     </span><br><span class="hljs-params">    )</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回结果会自动封装到<code>TestRes</code>对象中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBaseRes</span> &#123;<br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> Boolean success;<br><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRes</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TestBaseRes</span> &#123;<br><br>    <span class="hljs-keyword">private</span> TestData data;<br><br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestData</span> &#123;<br>        <span class="hljs-keyword">private</span> Integer total;<br>        <span class="hljs-keyword">private</span> JSONArray rows;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-注册代理类"><a href="#3-2-注册代理类" class="headerlink" title="3.2 注册代理类"></a>3.2 注册代理类</h3><p>将TestApi配置到代理类中，并指定请求域名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TestApi <span class="hljs-title function_">testApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">RestClient</span> <span class="hljs-variable">restClient</span> <span class="hljs-operator">=</span> RestClient.builder().baseUrl(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>).build();<br>        <span class="hljs-type">RestClientAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> RestClientAdapter.create(restClient);<br>        <span class="hljs-type">HttpServiceProxyFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> HttpServiceProxyFactory.builderFor(adapter).build();<br><br>        <span class="hljs-keyword">return</span> factory.createClient(TestApi.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-使用接口"><a href="#3-3-使用接口" class="headerlink" title="3.3 使用接口"></a>3.3 使用接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>TestApi testApi;<br></code></pre></td></tr></table></figure><p>完整代码可以查看我的github: <a href="https://gist.github.com/Hanchers/c0e64954ceefb7e9635a171da6d97e86">spring6.x http interface demo</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#rest-http-interface">spring6 官方使用http interface案例</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>springboot3.x</tag>
      
      <tag>http interface</tag>
      
      <tag>HttpExchange</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主动推送我们的博客到搜索引擎</title>
    <link href="/2025/02/18/site-hexo-site-url-auto-submit/"/>
    <url>/2025/02/18/site-hexo-site-url-auto-submit/</url>
    
    <content type="html"><![CDATA[<p>各大搜索引擎都提供了让用户主动推送url地址到搜索引擎的功能，但是这个功能需要我们手动去收集我们的url，然后再通过编程的方式去实现推送功能，比较麻烦。</p><p>因为使用的是hexo架构，其有一些插件已经实现了类似的功能，我们选择了其中的<code>hexo-submit-urls-to-search-engine</code>来实现这个功能。</p><p>原因有二：</p><ol><li>这个插件还在更新，说明还在维护</li><li>支持目前主流的百度、谷歌、必应搜索引擎，且一键推送。</li></ol><p>下面让我们开始吧！</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>要将我们的博客的url推送的搜索引擎，我们就先需要在搜索引擎那里注册账号，然后获取对应的密钥才行。</p><h2 id="百度（baidu）"><a href="#百度（baidu）" class="headerlink" title="百度（baidu）"></a>百度（baidu）</h2><p>进入<a href="https://ziyuan.baidu.com/site/index#/">百度资源</a>站点管理页面，添加网站。<br><img src="/../../images/site/seo/baidu-ziyuan-add.png" alt="添加自己的网站"><br>地址写自己的网站地址即可。</p><p>三步配置好后，点击提交，我们的站点就已经注册到百度了。 理论上这个时候，百度的爬虫就会主动的爬取我们的网站了。</p><p>但是呢？因为我的博客是托管在github上的，因为众所周知的原因，百度是爬不了github上的网站的。所以，对于百度的搜索引擎，我们现在只能通过主动推送的方式，将我们的新文章推送给百度 。</p><p>在<code>资源提交</code>-&gt;<code>api提交</code>目录下，我们就可以拿到我们要推送的接口地址和推送密钥（token）了，这个token要记住，后面插件中会用到。<br><img src="/../../images/site/seo/baidu-ziyuan-api-token.png" alt="百度api提交token"></p><p>百度的配置就这些，是不是很简单。</p><h2 id="必应（bing）"><a href="#必应（bing）" class="headerlink" title="必应（bing）"></a>必应（bing）</h2><p>进入bing的站点管理工具<a href="https://www.bing.com/webmasters">webmasters</a>， 如果没注册过，<br>可以参考我的文章<a href="https://www.hancher.top/2025/01/22/site-bing-site-seo/">将我们的博客录入bing搜索引擎</a>实现准备工作。</p><p>bing站点注册好后，打开右上角的配置按钮,即可看到<code>api访问</code>凭证管理入口：<br><img src="/../../images/site/seo/bing-api-token-entry.png" alt="api访问凭证管理入口">  </p><p>然后，在<code>API密钥</code>这里生成密钥，记住这个密钥，后面插件中会用到。<br><img src="/../../images/site/seo/bing-api-token-gen.png" alt="生成密钥"></p><h2 id="谷歌（google）"><a href="#谷歌（google）" class="headerlink" title="谷歌（google）"></a>谷歌（google）</h2><p>谷歌的配置就比较麻烦了。</p><p>首先，同百度一样，我们要在<a href="https://search.google.com/search-console/about">google-search-console</a>里注册我们的网站。<br><img src="/../../images/site/seo/google-search-console-add.png" alt="添加域名站点"></p><p>然后，在站点添加成功后，打开<a href="https://developers.google.cn/search/apis/indexing-api/v3/prereqs?hl=zh-cn">谷歌Index api文档</a>按照要求，配置一些内容。<br><img src="/../../images/site/seo/google-index-api-add.png" alt="配置IndexApi仅需3步"></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>在设置工具里先创建项目。创建项目即可，启用api，后面说的凭证什么的不用管。<br><img src="/../../images/site/seo/google-index-api-open.png" alt="启用api"></p><p>当然，错过了也不用担心，我们依然可以在<a href="https://console.cloud.google.com/welcome">谷歌云控制台</a>首页进行补救。<br><img src="/../../images/site/seo/google-cloud-console-welcome.png" alt="谷歌云首页的api入口"><br>进入后，开启<code>web search index api</code>即可。</p><h3 id="创建服务账号"><a href="#创建服务账号" class="headerlink" title="创建服务账号"></a>创建服务账号</h3><p>创建服务账号，只需要填写第一步即可，后面的可选步骤都可以跳过。<br><img src="/../../images/site/seo/google-index-api-service-account-add.png" alt="创建服务账号"><br>创建好服务账号后，你会得到一个邮箱地址，类似<code>xxxx@xxxx.iam.gserviceaccount.com</code>，这个邮箱要记住，后面会用到。</p><p>然后，在服务账号页面去创建密钥，选择<code>JSON</code>格式，下载到自己的电脑上，后面会用到。<br><img src="/../../images/site/seo/google-index-api-service-account-step.png" alt="服务账号创建步骤"></p><h3 id="关联网站"><a href="#关联网站" class="headerlink" title="关联网站"></a>关联网站</h3><p>在<a href="https://search.google.com/search-console/about">google-search-console</a>里（此时应该已经注册好）。</p><p>点击左边栏的设置，进入<code>用户和权限</code>配置部分：<br><img src="/../../images/site/seo/google-search-console-config-user.png" alt="配置用户"><br>点击添加用户，将我们在服务账号那里获得的邮箱地址填入，选择<code>拥有者</code>即可。<br><img src="/../../images/site/seo/google-search-console-config-user-add.png" alt="添加用户"></p><p><strong>注意，一定要选择拥有者</strong></p><p>到这里，我们在谷歌的配置也完成了。</p><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>打开项目，在控制台执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-submit-urls-to-search-engine<br></code></pre></td></tr></table></figure><p>在<code>_config.yml</code>中添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 主动提交文章到搜索引擎</span><br><span class="hljs-attr">hexo_submit_urls_to_search_engine:</span><br>  <span class="hljs-attr">submit_condition:</span> <span class="hljs-string">count</span> <span class="hljs-comment">#链接被提交的条件，可选值：count | period 现仅支持count</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 提交最新的2个链接</span><br>  <span class="hljs-attr">period:</span> <span class="hljs-number">900</span> <span class="hljs-comment"># 提交修改时间在 900 秒内的链接</span><br>  <span class="hljs-attr">google:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 是否向Google提交，可选值：1 | 0（0：否；1：是）</span><br>  <span class="hljs-attr">bing:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 是否向bing提交，可选值：1 | 0（0：否；1：是）</span><br>  <span class="hljs-attr">baidu:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 是否向baidu提交，可选值：1 | 0（0：否；1：是）</span><br>  <span class="hljs-attr">txt_path:</span> <span class="hljs-string">submit_urls.txt</span><br>  <span class="hljs-attr">baidu_host:</span> <span class="hljs-string">https://www.hancher.top</span><br>  <span class="hljs-attr">baidu_token:</span> <span class="hljs-comment"># 前面得到的百度api的密钥</span><br>  <span class="hljs-attr">bing_host:</span> <span class="hljs-string">https://www.hancher.top</span><br>  <span class="hljs-attr">bing_enable_indexnow:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否用 indexNow 提交链接给必应: true (Yes) | false (No). 只有 2.1.1 及之后的版本才可以开启这个功能。</span><br>  <span class="hljs-attr">bing_token:</span> <span class="hljs-comment"># 前面得到的必应api的密钥</span><br>  <span class="hljs-attr">google_host:</span> <span class="hljs-string">https://www.hancher.top</span><br>  <span class="hljs-attr">google_key_file:</span> <span class="hljs-string">xxx.json</span> <span class="hljs-comment">#存放google key的json文件，放于网站根目录（与hexo _config.yml文件位置相同），请不要把json文件内容直接发布在公众仓库里!</span><br>  <span class="hljs-attr">google_proxy:</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># 在github 上，不用代理。</span><br>  <span class="hljs-attr">replace:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">cjh_google_url_submitter</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">cjh_bing_url_submitter</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">cjh_baidu_url_submitter</span><br></code></pre></td></tr></table></figure><p>把google下载的json文件放在网站根目录，通_config.yml平级。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>配置插件完成后，在控制台执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp; hexo generate<br><span class="hljs-comment"># 或者</span><br>npm run clean &amp; npm run build<br></code></pre></td></tr></table></figure><p>如果在生成的网站里，有<code>submit_urls.txt</code>文件，则说明配置成功。</p><h2 id="github-action配置"><a href="#github-action配置" class="headerlink" title="github action配置"></a>github action配置</h2><p>在代码的<code>.github/workflows/hexo.yml</code>里增加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">构建博客内容</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">clean</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">提交url到搜索引擎</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">deploy</span><br></code></pre></td></tr></table></figure><p>然后我们提交代码的时候就会发现差距可以正常运行了。<br><img src="/../../images/site/seo/hexo_auto_submit_url.png" alt="插件运行效果"><br>三大引擎提交的返回值：   </p><ul><li>百度：</li></ul><p>超过每日限额（10条）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Baidu</span> response:  &#123;<span class="hljs-string">&quot;error&quot;</span>:<span class="hljs-number">400</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;over quota&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>现在百度的每日限额就剩10条了，请节约使用。</p><p>成功：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Baidu</span> response:  &#123;<span class="hljs-string">&quot;remain&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;success&quot;</span>:<span class="hljs-number">10</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>必应：</li></ul><p>超过每日限额（10条）</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">Bing <span class="hljs-params">response:</span>  &#123;<br>  <span class="hljs-params">ErrorCode:</span> <span class="hljs-number">2</span>,<br>  <span class="hljs-params">Message:</span> &#x27;ERROR<span class="hljs-operator">!</span><span class="hljs-operator">!</span><span class="hljs-operator">!</span> You have exceeded your daily url submission <span class="hljs-params">quota :</span> <span class="hljs-number">10</span>&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>密钥没有配置对：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Bing response:  &#123; ErrorCode: 3, Message: &#x27;ERROR!!! InvalidApiKey&#x27; &#125;<br></code></pre></td></tr></table></figure><p>成功：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">Bing <span class="hljs-params">response:</span>  &#123; <span class="hljs-params">d:</span> <span class="hljs-literal">null</span> &#125;<br></code></pre></td></tr></table></figure><ul><li>谷歌：<br>网站关联账号不是拥有者权限</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Google response:  &#123;<br>  error: &#123;<br><span class="hljs-code">    code: 403,</span><br><span class="hljs-code">    message: &#x27;Permission denied. Failed to verify the URL ownership.&#x27;,</span><br><span class="hljs-code">    status: &#x27;PERMISSION_DENIED&#x27;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br></code></pre></td></tr></table></figure><p>index api 没有开启：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Google response:  &#123;<br>  error: &#123;<br><span class="hljs-code">    code: 403,</span><br><span class="hljs-code">    message: &#x27;Web Search Indexing API has not been used in project xxx before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/indexing.googleapis.com/overview?project=xxxx then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry.&#x27;,</span><br><span class="hljs-code">    status: &#x27;PERMISSION_DENIED&#x27;,</span><br><span class="hljs-code">    details: [ [Object], [Object], [Object] ]</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br></code></pre></td></tr></table></figure><p>点击返回的链接，去开启api权限即可。</p><p>成功：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Google response:  &#123;<br>  urlNotificationMetadata: &#123;<br><span class="hljs-code">    url: &#x27;https://www.hancher.top/2025/02/11/exception-doris-stream-load-from-clickhouse-by-data-crash/&#x27;</span><br><span class="hljs-code">  &#125;</span><br><span class="hljs-code">&#125;</span><br></code></pre></td></tr></table></figure><p>如此，我们的主动提交url到搜索引擎的配置就完成了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://h.cjh0613.com/zh/posts/hexo-submit-urls-to-search-engine/">hexo-submit-urls-to-search-engine官方文档地址</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>seo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文弄懂单点登录的几种技术选型</title>
    <link href="/2025/02/12/architecture-sso-index/"/>
    <url>/2025/02/12/architecture-sso-index/</url>
    
    <content type="html"><![CDATA[<p>最近在搞一个单点登录的项目，顺便把单点登录的几种方案研究了一下,在这里汇总分析一下，让大家有一个整体的认识。</p><h2 id="什么是单点登录"><a href="#什么是单点登录" class="headerlink" title="什么是单点登录"></a>什么是单点登录</h2><p>在介绍单点登录的方案前，先说明一下什么是单点登录？  </p><p>单点登录（Single Sign On，简称 SSO），是指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权，无需再次登录。</p><p>它核心解决了一个问题：用户只需要登录一次，就可以访问所有相互信任的应用系统。</p><p>即，在单点登录体系（SSO）中，必然会涉及到下面几种角色：</p><ul><li>多套系统应用：如果是单套的话，没必要SSO</li><li>登录用户：一套全局通行的用户中心</li><li>SSO认证中心：用来实现登录认证的地址，只有这里说用户是可信的，这个用户才是可信的。</li></ul><p>而且进一步划分，单点登录还可以细化分为两个部分：认证和授权。  </p><blockquote><p>认证：也可以称为鉴权，就是鉴定账号是否是可信的，是否系统约定的合法账号。<br>授权：就是给合法的账号授予一定的权限，比如只读权限，比如读写权限等。</p></blockquote><p>在这个基础上， 单点登录的类型又可以分为细分为两种: 仅支持认证，和认证授权都支持。</p><h2 id="常见的单点登录方案"><a href="#常见的单点登录方案" class="headerlink" title="常见的单点登录方案"></a>常见的单点登录方案</h2><p>简单介绍一下当前主流的单点登录方案，以及适用场景。</p><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>CAS(Central Authentication Service): 中心授权服务。顾名思义就是先有一个中心授权服务器，<br>其他的所有的业务服务器在需要身份认证的时候，都会向 <strong>中心授权服务</strong> 确认身份，鉴定是否合法。<br>这个过程中一般不涉及权限的管理，或者说权限的管理在各个子系统实现。</p><p>所以，CAS是一种仅支持认证的认证方案！但相对其他认证授权方案来说，CAS也足够简单。</p><p>对于大部分的应用场景来说，这就够了。因为CAS足够简单，很多场景也不需要权限管理，只需要鉴定访问是否合法就行了。</p><p>以下是cas协议架构：<br><img src="/../../images/tech/architecture/sso/cas_arch.png" alt="cas协议架构"></p><p>cas请求认证的时序图：<br><img src="/../../images/tech/architecture/sso/cas_flow_diagram.png" alt="cas请求认证的时序图"></p><p>应用场景：所有不需要权限管理的应用集群</p><ul><li>后台服务器间的跨服务访问</li><li>普通的一处登录，处处访问</li><li>内部服务内部集群，因为内网的保护，彼此间天然就是可信的</li></ul><h3 id="OAuth2"><a href="#OAuth2" class="headerlink" title="OAuth2"></a>OAuth2</h3><p>OAuth2(Open Authorization）: 开发授权协议。他的定位最开始是用于第三方免密登录和资源授权，比如使用微信免密登录微博。<br>因为这个特性，其天然的算是一种单点登录方案。</p><p>OAuth2支持认证和授权。与cas大多实在一个可信的内网环境不同，<br>OAuth2的核心目的是为了解决在完全不可信的网络环境下解决登录方与应用方的信任问题，并在此基础上提供了一套授权功能。<br>所以，OAuth2的定位和CAS还是不同的，那么相应的应用场景也就有了区别：</p><p>OAuth2的应用场景：</p><ul><li>第三方免费登录某个应用系统</li><li>对于不同来源的用户设置不同的访问级别</li><li>企业内部的单点登录</li></ul><p>OAuth2体系的角色划分：</p><ul><li>资源拥有者(resource owner)：比如登录用户</li><li>资源服务(resource server)：用户的资源所存储的服务</li><li>客户端(client)：用户现在需要登录的应用</li><li>授权服务(authorization server)：授权认证的服务</li></ul><p>还是以上面微信免密登录微博为例，一般在登录过程中，会提示我们授权微博使用微信的头像等信息，登录成功后，微博的头像就是微信的头像了：</p><ul><li>资源拥有者：微信用户</li><li>资源服务：微信用户的一些信息提供方的服务，比如微信的头像、昵称等信息服务。简单来说就是微信服务器。</li><li>客户端：微信用户现在要登录的微博应用。</li><li>授权服务：微信的OAuth2授权服务。</li></ul><p>OAuth2协议的架构图：<br><img src="/../../images/tech/architecture/sso/oauth2_flow.png" alt="oauth2协议架构"></p><p>OAuth2选型流程图：<br><img src="/../../images/tech/architecture/sso/oauth2_grant_flowchart.png" alt="oauth2选型流程"></p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>JWT(JSON Web Token)，是一种用于在应用程序之间使用json的方式传递数据的安全令牌。严格来说，JWT不是一种sso协议，而是一种数据格式。</p><p>但是在sso协议过程中，生成的可信凭证，如果想在互联网这个不可信的环境下传输，JWT也就派上了用场。</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>JWT由三部分组成：</p><ul><li>头部(Header)：包含签名算法、加密算法等信息。<ul><li>typ：令牌的类型，通常是JWT</li><li>alg：签名算法，如HS256、RS256等。</li></ul></li><li>负载(Payload)：包含用户信息、权限信息等,可以包含以下字段以及任意自定义的字段。<ul><li>iss: Issuer。JWT的签发人，非必填</li><li>sub: Subject。主题，JWT所面向的用户或实体的唯一标识符，非必填</li><li>aud: Audience。受众，JWT的预期接收者，非必填</li><li>exp: Expiration Time。过期时间，非必填</li><li>nbf: Not Before。生效时间，JWT在此时间之前不可用，非必填</li><li>iat: Issued At。签发时间，非必填</li><li>jti: JWT ID。JWT的唯一标识，非必填</li></ul></li><li>签名(Signature)：将头部、负载和密钥进行签名。<ul><li>前面算法：signature &#x3D; HS256（base64UrlEncode(header) + “.” + base64UrlEncode(payload), secret）</li></ul></li></ul><p>最后形成一个Token字符串：<code>xxx.yyy.zzz</code>， 即：</p><blockquote><p>base64UrlEncode(header).base64UrlEncode(payload).signature</p></blockquote><p>由此可见，JWT里的数据虽然经过base64编码，但是未加密，所以一般仅放一些公共信息。</p><p>不过因为其中也有通过密钥进行签名的环节，如果再配上加密算法对一些信息的加密，也可以当做一个无服务器化的极简版sso凭证：即能够正确解密识别JWT的凭证都是可信凭证。</p><p>但这仅是特殊场景的使用，一般情况还是将JWT当做CAS 或 OAuth2 的凭证在互联网中传输的载体。</p><h3 id="OIDC"><a href="#OIDC" class="headerlink" title="OIDC"></a>OIDC</h3><p>OIDC（OpenID Connect）协议，是在OAuth2 的基础上发展出来的一个协议，主要应用与身份的认证。<br>与OAuth2相比，OIDC衍生出了一个<code>ID Token</code>的概念，用来标识登录用户的身份验证。</p><p>OIDC的角色划分：</p><ul><li>End User（EU）：资源所有者，即用户，对应OAuth2中的资源拥有者；</li><li>Relying Party（RP）：指代在 OAuth 2.0 中，受信任的客户端，身份认证和授权信息的消费方；</li><li>ID Token：OIDC新增，包含 EU 身份认证信息的 JWT 格式数据，是用户的身份凭证；</li><li>OpenID Provider（OP）：有能力提供身份认证的服务方， 对应OAuth2中的授权服务；</li><li>UserInfo Endpoint：受 OAuth 2.0 保护的用户信息接口，此接口必须使用 HTTPS，能够当 RP 使用 ID Token 访问时返回用户的信息。</li></ul><p>所以，相对于OAuth2，OIDC其设计更加精简，也更适用于sso的场景。 一般情况下，如果决定选型OAuth2，那么OIDC可能更好一点。</p><p>OIDC的架构图：<br><img src="/../../images/tech/architecture/sso/oidc_arch.png" alt="oidc协议架构"></p><h3 id="SAML"><a href="#SAML" class="headerlink" title="SAML"></a>SAML</h3><p>SAML（Security Assertion Markup Language）是一种基于XML的标准，用于在不同的安全域之间传递身份验证和授权数据，侧重于不同企业间身份认证。</p><p>涉及的角色：</p><ul><li>Service Provider(SP)：服务提供方，</li><li>Identity Provider(IdP)：身份提供方，</li></ul><p>SAML2的架构图：<br><img src="/../../images/tech/architecture/sso/saml-flow-overview.png" alt="saml-flow-overview.png"><br>由图中可以看出，SP和IdP之间的通信必须是通过浏览器来实现的。</p><p>SAML2的应用场景：</p><ul><li>不同企业间的单点登录场景</li><li>因为使用了浏览器的重定向技术，适用于web场景，移动端的sso不要考虑</li><li>企业内部的不同Saas集成，比如一个账号登录不同的Saas应用</li><li>SAML 2.0 支持数字签名、加密断言等功能，适用于对安全性要求较高的系统</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上三种协议都支持单点登录功能。</p><p>从应用定位角度还是有些差异的：</p><ul><li>cas更适用于公司内部搭建轻量授权服务。</li><li>OAuth&#x2F;OIDC，是面向于在非信认条件下的信任授权问题，既支持认证，又支持授权。</li><li>SAML，三者里面的老大哥，功能上与OAuth有点重叠。更重，但也更安全,适用于跨企业端通信。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://auth0.com/intro-to-iam/saml-vs-oauth">SAML与OAuth对比</a></p><p><a href="https://apereo.github.io/cas/7.1.x/index.html">CAS官方介绍</a></p><p><a href="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-11">OAuth2官方介绍</a></p><p><a href="https://jwt.io/">JWT官方介绍</a><br><a href="https://datatracker.ietf.org/doc/html/rfc7519">JWT协议</a></p><p><a href="https://www.cnblogs.com/CKExp/p/16084545.html">理解OIDC协议和认证机制</a></p><p><a href="https://docs.authing.cn/v2/concepts/saml/saml-flow.html">理解 SAML 流程</a></p>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>架构</tag>
      
      <tag>单点登录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>doris通过dataX导入数据发生宕机问题解决</title>
    <link href="/2025/02/11/exception-doris-stream-load-from-clickhouse-by-data-crash/"/>
    <url>/2025/02/11/exception-doris-stream-load-from-clickhouse-by-data-crash/</url>
    
    <content type="html"><![CDATA[<h2 id="依赖版本"><a href="#依赖版本" class="headerlink" title="依赖版本"></a>依赖版本</h2><ul><li>doris： 2.1.0</li><li>clickhouse： 22.1.3.7</li><li>dataX： 使用代码自己编译的最新版本</li></ul><h2 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h2><p>创建一个正常的dataX 采集任务，从clickhouse的一张表里向doris里写数据， 使用的是<code>clickhousereader</code>和 <code>doriswriter</code>。 </p><p>很简单的一个任务，数据量理论上也不多，才16万，60多M的注解，可是一执行，doris的be就全部宕机了。</p><p>问题是我们用这套环境跑过很多种数据库的数据采集，比如mysql，oracle, postgresql等，结果都正常。只有clickhouse数据库的采集任务，一执行就报错！</p><p>报的错有两种形式：<br>一种是直接提示be服务连接失败：<br><img src="/../../images/tech/db/doris_from_datax_err.png" alt="doris be拒接连接"><br>另一种还有返回值，但是提示<code>Label already exists</code>的错误：<br><img src="/../../images/tech/db/doris_from_datax_err2.png" alt="Label already exists"></p><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>在排查问题前，我们要先了解一下dataX同步数据到doris的方式，只有如此我们才能按图索骥来定位问题，而不是漫无目的的乱猜。</p><p>以下是dataX官网对其架构的设计理念：</p><blockquote><p>为了解决异构数据源同步问题，DataX将复杂的网状的同步链路变成了星型数据链路，DataX作为中间传输载体负责连接各种数据源。当需要接入一个新的数据源的时候，只需要将此数据源对接到DataX，便能跟已有的数据源做到无缝数据同步。</p></blockquote><p><img src="/../../images/tech/datax/datax-etl-arch.png" alt="datax框架设计"></p><p>如此，我们可以了解到，在dataX的设计里，reader和writer两个独立的模块，是可以任意组合复用的。通过控制变量法，既然其他数据库的数据能正常导入到doris，那说明<code>doriswriter</code>应该是没有问题的。</p><p>所以，我们的第一怀疑对象是clickhouse的问题，要么是clickhouse表的问题，要么是<code>clickhousereader</code>的问题。但是当我们把clickhouse同样的表接入到mysql里时，却发现数据采集成功了！！竟然成功了！</p><p>这么说，clickhouse采集端也没有问题，那问题出在哪里了？</p><p>按照上面dataX的设计图，我们再次把目光看向了doris，这次我们不再怀疑<code>doriswriter</code>，而是直接怀疑doris本身。</p><p>这次我们查看doris的数据表，发现在系统建表的时候出现了大量的<code>varchar(0)</code>的表字段，通过将<code>varchar(0)</code>字段改为正常的有长度的字段，比如<code>varchar(2000)</code>，问题就解决了。</p><p>但是问题真的是这样吗？</p><p>因为我们建表系统bug的原因，其他源采集数据到doris里时，也有可能产生<code>varchar(0)</code>的情况，说明<code>varchar(0)</code>并不会真正的阻碍doris<code>stream load</code>数据的导入。 </p><p>接下来我们尝试对每个<code>varchar(0)</code>字段进行修复的方式，逐个字段排查，最后定位到<code>syslogid</code>这个字段，其对应的值是<code>6f336347a90549789092b11d31b2197a</code>。<br>这个字段只要长度为0，即使有一条数据，也能把doris的be全部干崩溃（全部崩溃是dataX重试的锅）。</p><p>然后在be.out日志里，我们发现报错信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs log">*** Query id: 5a4698a1afd40053-50e26699312ee9a5 ***<br>*** tablet id: 0 ***<br>*** Aborted at 1739168366 (unix time) try &quot;date -d @1739168366&quot; if you are using GNU date ***<br>*** Current BE git commitID: 91efb6a43d ***<br>*** SIGSEGV unknown detail explain (@0x0) received by PID 25235 (TID 26356 OR 0x7fbaf0c76700) from PID 0; stack trace: ***<br> 0# doris::signal::(anonymous namespace)::FailureSignalHandler(int, siginfo_t*, void*) at /home/zcp/repo_center/doris_release/doris/be/src/common/signal_handler.h:417<br> 1# os::Linux::chained_handler(int, siginfo*, void*) in /root/java/jdk1.8.0_221/jre/lib/amd64/server/libjvm.so<br> 2# JVM_handle_linux_signal in /root/java/jdk1.8.0_221/jre/lib/amd64/server/libjvm.so<br> 3# signalHandler(int, siginfo*, void*) in /root/java/jdk1.8.0_221/jre/lib/amd64/server/libjvm.so<br> 4# 0x00007FBE7F8FA400 in /lib64/libc.so.6<br> 5# __memcmp_sse4_1 in /lib64/libc.so.6<br> 6# doris::FieldTypeTraits&lt;(doris::FieldType)13&gt;::cmp(void const*, void const*) at /home/zcp/repo_center/doris_release/doris/be/src/olap/types.h:1349<br> 7# doris::segment_v2::TypedZoneMapIndexWriter&lt;(doris::PrimitiveType)10&gt;::flush() at /home/zcp/repo_center/doris_release/doris/be/src/olap/rowset/segment_v2/zone_map_index.cpp:90<br> 8# doris::segment_v2::ScalarColumnWriter::finish_current_page() at /home/zcp/repo_center/doris_release/doris/be/src/olap/rowset/segment_v2/column_writer.cpp:683<br> 9# doris::segment_v2::ScalarColumnWriter::finish() at /home/zcp/repo_center/doris_release/doris/be/src/olap/rowset/segment_v2/column_writer.cpp:593<br>10# doris::segment_v2::VerticalSegmentWriter::write_batch() at /home/zcp/repo_center/doris_release/doris/be/src/olap/rowset/segment_v2/vertical_segment_writer.cpp:719<br>11# doris::SegmentFlusher::_add_rows(std::unique_ptr&lt;doris::segment_v2::VerticalSegmentWriter, std::default_delete&lt;doris::segment_v2::VerticalSegmentWriter&gt; &gt;&amp;, doris::vectorized::Block const*, unsigned long, unsigned long) at /home/zcp/repo_center/doris_release/doris/be/src/olap/rowset/segment_creator.cpp:183<br>12# doris::SegmentFlusher::flush_single_block(doris::vectorized::Block const*, int, long*) at /home/zcp/repo_center/doris_release/doris/be/src/olap/rowset/segment_creator.cpp:76<br>13# doris::SegmentCreator::flush_single_block(doris::vectorized::Block const*, int, long*) at /home/zcp/repo_center/doris_release/doris/be/src/olap/rowset/segment_creator.cpp:422<br>14# doris::BaseBetaRowsetWriter::flush_memtable(doris::vectorized::Block*, int, long*) at /home/zcp/repo_center/doris_release/doris/be/src/olap/rowset/beta_rowset_writer.cpp:489<br>15# doris::FlushToken::_do_flush_memtable(doris::MemTable*, int, long*) at /home/zcp/repo_center/doris_release/doris/be/src/olap/memtable_flush_executor.cpp:144<br>16# doris::FlushToken::_flush_memtable(std::unique_ptr&lt;doris::MemTable, std::default_delete&lt;doris::MemTable&gt; &gt;, int, long) in /opt/module/doris/be/lib/doris_be<br>17# doris::MemtableFlushTask::run() at /home/zcp/repo_center/doris_release/doris/be/src/olap/memtable_flush_executor.cpp:59<br>18# doris::ThreadPool::dispatch_thread() in /opt/module/doris/be/lib/doris_be<br>19# doris::Thread::supervise_thread(void*) at /home/zcp/repo_center/doris_release/doris/be/src/util/thread.cpp:499<br>20# start_thread in /lib64/libpthread.so.0<br>21# clone in /lib64/libc.so.6<br><br></code></pre></td></tr></table></figure><p>可以看出是<code>memcmp</code>导致的crash，这个就是doris自身的问题了。</p><p>现在这个问题已经提给doris官方了，不过官方会不会处理就不确定了，因为高版本已经没这个问题了。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ol><li>修复建表语句，避免<code>varchar(0)</code>这种非法的字段格式的出现。</li><li>升级doris，实测doris3.0版本没有此问题</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/alibaba/DataX/blob/master/introduction.md">dataX技术设计</a></p><p><a href="https://doris.apache.org/zh-CN/docs/data-operate/import/import-way/stream-load-manual">doris stream load机制</a></p><p><a href="https://github.com/apache/doris/issues/47684">提交的doris崩溃 bug</a></p>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clickhouse</tag>
      
      <tag>doris</tag>
      
      <tag>dataX</tag>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将我们的博客录入bing搜索引擎</title>
    <link href="/2025/01/22/site-bing-site-seo/"/>
    <url>/2025/01/22/site-bing-site-seo/</url>
    
    <content type="html"><![CDATA[<p>随着ChatGPT的加成，2024年，微软旗下的bing在pc端已经完全超过了百度，已经超过了半数。</p><p>所以，为了能有更多人访问我们的作品，我们也要考虑实现bing对我们的博客站点收录的问题了。<br><img src="/../../images/site/seo/202412bing-statcounter-in-china-pc.jpeg" alt="2024年12月中国pc端搜索引擎的市场占有率"></p><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>其实，搜索引擎是如何工作的呢？</p><p>在以前，搜索引擎会根据网页的链接情况来递归的对所有能http链接到的网页进行爬取， 后来为了限制爬虫，衍生出了robot协议和sitemap网站地图，用来主动高速搜索引擎，我有哪些东西你可以爬。</p><p>我们这里就利用sitemap网站地图的办法来实现bing收录我们的站点内容。</p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="创建sitemap-xml文件"><a href="#创建sitemap-xml文件" class="headerlink" title="创建sitemap.xml文件"></a>创建sitemap.xml文件</h2><p>我现在使用的hexo主题搭建的博客系统, 所以有现成的插件可以帮助我们生成sitemap.xml文件。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-generator-sitemap <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>虽然版本比较老了，但依旧能用。</p><p>还可以在<code>_config.yml</code>按如下配置调整：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 默认配置如下</span><br><span class="hljs-attr">sitemap:</span><br>  <span class="hljs-attr">path:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sitemap.xml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sitemap.txt</span><br>  <span class="hljs-attr">template:</span> <span class="hljs-string">./sitemap_template.xml</span><br>  <span class="hljs-attr">template_txt:</span> <span class="hljs-string">./sitemap_template.txt</span><br>  <span class="hljs-attr">rel:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如果不想某个文章被添加到sitemap中，可以在文章的front matter中添加<code>sitemap: false</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 不想加入sitemap的文章<br>date: 2025-01-22<br><span class="hljs-section">sitemap: false</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>安装配置完成后，在项目自动构建的时候，这个sitemap文件也就会自动生成了，无需额外操作，可以通过如下方式验证：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//your-blog-domain.com/sitemap.xml</span><br></code></pre></td></tr></table></figure><h2 id="bing站长后台添加网站"><a href="#bing站长后台添加网站" class="headerlink" title="bing站长后台添加网站"></a>bing站长后台添加网站</h2><p>打开bing的站点管理工具<a href="https://www.bing.com/webmasters">webmasters</a>页面，第一次打开需要登录。<br><img src="/../../images/site/seo/bing_tool_home.jpeg" alt="bing站点管理工具首页"><br>选择手动添加网站：<br><img src="/../../images/site/seo/bing_site_tool.png" alt="手动添加网站"></p><p>然后需要在我们的博客根目录下放置一个文件，来验证这个网站的有效性。<br><img src="/../../images/site/seo/bing_verify_site_method.png" alt="验证网站方式"><br>将上面的<code>BingSiteAuth.xml</code>下载下来放到自己网站的根目录下，几分钟后就可以验证成功了。</p><p>到此，我们的站点算是创建成功了。</p><h2 id="提交sitemap文件到bing"><a href="#提交sitemap文件到bing" class="headerlink" title="提交sitemap文件到bing"></a>提交sitemap文件到bing</h2><p>在左侧导航栏里选择<code>网站地图</code>，然后添加网站地图，这个时候就会用到上面生成的sitemap文件。<br><img src="/../../images/site/seo/bing_add_sitemap.png" alt="添加网站地图"><br>把上面验证过的sitemap地址输入，点击提交，就完事了。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>最后，在bing搜索框里输入<code>site:your-blog-domain.com</code>，如果能看到我们的博客，就说明我们的站点已经被bing收录了。</p><p>以后我们在写新的博客时，新的网页会在打包时自动添加到sitemap.xml中，然后bing会隔一段时间更新一下站点地图，这样我们新的文章就会被bing收录啦。</p><p>如此，一劳永逸，我们就可以安安心心的写文章啦。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap github地址</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>seo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo建站增加自己的评论模块</title>
    <link href="/2025/01/09/site-hexo-comment-feature/"/>
    <url>/2025/01/09/site-hexo-comment-feature/</url>
    
    <content type="html"><![CDATA[<h1 id="jekyll时代"><a href="#jekyll时代" class="headerlink" title="jekyll时代"></a>jekyll时代</h1><p>使用的是beaudar插件, 在更新到hexo-fluid 博客架构后仍然可以使用，<br>但是需要代码侵入式改造，不如fluid适配的评论体系更优雅，所以这次我们尝试一些其他的评论插件。</p><p>评论插件的挑选原则：</p><ul><li>免费：我的博客除了域名，全都是免费的，不可能为了一个评论模块而付费</li><li>易接入：最后是fluid主题支持的，不然还要侵入式改造代码</li><li>响应速度：希望评论模块快速响应</li><li>可匿名：可以匿名发表评论，注册制会极大的影响用户发言的积极性</li></ul><p>根据以上原则，我们对fluid官方支持的评论插件进行了筛选与评测：</p><h1 id="beaudar"><a href="#beaudar" class="headerlink" title="beaudar"></a>beaudar</h1><p>基于 GitHub Issues.博客的每次评论都会在github主站上生成一个issue，评论内容会以markdown格式保存在issue的评论区。<br>参考以前的文章：<a href="https://www.hancher.top/2022/09/09/site-beaudar-error/">beaudar评论插件安装</a></p><h1 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a><a href="https://gitalk.github.io/">Gitalk</a></h1><p>基于 GitHub Issues. 通beaudar一样。</p><p>这种方式完全免费，且适合那些通过github pages 部署的博客。</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ol><li><a href="https://github.com/settings/applications/new">点击这里</a>申请github 的oauth授权应用<br><img src="/images/site/comment/github_oauth_app_register.png" alt="github oauth 注册"><br>按图中配置即可，地址写自己博客的地址，其他的随便写，后续还可以改。  </li><li>创建app的密钥<br><img src="/images/site/comment/github_oauth_app_gen_client_secret.png" alt="授权app的id和密钥">   </li><li><code>_config.yml</code>里撇嘴gitalk的配置<br><strong>fluid配置：</strong></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span>  <span class="hljs-comment"># 开启评论</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">gitalk</span> <span class="hljs-comment"># 选择评论插件类型</span><br><br><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">clientID:</span> <span class="hljs-string">xxxxxxxxx</span>           <span class="hljs-comment"># github 应用id，必须</span><br>  <span class="hljs-attr">clientSecret:</span> <span class="hljs-string">6fcbc2edcfxxx</span>   <span class="hljs-comment"># github 应用密钥，必须</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">hanchers.github.io</span>      <span class="hljs-comment"># github 仓库， 必须</span><br>  <span class="hljs-attr">owner:</span> <span class="hljs-string">hancher</span>                <span class="hljs-comment"># github 仓库所有者， 必须</span><br>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;admin&#x27;</span>]              <span class="hljs-comment"># github 仓库有写权限的账号</span><br>  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>               <span class="hljs-comment"># 语言</span><br>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]            <span class="hljs-comment"># GitHub issue 的标签。</span><br>  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span>                   <span class="hljs-comment"># 每页大小</span><br>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span>          <span class="hljs-comment"># 评论排序方式， last为按评论创建时间倒叙，first为按创建时间正序</span><br>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 类似Facebook评论框的全屏遮罩效果.</span><br>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment"># 如果当前页面没有相应的 isssue 且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面</span><br>  <span class="hljs-comment"># 反向代理，为了支持 CORS. 默认的不可用，需要自己配置，参考下述文档</span><br>  <span class="hljs-comment"># https://github.com/gitalk/gitalk/issues/429</span><br>  <span class="hljs-comment"># https://github.com/Zibri/cloudflare-cors-anywhere</span><br>  <span class="hljs-attr">proxy:</span> <span class="hljs-string">https://shielded-brushlands-08810.herokuapp.com/https://github.com/login/oauth/access_token</span> <span class="hljs-comment"># 有些人搭建的代理</span><br><span class="hljs-comment">#  proxy: https://cors-server.68756978.xyz/github_access_token  # 备用代理地址1</span><br><br></code></pre></td></tr></table></figure><p>效果如图，然后我们就可以评论了<br><img src="/images/site/comment/gitalk_init_show.png" alt="gitalk评论效果图"></p><h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><ol><li>需要配置代理地址，这里有一定的开发成本，如果使用开源的，不稳定性还很高（放弃选择的主要原因）。</li><li>使用上需要注册github</li><li>响应有点慢</li></ol><h1 id="utterances"><a href="#utterances" class="headerlink" title="utterances"></a><a href="https://utteranc.es/">utterances</a></h1><p>同样也是基于GitHub Issues实现，原理通上面的一样</p><h2 id="安装过程-1"><a href="#安装过程-1" class="headerlink" title="安装过程"></a>安装过程</h2><p>同beaudar一样，<a href="https://github.com/apps/utterances">点击这里在github上安装应用</a>。</p><p>选择你的github博客仓库。<br><img src="/images/site/comment/utterances_install.png" alt="utterances安装选择"><br>安装好后，在<code>_config.yml</code>里配置utterances的配置即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span>  <span class="hljs-comment"># 开启评论</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">gitalk</span> <span class="hljs-comment"># 选择评论插件类型</span><br><br><span class="hljs-comment"># 其他配置可以参考官网</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">Hanchers/Hanchers.github.io</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br></code></pre></td></tr></table></figure><p>效果：<br><img src="/images/site/comment/utterances_show.png" alt="utterances效果"></p><h2 id="评价-1"><a href="#评价-1" class="headerlink" title="评价"></a>评价</h2><ol><li>utterances整体上比gitalk要好一些，安装简单很多，且不用代理。</li><li>完全依赖github，这一点和beaudar一样，能满足我评价数据持久化的需求。</li><li>不幸的是，响应上，同beaudar一样，都比较慢</li><li>fluid主题支持，安装很简单。</li><li>评价功能使用比较少，且不喜欢折腾的，这款插件值得推荐。</li></ol><h1 id="giscus"><a href="#giscus" class="headerlink" title="giscus"></a><a href="https://giscus.app/zh-CN">giscus</a></h1><p>giscuss是利用 GitHub Discussions 实现的评论系统。</p><p>同上级几个评论插件不同的是，前面的是利用的GitHub Issues，而giscuss是利用GitHub Discussions。<br><img src="/images/site/comment/github_discussions.png" alt="github讨论模块"><br>giscus 加载时，会使用 GitHub Discussions 搜索 API 根据选定的映射方式（如 URL、pathname、title 等）来查找与当前页面关联的 discussion。如果找不到匹配的 discussion，giscus bot 就会在第一次有人留下评论或回应时自动创建一个 discussion。</p><p>访客如果想要评论，必须按照 GitHub OAuth 流程授权 giscus app 代表他发布，或者可以直接在 GitHub Discussion 里评论。你可以在 GitHub 上管理评论。</p><h2 id="安装过程-2"><a href="#安装过程-2" class="headerlink" title="安装过程"></a>安装过程</h2><ol><li><p>启用github仓库的Discussions功能</p></li><li><p><a href="https://github.com/apps/giscus">点击这里</a>安装giscus应用，然后选择你开启讨论模块的仓库</p></li><li><p><a href="https://giscus.app/zh-CN">点击这里</a>按下图配置仓库名称和你的评论所有类型<br><img src="/images/site/comment/giscus_config.png" alt="giscus配置"></p></li><li><p>giscus 会自动从github获取对应的id<br><img src="/images/site/comment/giscus_config_show.png" alt="giscus配置结果.png"></p></li><li><p>拿到id后，我们就可以在<code>_config.yml</code>配置了</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span>  <span class="hljs-comment"># 开启评论</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">giscus</span> <span class="hljs-comment"># 选择评论插件类型</span><br><br><span class="hljs-comment"># 其他配置可以参考官网</span><br><span class="hljs-attr">giscus:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">Hanchers/Hanchers.github.io</span><br>  <span class="hljs-attr">repo-id:</span> <span class="hljs-string">Mxxx</span><br>  <span class="hljs-attr">category:</span> <span class="hljs-string">Q&amp;A</span><br>  <span class="hljs-attr">category-id:</span> <span class="hljs-string">Dxxxx</span><br>  <span class="hljs-attr">theme-light:</span> <span class="hljs-string">light</span><br>  <span class="hljs-attr">theme-dark:</span> <span class="hljs-string">dark</span><br>  <span class="hljs-attr">mapping:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">reactions-enabled:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">emit-metadata:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">input-position:</span> <span class="hljs-string">top</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><p>效果：<br><img src="/../../images/site/comment/giscus_show.png" alt="giscus效果展示.png"></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>Q：前面都配置好后，发现评论模块加载不出来，打开F12,发现请求接口报错了：<code>Discussion not found</code>.<br>A: 很多人都遇到过这个问题，解决办法就是去仓库下手动加一条评论，等一会就好了。个人理解这里是github延迟导致的。</p><h2 id="评价-2"><a href="#评价-2" class="headerlink" title="评价"></a>评价</h2><ol><li>整个安装过程挺丝滑的</li><li>数据完全托管到github，完全满足我的数据持久化和免费存储的需求</li><li>效果也不错，响应速度中等</li><li>还支持表情，挺惊喜的</li><li>唯一的问题就是发表评论需要github登录，无法匿名评论</li><li>基于github托管数据的插件里最推荐此款</li></ol><p><strong>至此，基于github,完全免费的评论插件都比较完了，接下来就是需要第三方网站托管数据或者自建服务托管数据的评论插件了。</strong></p><h1 id="livere"><a href="#livere" class="headerlink" title="livere"></a><a href="https://www.livere.com/">livere</a></h1><p>来必力，没想到是一个韩国的网站，用来做评论数据托管等内容，需要注册。</p><p>来必力各版本的功能比较（2025-01-09）：<br><img src="/images/site/comment/livere_version_compare.png" alt="livere版本比较"></p><h2 id="安装过程-3"><a href="#安装过程-3" class="headerlink" title="安装过程"></a>安装过程</h2><p><a href="https://www.livere.com/">点击这里注册livere</a>  </p><p>注册并登录成功后，在这个页面选择city模块，然后点击“安装使用”<br><img src="/images/site/comment/livere_city_install.png" alt="livere city 版本安装"></p><p>安装成功后，会得到一个脚本注入代码。<br><img src="/images/site/comment/livere_script.png" alt="livere安装代码"><br>将上面的data-uid复制出来放到<code>_config.yml</code>配置里即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span>  <span class="hljs-comment"># 开启评论</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">gitalk</span> <span class="hljs-comment"># 选择评论插件类型</span><br><br><span class="hljs-comment"># 其他配置可以参考官网</span><br><span class="hljs-attr">livere:</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">&#x27;your uid&#x27;</span><br></code></pre></td></tr></table></figure><p>效果：<br><img src="/images/site/comment/livere_show.png" alt="livere评论模块效果"><br>但是点击后，会弹出第三方账号登录窗口。<br><img src="/images/site/comment/livere_show_register.png" alt="提示注册"></p><h2 id="评价-3"><a href="#评价-3" class="headerlink" title="评价"></a>评价</h2><ol><li>免费，数据能够持久保存</li><li>韩国网站，注册的过程中都是韩文，不太友好</li><li>响应速度上，有点慢，但是比utterances快一点</li><li>页面有点丑</li><li>需要qq等账号注册才能使用，不太推荐</li></ol><h1 id="畅言"><a href="#畅言" class="headerlink" title="畅言"></a><a href="https://changyan.kuaizhan.com/">畅言</a></h1><p>畅言，一个国内比较老的评论插件，需要注册，可以免费存储数据。</p><h2 id="安装过程-4"><a href="#安装过程-4" class="headerlink" title="安装过程"></a>安装过程</h2><ol><li>点击官网，注册一个账号</li><li>去官网工作台，创建一个【畅言云评】的应用</li><li>进入应用详情，在后台总览里可以看到应用的id和密钥<br><img src="/../../images/site/comment/changyan_appid.png" alt="畅言云评id和密钥"></li></ol><p>将上面的id和密钥复制出来，放到<code>_config.yml</code>配置里即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span>  <span class="hljs-comment"># 开启评论</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">changyan</span> <span class="hljs-comment"># 选择评论插件类型</span><br><br><span class="hljs-comment"># 其他配置可以参考官网</span><br><span class="hljs-attr">changyan:</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">&#x27;id&#x27;</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">&#x27;secret&#x27;</span><br></code></pre></td></tr></table></figure><p>效果：<br><img src="/../../images/site/comment/changyan_show.png" alt="畅言云评效果"></p><h2 id="评价-4"><a href="#评价-4" class="headerlink" title="评价"></a>评价</h2><ol><li>畅言的网站比较老了，但是注册过程还是很简单的</li><li>从后台来看，对于评论的功能支持还是挺完善的，可以控评，也有很多其他的插件</li><li>可以免费存储数据</li><li>发布评论需要登录，门槛太高，pass.</li></ol><h1 id="twikoo插件"><a href="#twikoo插件" class="headerlink" title="twikoo插件"></a><a href="https://twikoo.js.org/quick-start.html">twikoo插件</a></h1><p>一个简洁、安全、免费的静态网站评论系统。</p><ul><li>免费搭建（使用云开发 &#x2F; Vercel &#x2F; 私有服务器作为评论后台）</li><li>简单部署（支持云开发 &#x2F; Vercel 一键部署）</li></ul><p>这是一款私有化部署的评论插件，可以在自己的服务器上部署，官方也提供了一整套云部署的免费方案，可以自行选择。<br><img src="/../../images/site/comment/twioo_install_choose.png" alt="twikoo的N种云部署方式"></p><p>因为是私有化部署的方案，这就涉及到数据存储的问题，官方提供的方案是使用mongodb的免费存储服务，需要自行注册。   </p><h2 id="安装过程-5"><a href="#安装过程-5" class="headerlink" title="安装过程"></a>安装过程</h2><p>无论哪一种方案都设计到mongodb数据库的申请，所以第一步就是要申请mongodb免费版。</p><h3 id="mongodb申请"><a href="#mongodb申请" class="headerlink" title="mongodb申请"></a>mongodb申请</h3><p>参考<a href="https://twikoo.js.org/mongodb-atlas.html">官方文章</a>,写的很详细了。</p><h3 id="netlify安装"><a href="#netlify安装" class="headerlink" title="netlify安装"></a>netlify安装</h3><p>因为网速和流量的原因，我选择的是netlify做我的评论插件托管云服务。</p><ol><li>打开 <a href="https://github.com/twikoojs/twikoo-netlify">twikoojs&#x2F;twikoo-netlify</a> 点击 fork 将仓库 fork 到自己的账号下,后面netlify部署的时候会用到这个仓库。</li><li><a href="https://app.netlify.com/">点击这里</a> 注册netlify账号，可能需要翻墙，使用github账号登录。</li><li>netlify注册的时候可以选择仅授权上面fork的【twikoo-netlify】库</li><li>进入netlify控制台，点击【import an existing site】，然后选择上面fork的【twikoo-netlify】库.<br><img src="/../../images/site/comment/netlify_home.png" alt="netlify新建site页面"></li><li>配置环境变量，配置你的域名和mongodb的<code>MONGODB_URI</code>，值就是mongodb 申请里获得的nodejs 连接url<br><img src="/../../images/site/comment/netlify_add_mongo_url.png" alt="配置mongodb环境变量"></li><li>点击deploy，等待部署完成。 然后请求你配置的域名<code>https://xxxxx.netlify.app/</code> ，如果看到如下内容，说明部署成功。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Twikoo 云函数运行正常，请参考 https://twikoo.js.org/frontend.html 完成前端的配置&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.6.41&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="7"><li>配置完成后，就可以在<code>_config.yml</code>配置twikoo了。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span>  <span class="hljs-comment"># 开启评论</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">twikoo</span> <span class="hljs-comment"># 选择评论插件类型</span><br><br><span class="hljs-comment"># 其他配置可以参考官网</span><br><span class="hljs-attr">twikoo:</span><br>  <span class="hljs-attr">envId:</span> <span class="hljs-string">https://xxxxxxxxxx.netlify.app/.netlify/functions/twikoo</span><br>  <span class="hljs-attr">region:</span> <span class="hljs-string">ap-shanghai</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br></code></pre></td></tr></table></figure><p>效果：<br><img src="/../../images/site/comment/twikoo_netlify_show.png" alt="twikoo效果"></p><h3 id="其他部署方式"><a href="#其他部署方式" class="headerlink" title="其他部署方式"></a>其他部署方式</h3><p><a href="https://blog.zhheo.com/p/2e6bbbd0.html">基于腾讯云的twikoo部署方案</a>， 注意因为腾讯云免费额度已经没有了，这个方案已经失效，仅供学习参考。</p><h2 id="后台配置"><a href="#后台配置" class="headerlink" title="后台配置"></a>后台配置</h2><p>twikoo内嵌了一套后台配置页面，可以配置评论的显示，邮件提醒、垃圾内容过滤等内容。</p><p>入口就是刷新旁边的配置按钮。<br><img src="/../../images/site/comment/twikoo_config_entry.png" alt="twikoo_config_entry.png"><br>第一次打开配置页面会要求你配置账号密码，这个一定要记好，不然找回会很麻烦。<br>配置好密码后，在后台就可以对评论做一些特殊配置了。</p><p>这里就对一些主要的配置进行介绍。</p><ul><li>SITE_NAME：你的网站名称</li><li>SITE_URL：你的网站地址</li><li>BLOGGER_NICK： 你的博客昵称</li><li>BLOGGER_EMAIL：博主邮箱，当评论邮箱匹配到这个邮箱，会显示为博主。 当有新增评论是，也会给这个邮箱发邮件。</li><li>MASTER_TAG：博主显示名称</li><li>HIDE_ADMIN_CRYPT：隐藏管理面板入口的暗号，只有在“昵称”一栏输入相同的“暗号”时，管理面板入口才会显示。这个暗号一定要牢记。</li><li>SHOW_IMAGE：是否支持评论图片</li><li>IMAGE_CDN：插入图片所使用的图床</li><li>SHOW_EMOTION：是否支持表情</li><li>SHOW_UA：是否显示用户系统和浏览器</li><li>SHOW_REGION：是否显示用户 IP 属地到省</li><li>SENDER_EMAIL：发送邮件的邮箱地址，为了不和日常的邮箱干扰，这里我又新申请了一个。<blockquote><p>说明一下，当有新评论时，会发邮件给博主。就是这个 SENDER_EMAIL 发送给 BLOGGER_EMAIL</p></blockquote></li><li>SENDER_NAME： 新评论时的主题</li><li>SMTP_SERVICE： 邮件发送的 SMTP 服务商</li><li>SMTP_USER： 和SENDER_EMAIL一样</li><li>SMTP_PASS： 邮件服务器的账号密码，可以到你的邮箱设置里查看，在开启你的smtp是会提示。<br>最后会有一个邮件测试，可以填上自己的邮箱去验证一下。</li></ul><p>这些配置在保存后，会在mongodb里创建一个表，用来存储这些配置。</p><h2 id="评价-5"><a href="#评价-5" class="headerlink" title="评价"></a>评价</h2><ol><li>因为是私有化部署，过程比较复杂</li><li>整个过程都是免费的资源，满足我的免费持久化需求</li><li>评论可以匿名，不用注册，比较友好</li><li>页面也比较美观，支持评论的评论，最终选择了这个。</li></ol><h1 id="最后pass掉的插件"><a href="#最后pass掉的插件" class="headerlink" title="最后pass掉的插件"></a>最后pass掉的插件</h1><ul><li>Valine: 基于 LeanCloud，这个有免费的存储空间。但是国内的LeanCloud 账号需要域名备案，要使用身份证等认证，接入很麻烦，遂放弃。</li><li>Waline: 从 Valine 衍生而来，放弃原因同上</li><li>Disqus: 国内用户直接使用容易被墙，直接放弃</li><li>remark42: 需要自建托管服务，直接放弃</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>折腾了两天，终于把几款评论插件验证完了。</p><p>整体来看，有两款效果比较好，分别是twikoo和giscus。</p><ul><li>giscus: 安装比较简单，数据托管在github, 但评论需要github账号登录，适合那些快速上手的博主。</li><li>twikoo: 安装比较复杂，需要申请mongodb数据库，申请云服务免费资源，适合那些喜欢折腾的博主。</li></ul><h1 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h1><ul><li><input disabled="" type="checkbox"> 等我的域名备案成功了，再尝试一下valine和waline</li><li><input disabled="" type="checkbox"> 找个时间试一下twikoo的私有化部署方式</li></ul><p>最后，您觉得还有什么要补充的吗？</p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>评论插件</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jekyll迁移到Hexo博客架构全过程</title>
    <link href="/2025/01/07/site-hexo-from-jekyll/"/>
    <url>/2025/01/07/site-hexo-from-jekyll/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要迁移到hexo"><a href="#为什么要迁移到hexo" class="headerlink" title="为什么要迁移到hexo"></a>为什么要迁移到hexo</h1><h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架（使用NodeJs）。 Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="为什么选择了Hexo"><a href="#为什么选择了Hexo" class="headerlink" title="为什么选择了Hexo"></a>为什么选择了Hexo</h2><ol><li>好看，好看，好看</li><li>其中的归档功能做的很好，支持分组、也支持标签</li><li>很好的集成了网站统计相关的功能</li></ol><h1 id="迁移过程"><a href="#迁移过程" class="headerlink" title="迁移过程"></a>迁移过程</h1><h2 id="Hexo环境搭建"><a href="#Hexo环境搭建" class="headerlink" title="Hexo环境搭建"></a>Hexo环境搭建</h2><ol><li>首先确保安装了nodejs和git<br>因为 Hexo 是基于 nodejs 的，所以需要先安装 nodejs，这里我使用的是 nvm 管理 nodejs 版本，安装好 nvm 后，执行 nvm install nodejs 安装 nodejs。</li></ol><p>我安装的是2025年1月最新lts版本的nodejs: <code>v22.12.0</code></p><ol start="2"><li>安装Hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>因为我的nodejs是最新版本，所以我的hexo版本是也是当前最新版本：<code> 7.3.0</code></p><h2 id="创建Hexo博客网站"><a href="#创建Hexo博客网站" class="headerlink" title="创建Hexo博客网站"></a>创建Hexo博客网站</h2><p>选择一个你想创建项目代码的位置，执行以下命令创建Hexo博客网站：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 选择合适的nodejs 版本</span><br>nvm use v22.12.0<br><span class="hljs-comment"># 创建项目</span><br>hexo init my_blod<br><span class="hljs-built_in">cd</span> my_blod<br><span class="hljs-comment"># 初始化依赖</span><br>npm install<br></code></pre></td></tr></table></figure><p>然后我们就得到了一个默认的博客项目<code>my_blog</code>，其中的package.json文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo-site&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo generate&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;clean&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deploy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo deploy&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo server&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hexo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7.3.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;hexo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.3.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-generator-archive&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-generator-category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-generator-index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-generator-tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-renderer-ejs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-renderer-marked&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-renderer-stylus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-theme-fluid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.9.8&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-theme-landscape&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.0.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>到了这一步，我们就可以启动最原始版本的项目了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> my_blod<br>hexo server<br><span class="hljs-comment"># or </span><br>npm run server<br></code></pre></td></tr></table></figure><p>然后访问 <code>http://localhost:4000</code> 就可以看到默认的博客了。<br><img src="/images/site/hexo_raw_init.png" alt="hexo默认主题页面"><br>官方给我们创建了一个<code>hello world</code>的博客. 我们可以参考这个来写我们自己的博客了。</p><p>常用的hexo命令参考<a href="https://hexo.io/zh-cn/docs/commands">这里</a></p><h2 id="安装我喜欢的主题Fluid"><a href="#安装我喜欢的主题Fluid" class="headerlink" title="安装我喜欢的主题Fluid"></a>安装我喜欢的主题<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">Fluid</a></h2><p>当然这里可以使用任何你喜欢的主题，安装模式大同小异。</p><ol><li>安装Fluid主题的最新版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> my_blod<br>npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><ol start="2"><li>配置主题<br> 如下修改 Hexo 博客目录中的 _config.yml：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建【关于页】<br> 首次使用主题的「关于页」需要手动创建：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 &#x2F;source&#x2F;about&#x2F;index.md，添加 <strong>layout</strong> 属性，。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 标题<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><blockquote><p>layout: about 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p></blockquote><p><img src="/images/site/hexo_fluid_init.png" alt="fluid主题启动后的博客页面"></p><h1 id="迁移jekyll博客文章"><a href="#迁移jekyll博客文章" class="headerlink" title="迁移jekyll博客文章"></a>迁移jekyll博客文章</h1><h2 id="文章迁移"><a href="#文章迁移" class="headerlink" title="文章迁移"></a>文章迁移</h2><ol><li>把 _posts 文件夹内的所有文件复制到 source&#x2F;_posts 文件夹</li><li>在 _config.yml 中修改 new_post_name 参数</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:year-:month-:day-:title.md</span><br></code></pre></td></tr></table></figure><ol start="3"><li>如果不想使用步骤2，也可以把所有的文章的文件名的年月日前缀去掉，也可以（作为轻度洁癖患者，我选的这种方式）。</li></ol><h2 id="图片迁移"><a href="#图片迁移" class="headerlink" title="图片迁移"></a>图片迁移</h2><p>原先我的所有的图片资源都是在项目的根目录下的 <code>/images</code> 路径下，然后在文章里通过markdown的图片引用方式引用。</p><p>迁移到hexo后，只需将<code>images</code>目录 移动到 <code>source</code> 路径下，其他的都不用动，图片就可以自动解析了。</p><p>因为hexo 会将source目录下的所有文件都移动到网站的根路径下，所以图片的最终引用地址是一样的。</p><h2 id="网站配置修改"><a href="#网站配置修改" class="headerlink" title="网站配置修改"></a>网站配置修改</h2><p>通用hexo配置按照如下配置修改 <code>_config.yml</code> 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 网站名称</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">寒澈笔记</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;一个程序员眼中的世界&#x27;</span><br><span class="hljs-comment"># 网站路径</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://www.hancher.top</span><br></code></pre></td></tr></table></figure><p>fluid主题配置特性配置修改如下文件<code>_config.fluid.yml</code>， 会根据主题配置自动选择相应主题的配置。<br>而且这里的配置优先级最高，会覆盖<code>_config.yml</code>配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># fluid 主题配置</span><br><br><span class="hljs-comment"># 网站配置</span><br><span class="hljs-comment">## 头部</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-comment"># 博客标题</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">寒澈笔记</span><br>  <span class="hljs-comment"># 可以自定义导航栏</span><br><span class="hljs-comment">#  menu:</span><br><span class="hljs-comment">#    - &#123; key: &#x27;home&#x27;, link: &#x27;/&#x27;, icon: &#x27;iconfont icon-home-fill&#x27; &#125;</span><br><span class="hljs-comment">#    - &#123; key: &#x27;tag&#x27;, link: &#x27;/tags/&#x27;, icon: &#x27;iconfont icon-tags-fill&#x27; &#125;</span><br><span class="hljs-comment">#    - &#123; key: &#x27;about&#x27;, link: &#x27;/about/&#x27;, icon: &#x27;iconfont icon-user-fill&#x27;, name: &#x27;联系我&#x27; &#125;</span><br><br><span class="hljs-comment">## 底部</span><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>  <span class="hljs-comment"># 可选 leancloud | busuanzi  根据自己需求选择</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br><br><span class="hljs-attr">force_https:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 强制https</span><br><br><span class="hljs-comment"># 内容配置</span><br><span class="hljs-comment">## 首页</span><br><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">人生总有一些东西值得回忆</span><br><br><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;寒澈&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;一名喜欢文史哲的程序员&quot;</span><br>  <span class="hljs-attr">icons:</span>  <span class="hljs-comment"># 不要把 icon 注释掉，否则无法覆盖配置</span><br>   <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-github-fill&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://github.com/Hanchers/hanchers.github.io&#x27;</span> &#125;<br>   <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-zhihu-fill&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://www.zhihu.com/people/bh.zhi&#x27;</span> &#125;<br>   <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-wechat2-fill&#x27;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&#x27;/images/about/see-history.jpg&#x27;</span> &#125;<br><br><span class="hljs-comment">## 文章</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-attr">author:</span>  <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">date:</span>  <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;dddd, MMMM Do YYYY, h:mm a&quot;</span>  <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>    <span class="hljs-attr">wordcount:</span>  <span class="hljs-comment"># 字数统计</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    <span class="hljs-attr">min2read:</span>  <span class="hljs-comment"># 阅读时间</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span><br>    <span class="hljs-attr">views:</span>  <span class="hljs-comment"># 阅读次数</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>  <span class="hljs-comment"># 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br>  <span class="hljs-attr">copyright:</span>  <span class="hljs-comment"># 版权声明</span><br>    <span class="hljs-attr">license:</span> <span class="hljs-string">&#x27;BY-NC-ND&#x27;</span><br>    <span class="hljs-attr">update_date:</span>   <span class="hljs-comment"># 来源 front-matter 里 updated 字段</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><h1 id="github-pages-配置修改"><a href="#github-pages-配置修改" class="headerlink" title="github pages 配置修改"></a>github pages 配置修改</h1><p>我是用的私有项目，然后通过github action的方式来自动编译部署github pages的， 具体可以参考我的历史文章，有记录。</p><p>这里要做的是在github 上重新配置hexo环境和 打包脚本。</p><p>进入本地项目的 <code>.github/workflows</code>目录下，删除以前的workflow文件，然后新建一个文件，文件名随意，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ci name</span><br><span class="hljs-comment"># ci 脚本名称</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">site</span> <span class="hljs-string">to</span> <span class="hljs-string">public</span> <span class="hljs-string">github</span> <span class="hljs-string">repos</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-comment"># Runs on pushes targeting the default branch</span><br>  <span class="hljs-comment"># 当代码 push 到 main 分支时, 执行该脚本</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br><br>  <span class="hljs-comment"># Allows you to run this workflow manually from the Actions tab</span><br>  <span class="hljs-comment"># 允许你 手动执行 这个脚本</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><br><span class="hljs-comment"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages</span><br><span class="hljs-comment"># GITHUB_TOKEN 的操作权限</span><br><span class="hljs-attr">permissions:</span><br>  <span class="hljs-attr">contents:</span> <span class="hljs-string">read</span><br>  <span class="hljs-attr">pages:</span> <span class="hljs-string">write</span><br>  <span class="hljs-attr">id-token:</span> <span class="hljs-string">write</span><br><br><span class="hljs-comment"># Allow one concurrent deployment</span><br><span class="hljs-attr">concurrency:</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">&quot;pages&quot;</span><br>  <span class="hljs-attr">cancel-in-progress:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># job 执行任务, 可以有多个, 默认并行运行, 可以通过 needs 关键字来设置依赖的其他 jobs</span><br><span class="hljs-comment"># step : 任务下的执行步骤, 一个job 会有多个步骤</span><br><span class="hljs-comment"># 操作:  一个step 下可以执行多个操作, 通常一行脚本为一个操作</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-comment"># Build job</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout版本</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v4</span><br>      <span class="hljs-comment"># 准备ruby 环境</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">使用Node：</span> <span class="hljs-string">v22.12.0</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-comment"># Examples: 20, 18.19, &gt;=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node</span><br>          <span class="hljs-comment"># Ref: https://github.com/actions/setup-node#supported-version-syntax</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;22.12&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">缓存</span> <span class="hljs-string">NPM</span> <span class="hljs-string">依赖</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">安装npm依赖</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">构建博客内容</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">更新博客网站到public目录</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-pages-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">./public</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">部署_site到博客网站仓库</span><br>        <span class="hljs-attr">working-directory:</span> <span class="hljs-string">./public</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git init</span><br><span class="hljs-string">          git checkout -b main</span><br><span class="hljs-string">          git add -A</span><br><span class="hljs-string">          git -c user.name=&#x27;hancher&#x27; -c user.email=&#x27;hanchers@outlook.com&#x27; commit -m &#x27;update blog&#x27; </span><br><span class="hljs-string">          git push &quot;https://$&#123;&#123;github.actor&#125;&#125;:$&#123;&#123;secrets.PUB_BLOG&#125;&#125;@github.com/Hanchers/hanchers.github.io&quot; HEAD:main -f -q</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>如果不是私有项目部署的话，使用官方的配置即可。官方配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">博客部署</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span> <span class="hljs-comment"># default branch</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># If your repository depends on submodule, please see: https://github.com/actions/checkout</span><br>          <span class="hljs-attr">submodules:</span> <span class="hljs-string">recursive</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">20</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-comment"># Examples: 20, 18.19, &gt;=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node</span><br>          <span class="hljs-comment"># Ref: https://github.com/actions/setup-node#supported-version-syntax</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;20&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">NPM</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">Pages</span> <span class="hljs-string">artifact</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-pages-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">./public</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">needs:</span> <span class="hljs-string">build</span><br>    <span class="hljs-attr">permissions:</span><br>      <span class="hljs-attr">pages:</span> <span class="hljs-string">write</span><br>      <span class="hljs-attr">id-token:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">github-pages</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.deployment.outputs.page_url</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Pages</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">deployment</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/deploy-pages@v4</span><br></code></pre></td></tr></table></figure><p>然后就可以到 hanchers.github.io 仓库下查看博客内容是否更新成功了。</p><p>如果博客内容更新了，就可以安装你的博客地址去访问博客了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/">hexo 建站官方文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/start">fluid主题官方文档</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/migration">jekyll博客迁移到hexo</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025年博客更新计划</title>
    <link href="/2025/01/03/site-plan-in-2025/"/>
    <url>/2025/01/03/site-plan-in-2025/</url>
    
    <content type="html"><![CDATA[<h1 id="2025年博客更新计划"><a href="#2025年博客更新计划" class="headerlink" title="2025年博客更新计划"></a>2025年博客更新计划</h1><p>2024年已经过去，2025年已经到来。</p><p>在过去的一年了，因为经历了很多重大的事情，比如换工作、比如结婚、再比如公众号等原因，导致这个博客更新的频率比较慢。</p><p>现在，2025年了，新的开始，我也打算重新恢复博客的更新计划，并制定一些规划，既是我这一年努力的方向，也方便在2025年末的时候回来复盘。</p><h1 id="更新计划"><a href="#更新计划" class="headerlink" title="更新计划"></a>更新计划</h1><h2 id="网站部分"><a href="#网站部分" class="headerlink" title="网站部分"></a>网站部分</h2><ul><li><input checked="" disabled="" type="checkbox"> 现在的主题感觉有点丑，而且在文档归档方面有点不足，看到一个新的<a href="https://github.com/fluid-dev/hexo-theme-fluid?tab=readme-ov-file">主题</a>很喜欢，计划改造一下，可能会伤筋动骨</li><li><input disabled="" type="checkbox"> 彻底解决国内访问本网站的问题，目前发现的<a href="https://github.com/xingpingcn/enhanced-FaaS-in-China">参考文章</a>,有空研究一下</li><li><input checked="" disabled="" type="checkbox"> 研究一下，如何让博客拥有<strong>更新时间</strong>的功能,记录我对博客内容的修改</li><li><input disabled="" type="checkbox"> 为了加快网站的访问速度，考虑引入图床功能</li><li><input disabled="" type="checkbox"> 将上述改造整理成文档，并分享到博客</li></ul><h2 id="内容部分"><a href="#内容部分" class="headerlink" title="内容部分"></a>内容部分</h2><ul><li><input disabled="" type="checkbox"> 博客的定位从纯技术博客，变更为一个技术+生活类型模块，增加一些非技术类的内容</li><li><input disabled="" type="checkbox"> 我的部分改造升级，打通我的所有的内容生态体系，提升我的个人品牌</li><li><input disabled="" type="checkbox"> 计划开发一套个人的小程序，并记录小程序上线的全过程</li><li><input disabled="" type="checkbox"> 增加一些收集的资源分享功能，开源分享的精神总要有人来继承</li><li><input disabled="" type="checkbox"> 技术方面，除了日常问题的总结外，继续向上游理论部分探索</li></ul><h1 id="计划完成"><a href="#计划完成" class="headerlink" title="计划完成"></a>计划完成</h1><ul><li>2025年01月11日 完成了博客从jekyll 到 hexo 的改造，同时支持了更新时间的显示</li></ul><h1 id="生命不息，折腾不止"><a href="#生命不息，折腾不止" class="headerlink" title="生命不息，折腾不止"></a>生命不息，折腾不止</h1><p>发现我就是一个喜欢折腾的人</p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>更新计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西部数据提供免费版Paragon实现与mac电脑的读写</title>
    <link href="/2024/12/30/life-ntfs-for-mac-free/"/>
    <url>/2024/12/30/life-ntfs-for-mac-free/</url>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>俗套的现象：买了一个西部数据的移动硬盘，然后又买了一个mac电脑，将硬盘插入到电脑后发现硬盘里的数据可以读，但是无法将电脑里的文件写入。</p><p>其实本质上的原因就是 wb的硬盘是ntfs格式的, mac电脑不支持ntfs格式的读写.</p><p>本人电脑：macbook pro m1版   </p><p>系统版本：macos 14</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>如果为了保持和windows系统的兼容性，wb的硬盘必须使用ntfs格式，那么通过安装ntfs转换软件也能实现。mac应用商店里有很多这种软件，但是要收费。</p><p>应用商店之外常用的软件就是 <code>uxera</code>和<code>Paragon</code>，也要收费。</p><p>后来找了好久，在西部数据的官方帖子上找到一个免费实现的法子，原来西部数据官方也提供了一套mac版读写数据的驱动。</p><p>以下是官方帖子的链接：<br><a href="https://support-eu.wd.com/app/answers/detailweb/a_id/34871/~/external-drive%3A-paragon-ntfs-driver-for-mac">Steps to Install Paragon NTFS Driver for macOS for WD and SanDisk Professional</a></p><h3 id="大概安装步骤如下："><a href="#大概安装步骤如下：" class="headerlink" title="大概安装步骤如下："></a>大概安装步骤如下：</h3><ol><li><p>下载驱动<br><a href="https://downloads.wdc.com/wdapp/Paragon_NTFS_Driver_for_Mac.zip">Paragon_NTFS_Driver_for_Mac</a><br>解压后双击软件开始安装。</p></li><li><p>选择:安装ntfs for mac<br><img src="/images/others/ntfs_for_mac_1.png" alt="s1"><br>然后接着按照步骤一直下一步就可以了<br><img src="/images/others/ntfs_for_mac_2.png" alt="s2"><br><img src="/images/others/ntfs_for_mac_3.png" alt="s3"><br><img src="/images/others/ntfs_for_mac_4.png" alt="s4"><br><img src="/images/others/ntfs_for_mac_5.png" alt="s5"><br><img src="/images/others/ntfs_for_mac_6.png" alt="s6"></p></li><li><p>在最后一步，会要求在系统配置里代开可信任权限，关机重启。<br>需要注意的是，这里不仅仅是要求在mac的系统安全设置里打开第三方软件信任项，还要在系统的安全模型里开启对第三方软件的信任项。</p></li></ol><p>如果以前没有修改过安全模型下的配置，大概率会提示需要在“恢复”环境中修改安全性设置。</p><p>这个需要在电脑关机后，长按触控ID或电源按钮就能进入安全配置环境，选择设置配置，然后在上面的菜单选择里找到安全配置相关菜单，勾选信任第三方软件修改系统内核就可以了（因为是安全模式，没有截图，按照这个步骤找就可以了）。</p><p>如果对电脑安全有洁癖的用户，这一步操作要慎重，也可以转投付费阵营。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>因为网络的原因，上面的驱动可能是下载失败，这里提供一个备用地址：<br><a href="https://url41.ctfile.com/f/62647441-1442742761-6dcabd?p=45td">Paragon_NTFS_Driver_for_Mac.zip 17.0.246</a>  (访问密码: 45td)</p><p><a href="https://support-en.wd.com/app/answers/detailweb/a_id/29957">驱动版本列表</a></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>问题解决</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux安装ClamAV杀毒软件然后扫毒</title>
    <link href="/2024/12/25/safe-clamav-and-scan/"/>
    <url>/2024/12/25/safe-clamav-and-scan/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在一个项目上要求在linux服务器上安装杀毒软件，然后开启系统扫描，然后删除病毒。</p><p>然后找了找了一些资料，比较常用的有<strong>ClamAV</strong> 和 <strong>Comodo</strong>, 因为ClamAV开源，且使用比较广泛，最终选择了ClamAV。</p><p>我们的服务器是centos7.9, 下面就是在CentOS上安装ClamAV的过程，比较简单。</p><h2 id="CentOS-上安装ClamAV"><a href="#CentOS-上安装ClamAV" class="headerlink" title="CentOS 上安装ClamAV"></a>CentOS 上安装ClamAV</h2><p>以下是在 CentOS 上安装 <strong>ClamAV</strong> 步骤：</p><h3 id="步骤-1：安装-EPEL-仓库"><a href="#步骤-1：安装-EPEL-仓库" class="headerlink" title="步骤 1：安装 EPEL 仓库"></a><strong>步骤 1：安装 EPEL 仓库</strong></h3><p>ClamAV 通常通过 <strong>EPEL</strong>（Extra Packages for Enterprise Linux）仓库提供，因此首先需要确保 EPEL 仓库已安装。</p><p>如果失败可以考虑使用阿里云的源 <a href="https://www.cnblogs.com/qingqingyuntian/articles/18414842">yum 仓库更换阿里云</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install epel-release -y<br></code></pre></td></tr></table></figure><h3 id="步骤-2：安装-ClamAV"><a href="#步骤-2：安装-ClamAV" class="headerlink" title="步骤 2：安装 ClamAV"></a><strong>步骤 2：安装 ClamAV</strong></h3><p>安装 EPEL 仓库后，你可以通过以下命令安装 ClamAV：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install clamav clamav-update clamd -y<br></code></pre></td></tr></table></figure><ul><li><code>clamav</code> 包含命令行工具（如 <code>clamscan</code>）。</li><li><code>clamav-update</code> 是更新病毒库所需的工具（即 <code>freshclam</code>）。</li><li><code>clamd</code> 是clam的系统服务。</li></ul><p>验证安装是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clamscan --version<br></code></pre></td></tr></table></figure><h3 id="步骤-3：更新病毒库"><a href="#步骤-3：更新病毒库" class="headerlink" title="步骤 3：更新病毒库"></a><strong>步骤 3：更新病毒库</strong></h3><p>安装完成后，首先需要更新 ClamAV 的病毒库，以确保它能识别最新的恶意软件。运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> freshclam<br></code></pre></td></tr></table></figure><p><code>freshclam</code> 会从 ClamAV 的服务器下载并更新病毒库，如果超时，等一会再多试几次，我试了3次成功了。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs subunit">ClamAV update process started at Wed Dec 25 16:33:20 2024<br>WARNING: Your ClamAV installation is OUTDATED!<br>WARNING: Local version: 0.103.11 Recommended version: 0.103.12<br>DON&#x27;T PANIC! Read https://docs.clamav.net/manual/Installing.html<br>daily database available for download (remote version: 27497)<br><span class="hljs-keyword">Time:</span>   14.0s, ETA:    0.0s [========================&gt;]   61.48MiB/61.48MiB<br><span class="hljs-keyword">Testing </span>database: &#x27;/var/lib/clamav/tmp.8095e9d84b/clamav<span class="hljs-string">-0</span>e8a55acea5c8848d6871677901e577d.tmp-daily.cvd&#x27; ...<br>Database test passed.<br>daily.cvd updated (version: 27497, sigs: 2071426, f-level: 90, builder: raynman)<br>main database available for download (remote version: 62)<br><span class="hljs-keyword">Time:</span>   50.6s, ETA:    0.0s [========================&gt;]  162.58MiB/162.58MiBBB<br><span class="hljs-keyword">Testing </span>database: &#x27;/var/lib/clamav/tmp.8095e9d84b/clamav-ac7f382ef620ff4ad4d10aaed27f9dce.tmp-main.cvd&#x27; ...<br>Database test passed.<br>main.cvd updated (version: 62, sigs: 6647427, f-level: 90, builder: sigmgr)<br>bytecode database available for download (remote version: 335)<br><span class="hljs-keyword">Time:</span>    1.5s, ETA:    0.0s [========================&gt;]  282.94KiB/282.94KiB<br><span class="hljs-keyword">Testing </span>database: &#x27;/var/lib/clamav/tmp.8095e9d84b/clamav-bbc727f2e5a1bc6a0e835c65fb9cf566.tmp-bytecode.cvd&#x27; ...<br>Database test passed.<br>bytecode.cvd updated (version: 335, sigs: 86, f-level: 90, builder: raynman)<br></code></pre></td></tr></table></figure><h3 id="步骤-4：启动-ClamAV-守护进程（可选）"><a href="#步骤-4：启动-ClamAV-守护进程（可选）" class="headerlink" title="步骤 4：启动 ClamAV 守护进程（可选）"></a><strong>步骤 4：启动 ClamAV 守护进程（可选）</strong></h3><p>如果你希望使用 ClamAV 的守护进程（<code>clamd</code>），你需要启动它。守护进程会提高扫描效率，特别是对于较大的文件。</p><ol><li>启用clam默认配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/clamd.d/scan.conf /etc/clamd.d/scan.conf.bak<br>sed -i -e <span class="hljs-string">&quot;s/^Example/#Example/&quot;</span> /etc/clamd.d/scan.conf<br>vim /etc/clamd.d/scan.conf<br></code></pre></td></tr></table></figure><p>放开如下的注释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># LocalSocket /run/clamd.scan/clamd.sock</span><br></code></pre></td></tr></table></figure><ol start="2"><li>重命名clam服务的@文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /usr/lib/systemd/system/clamd\@.service /usr/lib/systemd/system/clamd.service<br></code></pre></td></tr></table></figure><ol start="3"><li>修改服务配置</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span> = clamd scanner daemon<br><span class="hljs-attr">After</span> = syslog.target nss-lookup.target network.target<br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span> = forking<br><span class="hljs-attr">ExecStart</span> = /usr/sbin/clamd -c /etc/clamd.d/scan.conf<br><span class="hljs-comment"># Reload the database</span><br><span class="hljs-attr">ExecReload</span>=/bin/kill -USR2 <span class="hljs-variable">$MAINPID</span><br><span class="hljs-attr">Restart</span> = <span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">TimeoutStartSec</span>=<span class="hljs-number">420</span><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span> = multi-user.target<br></code></pre></td></tr></table></figure><ol start="4"><li><p>启动 <code>clamd</code> 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl start clamd.service<br></code></pre></td></tr></table></figure></li><li><p>设置 <code>clamd</code> 在系统启动时自动启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> clamd.service<br></code></pre></td></tr></table></figure></li></ol><h3 id="步骤-5：运行-ClamAV-执行病毒扫描"><a href="#步骤-5：运行-ClamAV-执行病毒扫描" class="headerlink" title="步骤 5：运行 ClamAV 执行病毒扫描"></a><strong>步骤 5：运行 ClamAV 执行病毒扫描</strong></h3><p>你可以使用 <code>clamscan</code> 执行病毒扫描。以下是一些常见的用法：</p><ul><li><p><strong>扫描单个文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clamscan /path/to/file<br></code></pre></td></tr></table></figure></li><li><p><strong>扫描整个目录</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clamscan -r /path/to/directory<br></code></pre></td></tr></table></figure></li><li><p><strong>扫描并删除感染文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clamscan -r --remove /path/to/directory<br></code></pre></td></tr></table></figure></li><li><p><strong>扫描并显示详细信息</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clamscan -r -v /path/to/directory<br></code></pre></td></tr></table></figure></li><li><p><strong>将结果输出到文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">clamscan -r /path/to/directory --<span class="hljs-built_in">log</span>=clamav_scan_results.txt<br><span class="hljs-comment"># or</span><br>clamscan -r /path/to/directory &gt; clamav_scan_results.txt<br><span class="hljs-comment"># 后台运行</span><br><span class="hljs-built_in">nohup</span> clamscan -r /path/to/directory --<span class="hljs-built_in">log</span>=clamav_scan_results.txt &amp;<br></code></pre></td></tr></table></figure><p>结果：</p></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">----------- SCAN SUMMARY -----------<br>Known viruses: 8702931<br>Engine version: 0.103.11<br>Scanned directories: 44573<br>Scanned files: 66053<br>Infected files: 0<br>Total errors: 21600<br>Data scanned: 4565.67 MB<br>Data read: 27114.51 MB (ratio 0.17:1)<br>Time: 1178.142 sec (19 m 38 s)<br>Start Date: 2024:12:25 17:12:38<br>End Date:   2024:12:25 17:32:17<br></code></pre></td></tr></table></figure><h3 id="步骤-6：配置-ClamAV-可选"><a href="#步骤-6：配置-ClamAV-可选" class="headerlink" title="步骤 6：配置 ClamAV (可选)"></a><strong>步骤 6：配置 ClamAV (可选)</strong></h3><p>如果需要，你可以配置 ClamAV 来调整其行为。ClamAV 的配置文件位于：</p><ul><li><strong><code>clamd</code> 配置文件</strong>：<code>/etc/clamd.d/scan.conf</code></li><li><strong><code>freshclam</code> 配置文件</strong>：<code>/etc/freshclam.conf</code></li></ul><p>你可以编辑这些配置文件，调整日志文件路径、扫描选项等。例如，编辑 <code>clamd</code> 配置文件来启用详细日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vi /etc/clamd.d/scan.conf<br></code></pre></td></tr></table></figure><p>修改以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">LogFile /var/log/clamd.log<br>LogTime <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h3 id="步骤-7：定期更新病毒库"><a href="#步骤-7：定期更新病毒库" class="headerlink" title="步骤 7：定期更新病毒库"></a><strong>步骤 7：定期更新病毒库</strong></h3><p>为了确保 ClamAV 能及时识别最新的威胁，你需要定期更新病毒库。你可以通过设置 <strong>cron 任务</strong> 来自动更新病毒库。</p><ol><li><p>编辑 <code>crontab</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> crontab -e<br></code></pre></td></tr></table></figure></li><li><p>添加以下行来每天更新病毒库（此例为每天凌晨 2 点）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0 2 * * * /usr/bin/freshclam --quiet<br></code></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ol><li>安装 EPEL 仓库并通过 <code>yum</code> 安装 ClamAV。</li><li>使用 <code>freshclam</code> 更新病毒库。</li><li>启动并配置 <code>clamd</code> 守护进程（可选）。</li><li>使用 <code>clamscan</code> 执行病毒扫描。</li><li>配置定时任务自动更新病毒库。</li></ol><p>通过这些步骤，你可以在 CentOS 上成功安装和配置 ClamAV，帮助你扫描和清理系统中的病毒和恶意软件。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.clamav.net/manual/Usage/Scanning.html">clamav 官方文档</a></p><p><a href="https://www.cnblogs.com/qingqingyuntian/articles/18414842">yum 仓库更换阿里云</a></p><p><a href="https://gist.github.com/fernandoaleman/50b134b987297f97c803c91b591e5c52">centos7 配置ClamAV</a></p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql出现了waiting for global read lock 全局事务等待问题排查</title>
    <link href="/2024/08/01/db-mysql-waiting-for-global-read-lock/"/>
    <url>/2024/08/01/db-mysql-waiting-for-global-read-lock/</url>
    
    <content type="html"><![CDATA[<h2 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h2><p>在一个普通的日子里，寒澈在操作他负责的一个内部系统的时候，突然发现一个修改状态的操作不能操作了。 查看服务器日志，发现数据库连接超时了：<br><img src="/images/tech/db/mysql-read-timeout.jpg" alt="mysql连接超时"><br>第一反应是数据库挂了，导致数据库连不上了。</p><p>可是，神奇的是，接下来发现数据库的查询功能还能用，但是所有的状态修改类的写操作都不能用了。 这下知道遇到麻烦了，肯定是mysql数据库的产生锁了，把所有的写操作阻塞了。</p><p>按照现在的这个情况，mysql读没有问题，写被阻塞，出问题的锁肯定是读锁（共享锁），而且还是全局性质的，因为所有的写都被影响了。</p><h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p>按照上面的思路去数据库里执行一下<code>SHOW ENGINE INNODB STATUS</code>, 查看一下数据库的状态。 结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs log">*** WE ROLL BACK TRANSACTION (2)<br>------------<br>TRANSACTIONS<br>------------<br>Trx id counter 48415098<br>Purge done for trx&#x27;s n:o &lt; 48412278 undo n:o &lt; 0 state: running but idle<br>History list length 0<br>LIST OF TRANSACTIONS FOR EACH SESSION:<br>---TRANSACTION 421386947297640, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>---TRANSACTION 421386947296832, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>---TRANSACTION 421386947296024, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>---TRANSACTION 421386947295216, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>---TRANSACTION 421386947294408, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>---TRANSACTION 421386947293600, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>---TRANSACTION 421386947291984, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>---TRANSACTION 421386947288752, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>---TRANSACTION 421386947287944, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>---TRANSACTION 421386947287136, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>---TRANSACTION 421386947283904, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br>---TRANSACTION 421386947280672, not started<br>0 lock struct(s), heap size 1128, 0 row lock(s)<br></code></pre></td></tr></table></figure><p>发现了大量的如上的事务在积压，没有执行。 与预期一致，就是某个锁导致事务阻塞了。</p><p>注意这里不会是死锁问题，因为死锁是锁冲突，mysql会自动解决的，不会导致事务长时间阻塞。</p><p>查询一下mysql的执行进程，看看情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查询一个耗时最久的 进程<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.PROCESSLIST <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-type">time</span> <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>发现了如下场景<br><img src="/images/tech/db/mysql_waiting_for_global_read_lock.jpg" alt="waiting for global read lock"></p><p>由此我们知道：</p><ol><li>确实发生了一个全局性的读锁<code>waiting for global read lock</code>导致了后续写操作的进行。 后面的事务都在等待这个读锁的释放。</li><li>情况比我们想象的严重，这个读锁不仅影响了我们自己的实例，还把整个mysql下所有的库实例都影响了。</li><li>问题的原因也发现了，就是有一个binlog dump后没有结束导致的。也就是那个耗时最久的进程。</li></ol><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>既然发现了这个锁产生的原因，直接把这个进程kill掉就可以了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">kill <span class="hljs-number">3518815</span><br></code></pre></td></tr></table></figure><p>binlog的进程杀掉后，后面阻塞的任务果然都没了。</p><p>记录一下排查问题过程中常用的sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查询当前元数据锁及关联的线程和事务<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> performance_schema.metadata_locks l<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> performance_schema.threads t <span class="hljs-keyword">on</span> t.THREAD_ID <span class="hljs-operator">=</span> l.OWNER_THREAD_ID <br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> performance_schema.events_transactions_current  et <span class="hljs-keyword">on</span> et.THREAD_ID  <span class="hljs-operator">=</span> t.THREAD_ID <br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> information_schema.INNODB_TRX  trx <span class="hljs-keyword">on</span> t.PROCESSLIST_ID <span class="hljs-operator">=</span> trx.trx_mysql_thread_id  <br><br># 当前系统内的事务<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.innodb_trx;<br><br># 查询一个耗时最久的 进程<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.PROCESSLIST <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-type">time</span> <span class="hljs-keyword">desc</span>;<br><br># 查询innodb 状态<br><span class="hljs-keyword">SHOW</span> ENGINE INNODB STATUS<br></code></pre></td></tr></table></figure><h2 id="问题避免"><a href="#问题避免" class="headerlink" title="问题避免"></a>问题避免</h2><p>发现问题，解决问题，避免问题才是我们排查问题最终要的目的。</p><p>我们这个问题是flink cdc 数据的时候导致的，后续的解决办法很简单：<br>第一： 以后flink 不要cdc主库了，避免对业务产生影响。<br>第二：flink cdc 一定要做好异常拦截处理，我们这就是因为异常导致fink退出了，无法释放锁<br>第三：如果可以的话，尽量使用flink的无锁cdc版本</p><h3 id="关于这个global-read-lock是怎么产生的"><a href="#关于这个global-read-lock是怎么产生的" class="headerlink" title="关于这个global read lock是怎么产生的"></a>关于这个<code>global read lock</code>是怎么产生的</h3><p>当mysql在dump整个数据库的时候，会对数据库执行一个<code>FLUSH TABLES WITH READ LOCK</code>命令来加锁，这个命令会停止对所有表的写操作，‌并允许读操作继续。<br>等备份完成，会使用<code>UNLOCK TABLES</code>来解锁，</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://dev.mysql.com/doc/refman/8.4/en/flush.html">mysql 加 global read lock 机制</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如果让百度爬虫爬我的github博客</title>
    <link href="/2024/05/22/site-how-baidu-spide-github-site/"/>
    <url>/2024/05/22/site-how-baidu-spide-github-site/</url>
    
    <content type="html"><![CDATA[<p>我们辛辛苦苦的通过github pages建好我们的博客之后。接下来可能会想要更多的人来访问我们的博客，<br>然后一顿操作后发现，github 把百度的爬虫屏蔽了，所以我们的网站也就不能被百度搜索了，我们的博客也就没法被百度搜索到了。</p><p>这怎么行呢？ 我们的博客主要群体还是国内的程序员的，少了百度这个来源，访问量一下子少了一大半。</p><p>作为一名程序员，我们怎么能被这个事情难倒呢？</p><p>让我们来分析一下，github 把百度的爬虫屏蔽了，这导致了我们的博客不能被百度收录。既然百度不能爬github了，我们可以让百度去别的地方爬我们的博客呀。</p><p>思路一开天地宽，我们可以通过CDN的机制来把我们的博客搬到CDN上，然后让百度访问CDN就可以了呀。</p><p>可惜，试过七牛云等一些国内的CDN，发现同步网站还要备案，这个我要是有，也就不用这么麻烦的想办法同步内容到百度了，这一步是走不通了。</p><p>最后，我发现了<a href="https://vercel.com/">vercel</a>这个网站，可以镜像我们的github 博客，而又没有屏蔽百度的爬虫，完美的解决了我的问题。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>github博客站建好</li><li>一个域名，我们需要域名来做博客的跳转。</li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="关联vercel"><a href="#关联vercel" class="headerlink" title="关联vercel"></a>关联vercel</h2><ol><li>注册登录<a href="https://vercel.com/">vercel</a></li><li>新建一个项目（add new project）, 关联到自己github上的 博客仓库<br><img src="/images/site/vercel-import-github-project.jpg" alt="vercel关联github"></li><li>添加指向vercel项目的二级域名，比如我的<code>blog.hancher.top</code><br><img src="/images/site/vercel-domain.jpg" alt="vercel配置域名"></li><li>此时，我们在Vercel里的项目已经构建好了，下次 GitHub 项目的任何更新都会触发 Vercel 项目更新<br><img src="/images/site/vercel-project-view.jpg" alt="vercel效果"></li></ol><h2 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h2><p>去域名的解析后台，添加域名的CNAME解析，记录值<code>cname-china.vercel-dns.com</code> 此时，通过<code>blog.hancher.top</code>就可以访问vercel CDN上的静态网站了。</p><p>当然，也可以将记录值改为Vercel的自己项目的vercel.app 域名。将线路解析类型改为<code>百度</code> 亦可。</p><h2 id="关联百度解析"><a href="#关联百度解析" class="headerlink" title="关联百度解析"></a>关联百度解析</h2><ol><li>去<a href="https://ziyuan.baidu.com/">百度站点管理</a> 里注册账号，创建<code>blog.hancher.top</code>域名的网站，即可以抓取我们的博客站点了。</li><li>将百度给的一个签名放到网站的根目录下<br><img src="/images/site/baidu-ziyuan-config.jpg" alt="百度站点"></li><li>通过<strong>抓取诊断</strong> 来验证我们的博客是否可以正常抓取<br><img src="/images/site/baidu-ziyuan-fetch-test.jpg" alt="抓取诊断"></li><li>耐心等待几天，在百度搜索框里搜索 <code>site:blog.hancher.top</code>来验证我们的配置是否生效，此时大概率就能搜到自己的博客文章了。<br><img src="/images/site/baidu-site-search.jpg" alt="验证博客"></li></ol><h2 id="2024年更新"><a href="#2024年更新" class="headerlink" title="2024年更新"></a>2024年更新</h2><p>因为Vercel被墙（dns污染方式）, 该方法暂时失效。等待后续解决。</p><h2 id="使用主动提交的方法来提交网站url"><a href="#使用主动提交的方法来提交网站url" class="headerlink" title="使用主动提交的方法来提交网站url"></a>使用主动提交的方法来提交网站url</h2><p>请跳转 <a href="/2025/02/18/site-hexo-site-url-auto-submit/">主动推送我们的博客到搜索引擎</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/30898326">知乎-如何解决百度爬虫无法爬取搭建在Github上的个人博客的问题</a><br><a href="https://blog.csdn.net/weixin_40026797/article/details/126919662">建站过程中的踩坑记录：自定义域名、百度收录与备案</a><br><a href="https://h.cjh0613.com/zh/posts/hexo-submit-urls-to-search-engine/">hexo-submit-urls-to-search-engine操作文档</a></p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>seo</tag>
      
      <tag>vercel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>羽毛球学习资源</title>
    <link href="/2024/01/12/favorite-badminton/"/>
    <url>/2024/01/12/favorite-badminton/</url>
    
    <content type="html"><![CDATA[<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p>李在福系列：</p><ol><li><a href="https://www.bilibili.com/video/BV1Yx411W7nJ">追球（基础系列）</a></li><li><a href="https://www.bilibili.com/video/BV1Yx411W7sS">双打</a></li><li><a href="https://www.bilibili.com/video/BV1Zx411W7AH">混双</a></li><li><a href="https://www.bilibili.com/video/BV1Zx411W7FC">杀球技巧</a></li><li><a href="https://www.bilibili.com/video/BV1hx411V7we">网前扑球</a></li><li><a href="https://www.bilibili.com/video/BV1hx411V7cZ">反手后场高球</a></li><li><a href="https://www.bilibili.com/video/BV1hx411V7cK">步伐</a></li><li><a href="https://www.bilibili.com/video/BV1hx411V7cL">步伐训练</a></li><li><a href="https://www.bilibili.com/video/BV1hx411V7uY">论球</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>springdoc-openapi的集成与常见问题</title>
    <link href="/2023/11/29/spring-springdoc-openapi/"/>
    <url>/2023/11/29/spring-springdoc-openapi/</url>
    
    <content type="html"><![CDATA[<p>在项目中经常使用swagger来作为项目接口的自动化api文档，尤其是springboot项目，一般都是通过<code>springfox-boot-starter</code>来集成swagger的使用。<br><code>springfox-boot-starter</code> 在2.x时代用着很方便，但是随着项目的发展，尤其是spring项目的不断推出新版本，<br><code>springfox-boot-starter</code>在3.0版本就已经明显存在兼容性问题了，而且已经3年多没维护了，所以寻找替代品是一种虽然不紧迫但很必须的事项了。<br>而springdoc-openapi就是springfox-boot-starter的替代品，且获得了swagger的官方支持，算是springfox在springboot高版本的天热替代品。<br><img src="/images/tech/spring/springfox-stop-update.jpg" alt="springfox已经3年未更新了"></p><p>本文就介绍springdoc-openapi的集成与常见问题。</p><h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><p>如果你的项目是springboot2.x版本，请使用springdoc-openapi的1.x版本。<br>如果你的项目是springboot3.x版本，请使用springdoc-openapi的2.x版本。</p><p>本文案例的环境是：</p><ul><li>java 17</li><li>springboot 2.7.18</li></ul><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>使用idea创建一个新的maven springboot项目，添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建一个Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-meta">@Tag(name=&quot;openapi demo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/world&quot;)</span><br>    <span class="hljs-meta">@Operation(summary = &quot;helloWorld接口&quot;,description = &quot;接口描述信息&quot;)</span><br>    <span class="hljs-meta">@Parameter(name = &quot;name&quot;, description = &quot;名称&quot;, required = true,  in = ParameterIn.QUERY)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">helloWorld</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span>+ Optional.of(name).orElse(<span class="hljs-string">&quot;world&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 隐藏的api，不再swagger 显示</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/hidden&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hiddenApi</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span>+ Optional.of(name).orElse(<span class="hljs-string">&quot;world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就可以直接启动了，不用任何配置，就可以看到swagger的界面了。<br>swagger默认地址： <a href="http://localhost:8080/swagger-ui/index.html#/">http://localhost:8080/swagger-ui/index.html#/</a><br><img src="/images/tech/spring/springdoc-swagger-default.jpg" alt="springdoc版的swagger的默认页面"></p><h3 id="通过配置文件修改相关配置"><a href="#通过配置文件修改相关配置" class="headerlink" title="通过配置文件修改相关配置"></a>通过配置文件修改相关配置</h3><p>如果你不想使用默认的配置，可以通过配置文件修改相关配置。比如我通过下面配置对swagger的界面进行了微调。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># application.properties</span><br><span class="hljs-attr">springdoc.swagger-ui.disable-swagger-default-url</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 布局 StandaloneLayout，BaseLayout</span><br><span class="hljs-attr">springdoc.swagger-ui.layout</span>=<span class="hljs-string">BaseLayout</span><br><span class="hljs-attr">springdoc.swagger-ui.path</span>=<span class="hljs-string">/v3/swagger-ui.html</span><br><span class="hljs-comment"># swagger-ui 默认关联的api接口配置, 要与api-docs.path 一致。 不配置默认取api-docs.path配置</span><br><span class="hljs-attr">springdoc.swagger-ui.url</span>=<span class="hljs-string">/v3/test/api-docs</span><br><span class="hljs-comment"># api json 接口配置, 可以自定义其他json接口</span><br><span class="hljs-attr">springdoc.api-docs.path</span>=<span class="hljs-string">/v3/test/api-docs</span><br></code></pre></td></tr></table></figure><p>因为修改了swagger页面的访问地址，所以我们的访问地址变成了：<br><a href="http://localhost:8080/v3/swagger-ui/index.html#/">http://localhost:8080/v3/swagger-ui/index.html#/</a><br>效果如图：<br><img src="/images/tech/spring/springdoc-swagger-properties.jpg" alt="springdoc版的swagger的properties配置版"></p><h2 id="通过自定义配置类修改相关配置"><a href="#通过自定义配置类修改相关配置" class="headerlink" title="通过自定义配置类修改相关配置"></a>通过自定义配置类修改相关配置</h2><p>如果我们想要更自有的配置，可以通过自定义配置类来修改相关配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加摘要信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> OpenAPI <span class="hljs-title function_">openAPI</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAPI</span>()<br>                .info(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>().title(<span class="hljs-string">&quot;hancher demo open api&quot;</span>)<br>                        .description(<span class="hljs-string">&quot;helloWorld接口文档&quot;</span>)<br>                        .version(<span class="hljs-string">&quot;v3.0.0&quot;</span>)<br>                        <span class="hljs-comment">// 联系人</span><br>                        .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>().name(<span class="hljs-string">&quot;寒澈&quot;</span>).url(<span class="hljs-string">&quot;https://www.hancher.top/&quot;</span>))<br>                )<br>                <span class="hljs-comment">// 其他文档信息</span><br>                .externalDocs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExternalDocumentation</span>()<br>                        .description(<span class="hljs-string">&quot;寒澈笔记&quot;</span>)<br>                        .url(<span class="hljs-string">&quot;https://www.hancher.top/&quot;</span>));<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 模式三： 自定义api分组</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    @Bean</span><br>    <span class="hljs-keyword">public</span> GroupedOpenApi <span class="hljs-title function_">publicApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> GroupedOpenApi.builder()<br>                .packagesToScan(<span class="hljs-string">&quot;com.hancher.demo.springbootopenapi.controller&quot;</span>) <span class="hljs-comment">// 扫描包</span><br>                .displayName(<span class="hljs-string">&quot;寒澈openapi&quot;</span>)<br>                .addOpenApiMethodFilter(method -&gt; method.isAnnotationPresent(Operation.class))<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还是默认访问地址：<a href="http://localhost:8080/swagger-ui/index.html#/">http://localhost:8080/swagger-ui/index.html#/</a><br><img src="/images/tech/spring/springdoc-swagger-openApi.jpg" alt="springdoc版的swagger的openapi配置版"></p><h2 id="迁移成本"><a href="#迁移成本" class="headerlink" title="迁移成本"></a>迁移成本</h2><p>除了将老版本的注解替换成新的注解之外，没有任何其他改的。<br><img src="/images/tech/spring/springdoc-from-springfox.jpg" alt="springfox迁移到springdoc的注解变动"></p><h2 id="集成中遇到的问题"><a href="#集成中遇到的问题" class="headerlink" title="集成中遇到的问题"></a>集成中遇到的问题</h2><p>我在集成过程中遇到的最大的问题就是明明集成好了，但是swagger的访问页面还是swagger的默认petStore的页面，而不是我配置的controller的页面。这个问题让我排查了好久。<br><img src="/images/tech/spring/springdoc-petstore-page.jpg" alt="springdoc总是显示默认petstore接口"></p><p>首先，我们我们要先了解的是，swagger-ui是一套api展示页面，他的数据是从<code>v3/api-docs</code>接口获取的json数据。<br>所以排查问题，我们首先要看页面有没有调用这个接口（有可能我们在配置文件了将这个接口改了），再次看看这个接口有没有返回正常的json结果。<br><img src="/images/tech/spring/springdoc-v3-apidocs.jpg" alt="springdoc的数据接口"><br>如果这这个接口返回了正常的数据，且是我们的配置的接口数据，那么问题很可能是我们的一些安全配置将swagger的相关接口给屏蔽了。<br>比如<code>WebSecurityConfigurerAdapter</code>, 我就是在这个环节上出的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="项目demo"><a href="#项目demo" class="headerlink" title="项目demo"></a>项目demo</h2><p>集成了application，java bean config 两种方式的demo<br><a href="https://github.com/Hanchers/spring-boot-demo/tree/master/springdoc-openapi">springdoc-demo</a></p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>openapi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux定时任务crontab不执行的问题排查过程</title>
    <link href="/2023/10/13/linux-linux-crontab-not-work/"/>
    <url>/2023/10/13/linux-linux-crontab-not-work/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近在搞一个比较复杂的crontab 定时任务， 核心思路就是通过crontab触发一个bash脚本，调用docker内的一个指令，来实现docker积压日志的删除清理操作。</p><p>然后问题就来了：我通过命令行调用脚本，能够正常执行，但是通过crontab，脚本就死活调用不成功。</p><p>以下就是记录的排查crontab调用不成功的过程：</p><h3 id="案发现场"><a href="#案发现场" class="headerlink" title="案发现场"></a>案发现场</h3><p>crontab上配置定时任务,把该有的环境变量都配置上，脚本的开头也加上了<code>source /etc/profile</code> 为了方便排查，调度改为2分钟一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crontab">*/2 * * * *  /usr/bin/docker exec -it container-name bash  -c &#x27;sh /var/log/del_overdue_log.sh&#x27; <br></code></pre></td></tr></table></figure><p>不出意外的话，定时任务调度失败了。 </p><p>通过<code>tail -f /var/log/cron</code>  去cron调度日志里查看调用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Oct 13 10:58:01 : CROND[27764]: (root) CMD (/usr/bin/docker <span class="hljs-built_in">exec</span> -it container-name bash  -c <span class="hljs-string">&#x27;sh /var/log/del_overdue_log.sh&#x27;</span>)<br>Oct 13 10:58:01 : (root) MAIL (mailed 54 bytes of output but got status 0x004b#012)<br></code></pre></td></tr></table></figure><p>日志表示，我们的cron任务调度了，但是没有成功。 失败原因本来想通过mail发给当前root用户的，但发送失败了，原因是获得了一个失败状态吗。</p><p>如何解决这个mail发送失败的问题呢?</p><h4 id="启用postfix-接收系统邮件"><a href="#启用postfix-接收系统邮件" class="headerlink" title="启用postfix 接收系统邮件"></a>启用postfix 接收系统邮件</h4><p>去<code>/etc/postfix/main.cf</code> 配置文件,搜索inet_interfaces，改成如下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">inet_interfaces = all<br><span class="hljs-comment"># inet_interfaces = localhost</span><br></code></pre></td></tr></table></figure><p>重启postfix </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart postfix<br></code></pre></td></tr></table></figure><p>此时，我们就可以收到cron调度失败的系统通知邮件了。</p><p><code>tail -f /var/spool/mail/root </code> 查看邮件信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">From</span> root@host.localdomain  Fri Oct <span class="hljs-number">13</span> <span class="hljs-number">12</span>:<span class="hljs-number">56</span>:<span class="hljs-number">01</span> <span class="hljs-number">2023</span><br><span class="hljs-attribute">Return</span>-Path: &lt;root@host.localdomain&gt;<br><span class="hljs-attribute">X</span>-Original-To: root<br><span class="hljs-attribute">Delivered</span>-To: root@host.localdomain<br><span class="hljs-attribute">Received</span>: by host.localdomain (Postfix, from userid <span class="hljs-number">0</span>)<br><span class="hljs-attribute">id</span> D94301329A7; Fri, <span class="hljs-number">13</span> Oct <span class="hljs-number">2023</span> <span class="hljs-number">12</span>:<span class="hljs-number">56</span>:<span class="hljs-number">01</span> +<span class="hljs-number">0800</span> (CST)<br><span class="hljs-attribute">From</span>: <span class="hljs-string">&quot;(Cron Daemon)&quot;</span> &lt;root@host.localdomain&gt;<br><span class="hljs-attribute">To</span>: root@host.localdomain<br><span class="hljs-attribute">Subject</span>: Cron &lt;root@host&gt; /usr/bin/docker exec -it container-name bash  -c &#x27;sh /var/log/del_overdue_log.sh&#x27;<br><span class="hljs-attribute">Content</span>-Type: text/plain; charset=UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">Auto</span>-Submitted: auto-generated<br><span class="hljs-attribute">Precedence</span>: bulk<br><span class="hljs-attribute">X</span>-Cron-Env: &lt;XDG_SESSION_ID=<span class="hljs-number">2387</span>&gt;<br><span class="hljs-attribute">X</span>-Cron-Env: &lt;XDG_RUNTIME_DIR=/run/user/<span class="hljs-number">0</span>&gt;<br><span class="hljs-attribute">X</span>-Cron-Env: &lt;LANG=en_US.UTF-<span class="hljs-number">8</span>&gt;<br><span class="hljs-attribute">X</span>-Cron-Env: &lt;SHELL=/bin/sh&gt;<br><span class="hljs-attribute">X</span>-Cron-Env: &lt;HOME=/root&gt;<br><span class="hljs-attribute">X</span>-Cron-Env: &lt;PATH=/usr/bin:/bin&gt;<br><span class="hljs-attribute">X</span>-Cron-Env: &lt;LOGNAME=root&gt;<br><span class="hljs-attribute">X</span>-Cron-Env: &lt;USER=root&gt;<br><span class="hljs-attribute">Message</span>-Id: &lt;<span class="hljs-number">20231013045601</span>.D94301329A7@host.localdomain&gt;<br><span class="hljs-attribute">Date</span>: Fri, <span class="hljs-number">13</span> Oct <span class="hljs-number">2023</span> <span class="hljs-number">12</span>:<span class="hljs-number">56</span>:<span class="hljs-number">01</span> +<span class="hljs-number">0800</span> (CST)<br><br><span class="hljs-attribute">the</span> input device is not a TTY<br></code></pre></td></tr></table></figure><p>会发现，失败的原因是我们的脚本调度器不是TTY(终端)，所以失败了。</p><blockquote><p>注意，问题定位后记得把postfix配置恢复原状</p></blockquote><h4 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h4><p>找到日志了，任务调度失败的原因也找到了，分析一下我们的任务指令，发现我们在脚本调度命令里存在选项<code> docker exec -it</code> 配置。</p><p>问题就在这个<code>-it</code> 上面了，这要求我们开启一个交互式终端来控制docker指令，而crontab调度器明显不是一个终端，所以失败了。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>把命令行里的<code>-it</code>去掉，改为<code>-d</code>后端调用就可以了。以下是最终版配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crontab">* 1 * * *  /usr/bin/docker exec -d container-name bash  -c &#x27;sh /var/log/del_overdue_log.sh&#x27; &gt;/dev/null 2&gt;$1 <br></code></pre></td></tr></table></figure><p>最终指令改了两点:</p><ol><li>将<code>-it</code>改为<code>-d</code>， 解决crontab调度失败的问题。</li><li>在crontab命令上增加 <code>&gt;/dev/null 2&gt;$1</code> 配置，这是为了取消任务调度的系统日志产生，防止系统日志爆炸，也可以不加。</li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>授之以渔不如授之以渔， 出现问题不可怕，只要我们掌握了一些解决问题的方法论， 任何问题都能迎刃而解。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.geeksforgeeks.org/crontab-in-linux-with-examples/">‘crontab’ in Linux with Examples</a></p><p><a href="https://zhangge.net/5093.html">crontab不执行排查</a></p>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>问题解决</tag>
      
      <tag>centos</tag>
      
      <tag>crontab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java应用连接docker内的oracle时报ORA-01882错误</title>
    <link href="/2023/08/18/exception-java-oracle-docker-timezone-not-find/"/>
    <url>/2023/08/18/exception-java-oracle-docker-timezone-not-find/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>数据库升级，用docker容器安装oracle11g数据库，应用连接的时候报ORA-01882错误</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.sql</span><span class="hljs-selector-class">.SQLException</span>: ORA-<span class="hljs-number">00604</span>: error occurred at recursive SQL level <span class="hljs-number">1</span><br>ORA-<span class="hljs-number">01882</span>: timezone region not found<br><br>        at oracle<span class="hljs-selector-class">.jdbc</span><span class="hljs-selector-class">.driver</span><span class="hljs-selector-class">.T4CTTIoer11</span><span class="hljs-selector-class">.processError</span>(T4CTTIoer11<span class="hljs-selector-class">.java</span>:<span class="hljs-number">509</span>)<br>        at oracle<span class="hljs-selector-class">.jdbc</span><span class="hljs-selector-class">.driver</span><span class="hljs-selector-class">.T4CTTIoer11</span><span class="hljs-selector-class">.processError</span>(T4CTTIoer11<span class="hljs-selector-class">.java</span>:<span class="hljs-number">456</span>)<br>        at oracle<span class="hljs-selector-class">.jdbc</span><span class="hljs-selector-class">.driver</span><span class="hljs-selector-class">.T4CTTIoer11</span><span class="hljs-selector-class">.processError</span>(T4CTTIoer11<span class="hljs-selector-class">.java</span>:<span class="hljs-number">451</span>)<br></code></pre></td></tr></table></figure><p>环境：</p><ul><li>jdk ： openjdk8</li><li>oracle: 11g</li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>问题本质上是java应用程序启动时, 找不到本地系统的时区环境变量导致。 我们只有把时区环境变量配置上就可以了。</p><p>解决办法有二：</p><ol><li>java应用程序启动时增加环境变量配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-Duser.timezone=xxx（xxx为oracle时区ID）<br></code></pre></td></tr></table></figure><ol start="2"><li>直接修改服务器的系统环境变量（更彻底）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 时间更新为东八区时间</span><br><span class="hljs-built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><span class="hljs-comment"># 配置时区为东八区。 Java可以通过Timezone获取时区的，修改完重启服务即可。</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone<br></code></pre></td></tr></table></figure><p>如果是docker的话，将宿主机改为上述配置后，docker容器启动(run)增加挂载配置就可以了</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">-v /etc/localtime:<span class="hljs-regexp">/etc/</span>localtime<br>-v /etc/<span class="hljs-built_in">timezone</span>:<span class="hljs-regexp">/etc/</span><span class="hljs-built_in">timezone</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>异常</tag>
      
      <tag>oracle</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git优雅迁库的方式</title>
    <link href="/2023/07/31/git-mirror/"/>
    <url>/2023/07/31/git-mirror/</url>
    
    <content type="html"><![CDATA[<p>在我们开发项目的时候，经常会遇到将一个git仓库迁移到一个新的git仓库的情况。 这个时候很多人会把原始的仓库最新代码复制到新库目录下，然后force push即可。</p><p>但是这样会产生一个问题，就是新库会把我们的历史提交记录等信息全部丢失了，当做一个全新的仓库来处理，这样给我们后续的问题追踪回溯带来了一些问题。</p><p>下面我们介绍一下git优雅迁库的三种方式。</p><h3 id="裸库方式-推荐"><a href="#裸库方式-推荐" class="headerlink" title="裸库方式(推荐)"></a>裸库方式(推荐)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 使用--bare克隆裸仓库<br>git <span class="hljs-built_in">clone</span> --bare git@url1<br>// 推送到新库<br>git push  git@url2<br></code></pre></td></tr></table></figure><h3 id="镜像库方式"><a href="#镜像库方式" class="headerlink" title="镜像库方式"></a>镜像库方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 使用--mirror克隆裸仓库<br>git <span class="hljs-built_in">clone</span> --mirror git@url1<br>// 推送到新库<br>git push  git@url2<br></code></pre></td></tr></table></figure><p>镜像库是裸库的一种简写,等同于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> --bare <span class="hljs-variable">$URL</span><br>$ (<span class="hljs-built_in">cd</span> $(<span class="hljs-built_in">basename</span> <span class="hljs-variable">$URL</span>) &amp;&amp; git remote add --mirror=fetch origin <span class="hljs-variable">$URL</span>)<br></code></pre></td></tr></table></figure><p>由此可知，裸库方式clone下的是git仓库的基本信息。镜像库不仅把基本信息clone下来了，还拉去了最新的分支代码。</p><h3 id="新增remote方式"><a href="#新增remote方式" class="headerlink" title="新增remote方式"></a>新增remote方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin2 [repo-url]<br>git push origin2<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/3959924/whats-the-difference-between-git-clone-mirror-and-git-clone-bare">git clone –mirror 和 –bare的区别</a></p>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jdbc反序列化漏洞修复</title>
    <link href="/2023/07/04/safe-mysql-jdbc-object-serial/"/>
    <url>/2023/07/04/safe-mysql-jdbc-object-serial/</url>
    
    <content type="html"><![CDATA[<h2 id="安全漏洞描述"><a href="#安全漏洞描述" class="headerlink" title="安全漏洞描述"></a>安全漏洞描述</h2><p>Jdbc反序列化漏洞发生在后台代码使用mysql-connector组件连接数据库且攻击者可控制连接参数的情况下。攻击者可以构造恶意的mysql数据库使服务器去访问链接它从而触发反序列化漏洞导致命令执行</p><p>mysql 连接参数风险点：autoDeserialize，statementInterceptors</p><h2 id="风险等级：高"><a href="#风险等级：高" class="headerlink" title="风险等级：高"></a>风险等级：高</h2><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li>升级mysql版本到8.0.27+，官方已经修复此问题</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>过滤掉风险参数<br> 一般情况下不需要对autoDeserialize和statementInterceptors参数进行设置。在后端代码设置连接字符参数白名单,或者将这两个参数直接替换掉。<br> 替换代码参考：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Properties <span class="hljs-keyword">prop</span> = new Properties();<br><span class="hljs-keyword">prop</span>.<span class="hljs-keyword">put</span>(<span class="hljs-string">&quot;autoDeserialize&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br><span class="hljs-keyword">prop</span>.<span class="hljs-keyword">put</span>(<span class="hljs-string">&quot;allowLoadLocalInfile&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br><span class="hljs-keyword">prop</span>.<span class="hljs-keyword">put</span>(<span class="hljs-string">&quot;allowUrlInLocalInfile&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br><span class="hljs-keyword">prop</span>.<span class="hljs-keyword">put</span>(<span class="hljs-string">&quot;allowLoadLocalInfileInPath&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">prop</span>.<span class="hljs-keyword">put</span>(<span class="hljs-string">&quot;statementInterceptors&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>Connectionconn=DriverManager.getConnection(DB_URL,<span class="hljs-keyword">prop</span>);<br></code></pre></td></tr></table></figure><h2 id="安全无小事！！！"><a href="#安全无小事！！！" class="headerlink" title="安全无小事！！！"></a>安全无小事！！！</h2><p><a href="https://cloud.tencent.com/developer/article/1822662">Jdbc反序列化漏洞复现浅析</a></p><p><a href="https://www.anquanke.com/post/id/237357#h3-13">探探JDBC反序列化漏洞</a></p><p><a href="https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html">狼组-JDBC反序列化漏洞</a></p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CORS跨域攻击与修复</title>
    <link href="/2023/06/21/safe-cors-attack/"/>
    <url>/2023/06/21/safe-cors-attack/</url>
    
    <content type="html"><![CDATA[<p>CORS跨域的逆向操作，如何收回放开的跨域权限。</p><p>以下是CORS漏洞的一些内容：</p><h2 id="安全漏洞描述"><a href="#安全漏洞描述" class="headerlink" title="安全漏洞描述"></a>安全漏洞描述</h2><p>Web服务端CORS（跨域资源共享）错误配置，无法正确验证Origin头，任何网站都可以发出使用用户凭据发出的请求，并读取对这些请求的响应，信任任意来源可以有效地禁用同源策略，从而允许第三方网站进行双向交互，易导致敏感信息泄露</p><p><img src="/images/tech/safe/safe_cros_attack.png" alt="swagger-switch"></p><h2 id="风险等级：高"><a href="#风险等级：高" class="headerlink" title="风险等级：高"></a>风险等级：高</h2><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>需要修复两处：<br>1，代码级别（必修）<br>程序默认是禁止跨域的，也可以去掉相关逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs code">// 比如： *.domain.com, 127.0.0.1  <br>@Value(&quot;$&#123;cros.allow-origin:*&#125;&quot;)<br>private String crosAllowOrigin;<br><br>@Bean<br>public CorsFilter corsFilter()<br>&#123;<br>    CorsConfiguration config = new CorsConfiguration();<br>    config.setAllowCredentials(false);<br>    // 设置访问源地址，   <br>    for (String origin : crosAllowOrigin.split(&quot;,&quot;)) &#123;<br>        config.addAllowedOriginPattern(origin);<br>    &#125;<br>    // 设置访问源请求头 , 也可以配置  <br>    config.addAllowedHeader(&quot;*&quot;);<br>    // 设置访问源请求方法 , 也可以配置   <br>    config.addAllowedMethod(&quot;*&quot;);<br>    // 有效期 1800秒    <br>    config.setMaxAge(1800L);<br>    // 添加映射路径，拦截一切请求    <br>    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();<br>    source.registerCorsConfiguration(&quot;/**&quot;, config);<br>    // 返回新的CorsFilter    <br>    return new CorsFilter(source);<br>&#125;<br></code></pre></td></tr></table></figure><p>2，nginx服务<br>增加相关头配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">add_header</span> <span class="hljs-string">Access-Control-Allow-Origin your.domain.com;</span><br></code></pre></td></tr></table></figure><h2 id="安全无小事！！！"><a href="#安全无小事！！！" class="headerlink" title="安全无小事！！！"></a>安全无小事！！！</h2>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储XSS问题与修复</title>
    <link href="/2023/06/21/safe-xss-reactive/"/>
    <url>/2023/06/21/safe-xss-reactive/</url>
    
    <content type="html"><![CDATA[<h2 id="安全漏洞描述"><a href="#安全漏洞描述" class="headerlink" title="安全漏洞描述"></a>安全漏洞描述</h2><p>恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页时，嵌入其中Web里面的Script代码会被执行，进而窃取到管理员用户权限等。</p><h2 id="风险等级：高"><a href="#风险等级：高" class="headerlink" title="风险等级：高"></a>风险等级：高</h2><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>对网页端输入的特殊字符过滤<br>建议过滤的关键字为：<br>[1]’单引号<br>[2]”双引号<br>[3]&#x2F;斜杠<br>[4]反斜杠<br>[5])括号<br>[6];分号<br>[7][中括号<br>[8]&lt;尖括号<br>[9]&gt;尖括号<br>比如把&lt;编码为&lt;   </li><li>在cookie中加入httponly属性可以在一定程度上保护用户的cookie，减少出现XSS时损失。</li></ol><p>一段简易的字符过滤程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> htmlEncode(str)&#123;<br>    var s = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (str.length == 0) <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    s = str.replace(/&amp;/g, <span class="hljs-string">&quot;&amp;&quot;</span>);<br>    s = s.replace(//g, <span class="hljs-string">&quot;&gt;&quot;</span>);<br>    s = s.replace(/ /g, <span class="hljs-string">&quot; &quot;</span>);<br>    s = s.replace(/\&#x27;/g, <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    s = s.replace(/\&quot;/g, <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;);</span><br><span class="hljs-string">    return s;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>在服务端增加filter过滤<br>通过自定义filter的方式拦截过滤请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XssFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span><br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 排除链接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; excludes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException<br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tempExcludes</span> <span class="hljs-operator">=</span> filterConfig.getInitParameter(<span class="hljs-string">&quot;excludes&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(tempExcludes))<br>        &#123;<br>            String[] url = tempExcludes.split(<span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; url != <span class="hljs-literal">null</span> &amp;&amp; i &lt; url.length; i++)<br>            &#123;<br>                excludes.add(url[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span><br>            <span class="hljs-keyword">throws</span> IOException, ServletException<br>    &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest) request;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">resp</span> <span class="hljs-operator">=</span> (HttpServletResponse) response;<br>        <span class="hljs-keyword">if</span> (handleExcludeURL(req, resp))<br>        &#123;<br>            chain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">XssHttpServletRequestWrapper</span> <span class="hljs-variable">xssRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XssHttpServletRequestWrapper</span>((HttpServletRequest) request);<br>        chain.doFilter(xssRequest, response);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handleExcludeURL</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> request.getServletPath();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>        <span class="hljs-comment">// GET DELETE 不过滤</span><br>        <span class="hljs-keyword">if</span> (method == <span class="hljs-literal">null</span> || HttpMethod.GET.matches(method) || HttpMethod.DELETE.matches(method))<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> StringUtils.matches(url, excludes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在wrapper里过滤参数   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XssHttpServletRequestWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServletRequestWrapper</span><br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">XssHttpServletRequestWrapper</span><span class="hljs-params">(HttpServletRequest request)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(request);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] getParameterValues(String name)<br>    &#123;<br>        String[] values = <span class="hljs-built_in">super</span>.getParameterValues(name);<br>        <span class="hljs-keyword">if</span> (values != <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> values.length;<br>            String[] escapesValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[length];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++)<br>            &#123;<br>                <span class="hljs-comment">// 防xss攻击和过滤前后空格</span><br>                escapesValues[i] = EscapeUtil.clean(values[i]).trim();<br>            &#125;<br>            <span class="hljs-keyword">return</span> escapesValues;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getParameterValues(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletInputStream <span class="hljs-title function_">getInputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException<br>    &#123;<br>        <span class="hljs-comment">// 非json类型，直接返回</span><br>        <span class="hljs-keyword">if</span> (!isJsonRequest())<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getInputStream();<br>        &#125;<br><br>        <span class="hljs-comment">// 为空，直接返回</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> IOUtils.toString(<span class="hljs-built_in">super</span>.getInputStream(), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(json))<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getInputStream();<br>        &#125;<br><br>        <span class="hljs-comment">// xss过滤</span><br>        json = EscapeUtil.clean(json).trim();<br>        <span class="hljs-type">byte</span>[] jsonBytes = json.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(jsonBytes);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletInputStream</span>()<br>        &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFinished</span><span class="hljs-params">()</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isReady</span><span class="hljs-params">()</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">available</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException<br>            &#123;<br>                <span class="hljs-keyword">return</span> jsonBytes.length;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReadListener</span><span class="hljs-params">(ReadListener readListener)</span><br>            &#123;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException<br>            &#123;<br>                <span class="hljs-keyword">return</span> bis.read();<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否是Json请求</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isJsonRequest</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">header</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.getHeader(HttpHeaders.CONTENT_TYPE);<br>        <span class="hljs-keyword">return</span> StringUtils.startsWithIgnoreCase(header, MediaType.APPLICATION_JSON_VALUE);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>xssUtil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EscapeUtil</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">RE_HTML_MARK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(&lt;[^&lt;]*?&gt;)|(&lt;[\\s]*?/[^&lt;]*?&gt;)|(&lt;[^&lt;]*?/[\\s]*?&gt;)&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[][] TEXT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">64</span>][];<br><br>    <span class="hljs-keyword">static</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++)<br>        &#123;<br>            TEXT[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[] &#123; (<span class="hljs-type">char</span>) i &#125;;<br>        &#125;<br><br>        <span class="hljs-comment">// special HTML characters</span><br>        TEXT[<span class="hljs-string">&#x27;\&#x27;&#x27;</span>] = <span class="hljs-string">&quot;&amp;#039;&quot;</span>.toCharArray(); <span class="hljs-comment">// 单引号</span><br>        TEXT[<span class="hljs-string">&#x27;&quot;&#x27;</span>] = <span class="hljs-string">&quot;&amp;#34;&quot;</span>.toCharArray(); <span class="hljs-comment">// 双引号</span><br>        TEXT[<span class="hljs-string">&#x27;&amp;&#x27;</span>] = <span class="hljs-string">&quot;&amp;#38;&quot;</span>.toCharArray(); <span class="hljs-comment">// &amp;符</span><br>        TEXT[<span class="hljs-string">&#x27;&lt;&#x27;</span>] = <span class="hljs-string">&quot;&amp;#60;&quot;</span>.toCharArray(); <span class="hljs-comment">// 小于号</span><br>        TEXT[<span class="hljs-string">&#x27;&gt;&#x27;</span>] = <span class="hljs-string">&quot;&amp;#62;&quot;</span>.toCharArray(); <span class="hljs-comment">// 大于号</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转义文本中的HTML字符为安全的字符</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> text 被转义的文本</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 转义后的文本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">escape</span><span class="hljs-params">(String text)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> encode(text);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 还原被转义的HTML特殊字符</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 包含转义符的HTML内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 转换后的字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">unescape</span><span class="hljs-params">(String content)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> decode(content);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清除所有HTML标签，但是不删除标签内的内容</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 文本</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 清除标签后的文本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">clean</span><span class="hljs-params">(String content)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HTMLFilter</span>().filter(content);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Escape编码</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> text 被编码的文本</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 编码后的字符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(String text)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(text))<br>        &#123;<br>            <span class="hljs-keyword">return</span> StringUtils.EMPTY;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(text.length() * <span class="hljs-number">6</span>);<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; text.length(); i++)<br>        &#123;<br>            c = text.charAt(i);<br>            <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-number">256</span>)<br>            &#123;<br>                tmp.append(<span class="hljs-string">&quot;%&quot;</span>);<br>                <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-number">16</span>)<br>                &#123;<br>                    tmp.append(<span class="hljs-string">&quot;0&quot;</span>);<br>                &#125;<br>                tmp.append(Integer.toString(c, <span class="hljs-number">16</span>));<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                tmp.append(<span class="hljs-string">&quot;%u&quot;</span>);<br>                <span class="hljs-keyword">if</span> (c &lt;= <span class="hljs-number">0xfff</span>)<br>                &#123;<br>                    <span class="hljs-comment">// issue#I49JU8@Gitee</span><br>                    tmp.append(<span class="hljs-string">&quot;0&quot;</span>);<br>                &#125;<br>                tmp.append(Integer.toString(c, <span class="hljs-number">16</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmp.toString();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Escape解码</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 被转义的内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 解码后的字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decode</span><span class="hljs-params">(String content)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(content))<br>        &#123;<br>            <span class="hljs-keyword">return</span> content;<br>        &#125;<br><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(content.length());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastPos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span> ch;<br>        <span class="hljs-keyword">while</span> (lastPos &lt; content.length())<br>        &#123;<br>            pos = content.indexOf(<span class="hljs-string">&quot;%&quot;</span>, lastPos);<br>            <span class="hljs-keyword">if</span> (pos == lastPos)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (content.charAt(pos + <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;u&#x27;</span>)<br>                &#123;<br>                    ch = (<span class="hljs-type">char</span>) Integer.parseInt(content.substring(pos + <span class="hljs-number">2</span>, pos + <span class="hljs-number">6</span>), <span class="hljs-number">16</span>);<br>                    tmp.append(ch);<br>                    lastPos = pos + <span class="hljs-number">6</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    ch = (<span class="hljs-type">char</span>) Integer.parseInt(content.substring(pos + <span class="hljs-number">1</span>, pos + <span class="hljs-number">3</span>), <span class="hljs-number">16</span>);<br>                    tmp.append(ch);<br>                    lastPos = pos + <span class="hljs-number">3</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (pos == -<span class="hljs-number">1</span>)<br>                &#123;<br>                    tmp.append(content.substring(lastPos));<br>                    lastPos = content.length();<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    tmp.append(content.substring(lastPos, pos));<br>                    lastPos = pos;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmp.toString();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HTMLFilter</span><br>&#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * regex flag union representing /si modifiers in php</span><br><span class="hljs-comment">    **/</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">REGEX_FLAGS_SI</span> <span class="hljs-operator">=</span> Pattern.CASE_INSENSITIVE | Pattern.DOTALL;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_COMMENTS</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;&lt;!--(.*?)--&gt;&quot;</span>, Pattern.DOTALL);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_COMMENT</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;^!--(.*)--$&quot;</span>, REGEX_FLAGS_SI);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_TAGS</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;&lt;(.*?)&gt;&quot;</span>, Pattern.DOTALL);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_END_TAG</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;^/([a-z0-9]+)&quot;</span>, REGEX_FLAGS_SI);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_START_TAG</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;^([a-z0-9]+)(.*?)(/?)$&quot;</span>, REGEX_FLAGS_SI);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_QUOTED_ATTRIBUTES</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;([a-z0-9]+)=([\&quot;&#x27;])(.*?)\\2&quot;</span>, REGEX_FLAGS_SI);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_UNQUOTED_ATTRIBUTES</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;([a-z0-9]+)(=)([^\&quot;\\s&#x27;]+)&quot;</span>, REGEX_FLAGS_SI);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_PROTOCOL</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;^([^:]+):&quot;</span>, REGEX_FLAGS_SI);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_ENTITY</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;&amp;#(\\d+);?&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_ENTITY_UNICODE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;&amp;#x([0-9a-f]+);?&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_ENCODE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;%([0-9a-f]&#123;2&#125;);?&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_VALID_ENTITIES</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;&amp;([^&amp;;]*)(?=(;|&amp;|$))&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_VALID_QUOTES</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;(&gt;|^)([^&lt;]+?)(&lt;|$)&quot;</span>, Pattern.DOTALL);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_END_ARROW</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;^&gt;&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_BODY_TO_END</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;&lt;([^&gt;]*?)(?=&lt;|$)&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_XML_CONTENT</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;(^|&gt;)([^&lt;]*?)(?=&gt;)&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_STRAY_LEFT_ARROW</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;&lt;([^&gt;]*?)(?=&lt;|$)&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_STRAY_RIGHT_ARROW</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;(^|&gt;)([^&lt;]*?)(?=&gt;)&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_AMP</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_QUOTE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;\&quot;&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_LEFT_ARROW</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;&lt;&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_RIGHT_ARROW</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;&gt;&quot;</span>);<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">P_BOTH_ARROWS</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;&lt;&gt;&quot;</span>);<br><br>   <span class="hljs-comment">// @xxx could grow large... maybe use sesat&#x27;s ReferenceMap</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ConcurrentMap&lt;String, Pattern&gt; P_REMOVE_PAIR_BLANKS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ConcurrentMap&lt;String, Pattern&gt; P_REMOVE_SELF_BLANKS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * set of allowed html elements, along with allowed attributes for each element</span><br><span class="hljs-comment">    **/</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, List&lt;String&gt;&gt; vAllowed;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * counts of open tags for each (allowable) html element</span><br><span class="hljs-comment">    **/</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Integer&gt; vTagCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * html elements which must always be self-closing (e.g. &quot;&lt;img /&gt;&quot;)</span><br><span class="hljs-comment">    **/</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] vSelfClosingTags;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * html elements which must always have separate opening and closing tags (e.g. &quot;&lt;b&gt;&lt;/b&gt;&quot;)</span><br><span class="hljs-comment">    **/</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] vNeedClosingTags;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * set of disallowed html elements</span><br><span class="hljs-comment">    **/</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] vDisallowed;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * attributes which should be checked for valid protocols</span><br><span class="hljs-comment">    **/</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] vProtocolAtts;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * allowed protocols</span><br><span class="hljs-comment">    **/</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] vAllowedProtocols;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * tags which should be removed if they contain no content (e.g. &quot;&lt;b&gt;&lt;/b&gt;&quot; or &quot;&lt;b /&gt;&quot;)</span><br><span class="hljs-comment">    **/</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] vRemoveBlanks;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * entities allowed within html markup</span><br><span class="hljs-comment">    **/</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] vAllowedEntities;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * flag determining whether comments are allowed in input String.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> stripComment;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> encodeQuotes;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * flag determining whether to try to make tags when presented with &quot;unbalanced&quot; angle brackets (e.g. &quot;&lt;b text &lt;/b&gt;&quot;</span><br><span class="hljs-comment">    * becomes &quot;&lt;b&gt; text &lt;/b&gt;&quot;). If set to false, unbalanced angle brackets will be html escaped.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> alwaysMakeTags;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Default constructor.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">HTMLFilter</span><span class="hljs-params">()</span><br>   &#123;<br>      vAllowed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>      <span class="hljs-keyword">final</span> ArrayList&lt;String&gt; a_atts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      a_atts.add(<span class="hljs-string">&quot;href&quot;</span>);<br>      a_atts.add(<span class="hljs-string">&quot;target&quot;</span>);<br>      vAllowed.put(<span class="hljs-string">&quot;a&quot;</span>, a_atts);<br><br>      <span class="hljs-keyword">final</span> ArrayList&lt;String&gt; img_atts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      img_atts.add(<span class="hljs-string">&quot;src&quot;</span>);<br>      img_atts.add(<span class="hljs-string">&quot;width&quot;</span>);<br>      img_atts.add(<span class="hljs-string">&quot;height&quot;</span>);<br>      img_atts.add(<span class="hljs-string">&quot;alt&quot;</span>);<br>      vAllowed.put(<span class="hljs-string">&quot;img&quot;</span>, img_atts);<br><br>      <span class="hljs-keyword">final</span> ArrayList&lt;String&gt; no_atts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      vAllowed.put(<span class="hljs-string">&quot;b&quot;</span>, no_atts);<br>      vAllowed.put(<span class="hljs-string">&quot;strong&quot;</span>, no_atts);<br>      vAllowed.put(<span class="hljs-string">&quot;i&quot;</span>, no_atts);<br>      vAllowed.put(<span class="hljs-string">&quot;em&quot;</span>, no_atts);<br><br>      vSelfClosingTags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;img&quot;</span> &#125;;<br>      vNeedClosingTags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;strong&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;em&quot;</span> &#125;;<br>      vDisallowed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;&#125;;<br>      vAllowedProtocols = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;mailto&quot;</span>, <span class="hljs-string">&quot;https&quot;</span> &#125;; <span class="hljs-comment">// no ftp.</span><br>      vProtocolAtts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;href&quot;</span> &#125;;<br>      vRemoveBlanks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;strong&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;em&quot;</span> &#125;;<br>      vAllowedEntities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;amp&quot;</span>, <span class="hljs-string">&quot;gt&quot;</span>, <span class="hljs-string">&quot;lt&quot;</span>, <span class="hljs-string">&quot;quot&quot;</span> &#125;;<br>      stripComment = <span class="hljs-literal">true</span>;<br>      encodeQuotes = <span class="hljs-literal">true</span>;<br>      alwaysMakeTags = <span class="hljs-literal">false</span>;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Map-parameter configurable constructor.</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> conf map containing configuration. keys match field names.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">HTMLFilter</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Map&lt;String, Object&gt; conf)</span><br>   &#123;<br><br>      <span class="hljs-keyword">assert</span> conf.containsKey(<span class="hljs-string">&quot;vAllowed&quot;</span>) : <span class="hljs-string">&quot;configuration requires vAllowed&quot;</span>;<br>      <span class="hljs-keyword">assert</span> conf.containsKey(<span class="hljs-string">&quot;vSelfClosingTags&quot;</span>) : <span class="hljs-string">&quot;configuration requires vSelfClosingTags&quot;</span>;<br>      <span class="hljs-keyword">assert</span> conf.containsKey(<span class="hljs-string">&quot;vNeedClosingTags&quot;</span>) : <span class="hljs-string">&quot;configuration requires vNeedClosingTags&quot;</span>;<br>      <span class="hljs-keyword">assert</span> conf.containsKey(<span class="hljs-string">&quot;vDisallowed&quot;</span>) : <span class="hljs-string">&quot;configuration requires vDisallowed&quot;</span>;<br>      <span class="hljs-keyword">assert</span> conf.containsKey(<span class="hljs-string">&quot;vAllowedProtocols&quot;</span>) : <span class="hljs-string">&quot;configuration requires vAllowedProtocols&quot;</span>;<br>      <span class="hljs-keyword">assert</span> conf.containsKey(<span class="hljs-string">&quot;vProtocolAtts&quot;</span>) : <span class="hljs-string">&quot;configuration requires vProtocolAtts&quot;</span>;<br>      <span class="hljs-keyword">assert</span> conf.containsKey(<span class="hljs-string">&quot;vRemoveBlanks&quot;</span>) : <span class="hljs-string">&quot;configuration requires vRemoveBlanks&quot;</span>;<br>      <span class="hljs-keyword">assert</span> conf.containsKey(<span class="hljs-string">&quot;vAllowedEntities&quot;</span>) : <span class="hljs-string">&quot;configuration requires vAllowedEntities&quot;</span>;<br><br>      vAllowed = Collections.unmodifiableMap((HashMap&lt;String, List&lt;String&gt;&gt;) conf.get(<span class="hljs-string">&quot;vAllowed&quot;</span>));<br>      vSelfClosingTags = (String[]) conf.get(<span class="hljs-string">&quot;vSelfClosingTags&quot;</span>);<br>      vNeedClosingTags = (String[]) conf.get(<span class="hljs-string">&quot;vNeedClosingTags&quot;</span>);<br>      vDisallowed = (String[]) conf.get(<span class="hljs-string">&quot;vDisallowed&quot;</span>);<br>      vAllowedProtocols = (String[]) conf.get(<span class="hljs-string">&quot;vAllowedProtocols&quot;</span>);<br>      vProtocolAtts = (String[]) conf.get(<span class="hljs-string">&quot;vProtocolAtts&quot;</span>);<br>      vRemoveBlanks = (String[]) conf.get(<span class="hljs-string">&quot;vRemoveBlanks&quot;</span>);<br>      vAllowedEntities = (String[]) conf.get(<span class="hljs-string">&quot;vAllowedEntities&quot;</span>);<br>      stripComment = conf.containsKey(<span class="hljs-string">&quot;stripComment&quot;</span>) ? (Boolean) conf.get(<span class="hljs-string">&quot;stripComment&quot;</span>) : <span class="hljs-literal">true</span>;<br>      encodeQuotes = conf.containsKey(<span class="hljs-string">&quot;encodeQuotes&quot;</span>) ? (Boolean) conf.get(<span class="hljs-string">&quot;encodeQuotes&quot;</span>) : <span class="hljs-literal">true</span>;<br>      alwaysMakeTags = conf.containsKey(<span class="hljs-string">&quot;alwaysMakeTags&quot;</span>) ? (Boolean) conf.get(<span class="hljs-string">&quot;alwaysMakeTags&quot;</span>) : <span class="hljs-literal">true</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reset</span><span class="hljs-params">()</span><br>   &#123;<br>      vTagCounts.clear();<br>   &#125;<br><br>   <span class="hljs-comment">// ---------------------------------------------------------------</span><br>   <span class="hljs-comment">// my versions of some PHP library functions</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">chr</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> decimal)</span><br>   &#123;<br>      <span class="hljs-keyword">return</span> String.valueOf((<span class="hljs-type">char</span>) decimal);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">htmlSpecialChars</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String s)</span><br>   &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> s;<br>      result = regexReplace(P_AMP, <span class="hljs-string">&quot;&amp;amp;&quot;</span>, result);<br>      result = regexReplace(P_QUOTE, <span class="hljs-string">&quot;&amp;quot;&quot;</span>, result);<br>      result = regexReplace(P_LEFT_ARROW, <span class="hljs-string">&quot;&amp;lt;&quot;</span>, result);<br>      result = regexReplace(P_RIGHT_ARROW, <span class="hljs-string">&quot;&amp;gt;&quot;</span>, result);<br>      <span class="hljs-keyword">return</span> result;<br>   &#125;<br><br>   <span class="hljs-comment">// ---------------------------------------------------------------</span><br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * given a user submitted input String, filter out any invalid or restricted html.</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> input text (i.e. submitted by a user) than may contain html</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> &quot;clean&quot; version of input, with only valid, whitelisted html elements allowed</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">filter</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String input)</span><br>   &#123;<br>      reset();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> input;<br><br>      s = escapeComments(s);<br><br>      s = balanceHTML(s);<br><br>      s = checkTags(s);<br><br>      s = processRemoveBlanks(s);<br><br>      <span class="hljs-comment">// s = validateEntities(s);</span><br><br>      <span class="hljs-keyword">return</span> s;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAlwaysMakeTags</span><span class="hljs-params">()</span><br>   &#123;<br>      <span class="hljs-keyword">return</span> alwaysMakeTags;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isStripComments</span><span class="hljs-params">()</span><br>   &#123;<br>      <span class="hljs-keyword">return</span> stripComment;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">escapeComments</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String s)</span><br>   &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> P_COMMENTS.matcher(s);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>      <span class="hljs-keyword">if</span> (m.find())<br>      &#123;<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">match</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">1</span>); <span class="hljs-comment">// (.*?)</span><br>         m.appendReplacement(buf, Matcher.quoteReplacement(<span class="hljs-string">&quot;&lt;!--&quot;</span> + htmlSpecialChars(match) + <span class="hljs-string">&quot;--&gt;&quot;</span>));<br>      &#125;<br>      m.appendTail(buf);<br><br>      <span class="hljs-keyword">return</span> buf.toString();<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">balanceHTML</span><span class="hljs-params">(String s)</span><br>   &#123;<br>      <span class="hljs-keyword">if</span> (alwaysMakeTags)<br>      &#123;<br>         <span class="hljs-comment">//</span><br>         <span class="hljs-comment">// try and form html</span><br>         <span class="hljs-comment">//</span><br>         s = regexReplace(P_END_ARROW, <span class="hljs-string">&quot;&quot;</span>, s);<br>         <span class="hljs-comment">// 不追加结束标签</span><br>         s = regexReplace(P_BODY_TO_END, <span class="hljs-string">&quot;&lt;$1&gt;&quot;</span>, s);<br>         s = regexReplace(P_XML_CONTENT, <span class="hljs-string">&quot;$1&lt;$2&quot;</span>, s);<br><br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>         <span class="hljs-comment">//</span><br>         <span class="hljs-comment">// escape stray brackets</span><br>         <span class="hljs-comment">//</span><br>         s = regexReplace(P_STRAY_LEFT_ARROW, <span class="hljs-string">&quot;&amp;lt;$1&quot;</span>, s);<br>         s = regexReplace(P_STRAY_RIGHT_ARROW, <span class="hljs-string">&quot;$1$2&amp;gt;&lt;&quot;</span>, s);<br><br>         <span class="hljs-comment">//</span><br>         <span class="hljs-comment">// the last regexp causes &#x27;&lt;&gt;&#x27; entities to appear</span><br>         <span class="hljs-comment">// (we need to do a lookahead assertion so that the last bracket can</span><br>         <span class="hljs-comment">// be used in the next pass of the regexp)</span><br>         <span class="hljs-comment">//</span><br>         s = regexReplace(P_BOTH_ARROWS, <span class="hljs-string">&quot;&quot;</span>, s);<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> s;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">checkTags</span><span class="hljs-params">(String s)</span><br>   &#123;<br>      <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> P_TAGS.matcher(s);<br><br>      <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>      <span class="hljs-keyword">while</span> (m.find())<br>      &#123;<br>         <span class="hljs-type">String</span> <span class="hljs-variable">replaceStr</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">1</span>);<br>         replaceStr = processTag(replaceStr);<br>         m.appendReplacement(buf, Matcher.quoteReplacement(replaceStr));<br>      &#125;<br>      m.appendTail(buf);<br><br>      <span class="hljs-comment">// these get tallied in processTag</span><br>      <span class="hljs-comment">// (remember to reset before subsequent calls to filter method)</span><br>      <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(buf.toString());<br>      <span class="hljs-keyword">for</span> (String key : vTagCounts.keySet())<br>      &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ii &lt; vTagCounts.get(key); ii++)<br>         &#123;<br>            sBuilder.append(<span class="hljs-string">&quot;&lt;/&quot;</span>).append(key).append(<span class="hljs-string">&quot;&gt;&quot;</span>);<br>         &#125;<br>      &#125;<br>      s = sBuilder.toString();<br><br>      <span class="hljs-keyword">return</span> s;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">processRemoveBlanks</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String s)</span><br>   &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> s;<br>      <span class="hljs-keyword">for</span> (String tag : vRemoveBlanks)<br>      &#123;<br>         <span class="hljs-keyword">if</span> (!P_REMOVE_PAIR_BLANKS.containsKey(tag))<br>         &#123;<br>            P_REMOVE_PAIR_BLANKS.putIfAbsent(tag, Pattern.compile(<span class="hljs-string">&quot;&lt;&quot;</span> + tag + <span class="hljs-string">&quot;(\\s[^&gt;]*)?&gt;&lt;/&quot;</span> + tag + <span class="hljs-string">&quot;&gt;&quot;</span>));<br>         &#125;<br>         result = regexReplace(P_REMOVE_PAIR_BLANKS.get(tag), <span class="hljs-string">&quot;&quot;</span>, result);<br>         <span class="hljs-keyword">if</span> (!P_REMOVE_SELF_BLANKS.containsKey(tag))<br>         &#123;<br>            P_REMOVE_SELF_BLANKS.putIfAbsent(tag, Pattern.compile(<span class="hljs-string">&quot;&lt;&quot;</span> + tag + <span class="hljs-string">&quot;(\\s[^&gt;]*)?/&gt;&quot;</span>));<br>         &#125;<br>         result = regexReplace(P_REMOVE_SELF_BLANKS.get(tag), <span class="hljs-string">&quot;&quot;</span>, result);<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> result;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">regexReplace</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Pattern regex_pattern, <span class="hljs-keyword">final</span> String replacement, <span class="hljs-keyword">final</span> String s)</span><br>   &#123;<br>      <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> regex_pattern.matcher(s);<br>      <span class="hljs-keyword">return</span> m.replaceAll(replacement);<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">processTag</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String s)</span><br>   &#123;<br>      <span class="hljs-comment">// ending tags</span><br>      <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> P_END_TAG.matcher(s);<br>      <span class="hljs-keyword">if</span> (m.find())<br>      &#123;<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">1</span>).toLowerCase();<br>         <span class="hljs-keyword">if</span> (allowed(name))<br>         &#123;<br>            <span class="hljs-keyword">if</span> (!inArray(name, vSelfClosingTags))<br>            &#123;<br>               <span class="hljs-keyword">if</span> (vTagCounts.containsKey(name))<br>               &#123;<br>                  vTagCounts.put(name, vTagCounts.get(name) - <span class="hljs-number">1</span>);<br>                  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;/&quot;</span> + name + <span class="hljs-string">&quot;&gt;&quot;</span>;<br>               &#125;<br>            &#125;<br>         &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// starting tags</span><br>      m = P_START_TAG.matcher(s);<br>      <span class="hljs-keyword">if</span> (m.find())<br>      &#123;<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">1</span>).toLowerCase();<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">2</span>);<br>         <span class="hljs-type">String</span> <span class="hljs-variable">ending</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">3</span>);<br><br>         <span class="hljs-comment">// debug( &quot;in a starting tag, name=&#x27;&quot; + name + &quot;&#x27;; body=&#x27;&quot; + body + &quot;&#x27;; ending=&#x27;&quot; + ending + &quot;&#x27;&quot; );</span><br>         <span class="hljs-keyword">if</span> (allowed(name))<br>         &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Matcher</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> P_QUOTED_ATTRIBUTES.matcher(body);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Matcher</span> <span class="hljs-variable">m3</span> <span class="hljs-operator">=</span> P_UNQUOTED_ATTRIBUTES.matcher(body);<br>            <span class="hljs-keyword">final</span> List&lt;String&gt; paramNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">final</span> List&lt;String&gt; paramValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">while</span> (m2.find())<br>            &#123;<br>               paramNames.add(m2.group(<span class="hljs-number">1</span>)); <span class="hljs-comment">// ([a-z0-9]+)</span><br>               paramValues.add(m2.group(<span class="hljs-number">3</span>)); <span class="hljs-comment">// (.*?)</span><br>            &#125;<br>            <span class="hljs-keyword">while</span> (m3.find())<br>            &#123;<br>               paramNames.add(m3.group(<span class="hljs-number">1</span>)); <span class="hljs-comment">// ([a-z0-9]+)</span><br>               paramValues.add(m3.group(<span class="hljs-number">3</span>)); <span class="hljs-comment">// ([^\&quot;\\s&#x27;]+)</span><br>            &#125;<br><br>            String paramName, paramValue;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ii &lt; paramNames.size(); ii++)<br>            &#123;<br>               paramName = paramNames.get(ii).toLowerCase();<br>               paramValue = paramValues.get(ii);<br><br>               <span class="hljs-comment">// debug( &quot;paramName=&#x27;&quot; + paramName + &quot;&#x27;&quot; );</span><br>               <span class="hljs-comment">// debug( &quot;paramValue=&#x27;&quot; + paramValue + &quot;&#x27;&quot; );</span><br>               <span class="hljs-comment">// debug( &quot;allowed? &quot; + vAllowed.get( name ).contains( paramName ) );</span><br><br>               <span class="hljs-keyword">if</span> (allowedAttribute(name, paramName))<br>               &#123;<br>                  <span class="hljs-keyword">if</span> (inArray(paramName, vProtocolAtts))<br>                  &#123;<br>                     paramValue = processParamProtocol(paramValue);<br>                  &#125;<br>                  params.append(<span class="hljs-string">&#x27; &#x27;</span>).append(paramName).append(<span class="hljs-string">&quot;=\\\&quot;&quot;</span>).append(paramValue).append(<span class="hljs-string">&quot;\\\&quot;&quot;</span>);<br>               &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (inArray(name, vSelfClosingTags))<br>            &#123;<br>               ending = <span class="hljs-string">&quot; /&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (inArray(name, vNeedClosingTags))<br>            &#123;<br>               ending = <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (ending == <span class="hljs-literal">null</span> || ending.length() &lt; <span class="hljs-number">1</span>)<br>            &#123;<br>               <span class="hljs-keyword">if</span> (vTagCounts.containsKey(name))<br>               &#123;<br>                  vTagCounts.put(name, vTagCounts.get(name) + <span class="hljs-number">1</span>);<br>               &#125;<br>               <span class="hljs-keyword">else</span><br>               &#123;<br>                  vTagCounts.put(name, <span class="hljs-number">1</span>);<br>               &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>               ending = <span class="hljs-string">&quot; /&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;&quot;</span> + name + params + ending + <span class="hljs-string">&quot;&gt;&quot;</span>;<br>         &#125;<br>         <span class="hljs-keyword">else</span><br>         &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>         &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// comments</span><br>      m = P_COMMENT.matcher(s);<br>      <span class="hljs-keyword">if</span> (!stripComment &amp;&amp; m.find())<br>      &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;&quot;</span> + m.group() + <span class="hljs-string">&quot;&gt;&quot;</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">processParamProtocol</span><span class="hljs-params">(String s)</span><br>   &#123;<br>      s = decodeEntities(s);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> P_PROTOCOL.matcher(s);<br>      <span class="hljs-keyword">if</span> (m.find())<br>      &#123;<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">1</span>);<br>         <span class="hljs-keyword">if</span> (!inArray(protocol, vAllowedProtocols))<br>         &#123;<br>            <span class="hljs-comment">// bad protocol, turn into local anchor link instead</span><br>            s = <span class="hljs-string">&quot;#&quot;</span> + s.substring(protocol.length() + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (s.startsWith(<span class="hljs-string">&quot;#//&quot;</span>))<br>            &#123;<br>               s = <span class="hljs-string">&quot;#&quot;</span> + s.substring(<span class="hljs-number">3</span>);<br>            &#125;<br>         &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> s;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">decodeEntities</span><span class="hljs-params">(String s)</span><br>   &#123;<br>      <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><br>      <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> P_ENTITY.matcher(s);<br>      <span class="hljs-keyword">while</span> (m.find())<br>      &#123;<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">match</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">1</span>);<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">decimal</span> <span class="hljs-operator">=</span> Integer.decode(match).intValue();<br>         m.appendReplacement(buf, Matcher.quoteReplacement(chr(decimal)));<br>      &#125;<br>      m.appendTail(buf);<br>      s = buf.toString();<br><br>      buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>      m = P_ENTITY_UNICODE.matcher(s);<br>      <span class="hljs-keyword">while</span> (m.find())<br>      &#123;<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">match</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">1</span>);<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">decimal</span> <span class="hljs-operator">=</span> Integer.valueOf(match, <span class="hljs-number">16</span>).intValue();<br>         m.appendReplacement(buf, Matcher.quoteReplacement(chr(decimal)));<br>      &#125;<br>      m.appendTail(buf);<br>      s = buf.toString();<br><br>      buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>      m = P_ENCODE.matcher(s);<br>      <span class="hljs-keyword">while</span> (m.find())<br>      &#123;<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">match</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">1</span>);<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">decimal</span> <span class="hljs-operator">=</span> Integer.valueOf(match, <span class="hljs-number">16</span>).intValue();<br>         m.appendReplacement(buf, Matcher.quoteReplacement(chr(decimal)));<br>      &#125;<br>      m.appendTail(buf);<br>      s = buf.toString();<br><br>      s = validateEntities(s);<br>      <span class="hljs-keyword">return</span> s;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">validateEntities</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String s)</span><br>   &#123;<br>      <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><br>      <span class="hljs-comment">// validate entities throughout the string</span><br>      <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> P_VALID_ENTITIES.matcher(s);<br>      <span class="hljs-keyword">while</span> (m.find())<br>      &#123;<br>         <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">1</span>); <span class="hljs-comment">// ([^&amp;;]*)</span><br>         <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">two</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">2</span>); <span class="hljs-comment">// (?=(;|&amp;|$))</span><br>         m.appendReplacement(buf, Matcher.quoteReplacement(checkEntity(one, two)));<br>      &#125;<br>      m.appendTail(buf);<br><br>      <span class="hljs-keyword">return</span> encodeQuotes(buf.toString());<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">encodeQuotes</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String s)</span><br>   &#123;<br>      <span class="hljs-keyword">if</span> (encodeQuotes)<br>      &#123;<br>         <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>         <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> P_VALID_QUOTES.matcher(s);<br>         <span class="hljs-keyword">while</span> (m.find())<br>         &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">1</span>); <span class="hljs-comment">// (&gt;|^)</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">two</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">2</span>); <span class="hljs-comment">// ([^&lt;]+?)</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">three</span> <span class="hljs-operator">=</span> m.group(<span class="hljs-number">3</span>); <span class="hljs-comment">// (&lt;|$)</span><br>            <span class="hljs-comment">// 不替换双引号为&amp;quot;，防止json格式无效 regexReplace(P_QUOTE, &quot;&amp;quot;&quot;, two)</span><br>            m.appendReplacement(buf, Matcher.quoteReplacement(one + two + three));<br>         &#125;<br>         m.appendTail(buf);<br>         <span class="hljs-keyword">return</span> buf.toString();<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>         <span class="hljs-keyword">return</span> s;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> String <span class="hljs-title function_">checkEntity</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String preamble, <span class="hljs-keyword">final</span> String term)</span><br>   &#123;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;;&quot;</span>.equals(term) &amp;&amp; isValidEntity(preamble) ? <span class="hljs-string">&#x27;&amp;&#x27;</span> + preamble : <span class="hljs-string">&quot;&amp;amp;&quot;</span> + preamble;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValidEntity</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String entity)</span><br>   &#123;<br>      <span class="hljs-keyword">return</span> inArray(entity, vAllowedEntities);<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">inArray</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String s, <span class="hljs-keyword">final</span> String[] array)</span><br>   &#123;<br>      <span class="hljs-keyword">for</span> (String item : array)<br>      &#123;<br>         <span class="hljs-keyword">if</span> (item != <span class="hljs-literal">null</span> &amp;&amp; item.equals(s))<br>         &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">allowed</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String name)</span><br>   &#123;<br>      <span class="hljs-keyword">return</span> (vAllowed.isEmpty() || vAllowed.containsKey(name)) &amp;&amp; !inArray(name, vDisallowed);<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">allowedAttribute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String name, <span class="hljs-keyword">final</span> String paramName)</span><br>   &#123;<br>      <span class="hljs-keyword">return</span> allowed(name) &amp;&amp; (vAllowed.isEmpty() || vAllowed.get(name).contains(paramName));<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>前后端组合使用，可解决xss问题</p><h2 id="安全无小事！！！"><a href="#安全无小事！！！" class="headerlink" title="安全无小事！！！"></a>安全无小事！！！</h2><p><a href="https://security.tencent.com/index.php/blog/msg/53">存储型XSS漏洞解决方案</a></p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站任意文件下载或读取</title>
    <link href="/2023/06/20/safe-http-any-file-download/"/>
    <url>/2023/06/20/safe-http-any-file-download/</url>
    
    <content type="html"><![CDATA[<p>项目中下载方法没有安全校验，导致脚本注入，可以下载服务器任意路径下的文件。<br>对此总结了一下修复办法，方便大家参考，修复。</p><p>以下是漏洞的一些内容：</p><h2 id="安全漏洞描述"><a href="#安全漏洞描述" class="headerlink" title="安全漏洞描述"></a>安全漏洞描述</h2><p>任意文件下载或读取漏洞主要是由于应用系统在提供文件下载或读取功能时，在文件路径参数中直接指定文件路径的同时并没有对文件路径的合法性进行校验，<br>导致攻击者可通过目录跳转(..\或..&#x2F;)的方式下载或读取到原始指定路径之外的文件。<br>攻击者最终可通过该漏洞下载或读取系统上的任意文件，如数据库文件、应用系统源代码、密码配置信息等重要敏感信息，造成系统的敏感信息泄露。</p><h3 id="重现方法"><a href="#重现方法" class="headerlink" title="重现方法"></a>重现方法</h3><p>对存在文件下载或文件读取功能的页面进行测试，查看所提交的参数中是否包含文件名或文件目录，尝试提交参数值查看是否可下载或读取其他目录的文件内容；  </p><p>如：</p><p>原始下载功能路径为<br><a href="http://www.example.com/donwload.jsp?filename=test123456789.pdf">http://www.example.com/donwload.jsp?filename=test123456789.pdf</a></p><p>其中文件路径参数为filename，通过..&#x2F;对路径进行跳转尝试下载其他目录下的文件，修改filename参数为..&#x2F;..&#x2F;WEB-INF&#x2F;web.xml尝试下载JSP网站的配置文件（测试过程中需适当增加..&#x2F;跳转字符串）；如提交<br><a href="http://www.example.com/donwload.jsp?filename=../../WEB-INF/web.xml">http://www.example.com/donwload.jsp?filename=../../WEB-INF/web.xml</a></p><p>查看是否成功下载web.xml文件。</p><p>另一种情况如下：<br><a href="http://www.example.com/donwload.jsp?filepath=uploadfile&filename=test123.pdf">http://www.example.com/donwload.jsp?filepath=uploadfile&amp;filename=test123.pdf</a><br>该功能通过filepath以及filename指定下载目录以及下载文件名，可修改filepath参数值进行路径跳转，<br>同时修改filename值指定文件名；如提交<br><a href="http://www.example.com/donwload.jsp?filepath=../../WEB-INF&filename=web.xml">http://www.example.com/donwload.jsp?filepath=../../WEB-INF&amp;filename=web.xml</a></p><p>查看是否成功下载web.xml文件。</p><h2 id="风险等级：高"><a href="#风险等级：高" class="headerlink" title="风险等级：高"></a>风险等级：高</h2><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>知道了问题，一般可以通过在代码层级增加关键字符过滤来修复。<br>比如：</p><ol><li>对path参数进行过滤，依次过滤“.”、“..”、“&#x2F;”、“”等字符。</li><li>或者对于下载文件的目录做好限制，只能下载指定目录下的文件，</li><li>或者将要下载的资源文件路径存入数据库，附件下载时指定数据库中的id即可，id即对应的资源。<br>服务器级建议</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs code">private Pair&lt;Boolean,String&gt; checkFileAttack(String filePath) &#123;<br>    if (StringUtils.isEmpty(filePath)) &#123;<br>        return Pair.of(false, &quot;文件名为空&quot;);<br>    &#125;<br><br>    if (filePath.startsWith(&quot;/&quot;)) &#123;<br>        return Pair.of(false, &quot;文件名不能以/开始&quot;);<br>    &#125;<br><br>    // 禁止文件名中包含  “%00”，“..”，“./”，“#/” ，&quot;~/&quot; , &quot;^/&quot;    Pattern pattern = Pattern.compile(&quot;(\\.\\.|~/|^/|\\./|#/|%00)&quot;);<br>    if (pattern.matcher(filePath).matches()) &#123;<br>        return Pair.of(false, &quot;文件名不合法&quot;);<br>    &#125;<br><br>    if (!ArrayUtils.contains(MimeTypeUtils.DEFAULT_ALLOWED_EXTENSION, FileTypeUtils.getFileType(filePath)))<br>    &#123;<br>        return Pair.of(false, &quot;非法格式&quot;);<br>    &#125;<br><br>    return Pair.of(true, &quot;校验成功&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><p>或者，在服务部署的时候，通过下面的目录固化部署路径，令web请求不能逃逸到整个服务器。</p><ul><li>使用chroot 命令，固化服务路径</li></ul><h2 id="安全无小事！！！"><a href="#安全无小事！！！" class="headerlink" title="安全无小事！！！"></a>安全无小事！！！</h2>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>URL存在http host头攻击漏洞的解决办法</title>
    <link href="/2023/06/20/safe-http-url-header-attack/"/>
    <url>/2023/06/20/safe-http-url-header-attack/</url>
    
    <content type="html"><![CDATA[<p>项目中遇到http host头攻击的解决办法，支持nginx，apache 两种办法。</p><p>以下是漏洞的一些内容：</p><h2 id="安全漏洞描述"><a href="#安全漏洞描述" class="headerlink" title="安全漏洞描述"></a>安全漏洞描述</h2><p>为了方便的获得网站域名，开发人员一般依赖于HTTP Host header。例如，在php里用_SERVER[“HTTP_HOST”]。<br>但是这个header是不可信赖的，如果应用程序没有对host header值进行处理，就有可能造成恶意代码的传入。</p><p><img src="/images/tech/safe/safe-http-host-attack.png" alt="http-host-attack"></p><h2 id="风险等级：高"><a href="#风险等级：高" class="headerlink" title="风险等级：高"></a>风险等级：高</h2><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>web应用程序应该使用SERVER_NAME而不是host header。 在Apache和Nginx里可以通过设置一个虚拟机来记录所有的非法host header。<br>在Nginx里还可以通过指定一个SERVER_NAME名单，Apache也可以通过指定一个SERVER_NAME名单并开启UseCanonicalName选项。</p><p>本质上就是在服务侧鉴定请求来源， 非法来源直接过滤掉。</p><h3 id="nginx-解决方案"><a href="#nginx-解决方案" class="headerlink" title="nginx 解决方案"></a>nginx 解决方案</h3><p>打开nginx的网站配置文件，一般为 <code>/etc/nginx/conf.d/xxx.conf</code><br>添加如下配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  <span class="hljs-number">127.0.0.1</span>;<br>    <span class="hljs-comment"># 防止http host 攻击的配置： 仅允许 指定域名访问，其他域名返回403</span><br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$http_Host</span> !<span class="hljs-regexp">~* ^domain.com|127.0.0.1:80$)</span> &#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>    &#125;<br>    <span class="hljs-comment"># 其他配置</span><br>&#125;<br></code></pre></td></tr></table></figure><p>重启nginx即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="Apache解决方案"><a href="#Apache解决方案" class="headerlink" title="Apache解决方案"></a>Apache解决方案</h3><p>打开Apache的配置 ， 一般为 <code>/conf/httpd.conf</code><br>添加如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf">RewriteEngine on<br>RewriteCond %&#123;HTTP_HOST&#125; !^www.domain.com$ [NC]<br>RewriteRule ^(.*)$ /403.html<br><br></code></pre></td></tr></table></figure><p>重启apache即可</p><h2 id="安全无小事！！！"><a href="#安全无小事！！！" class="headerlink" title="安全无小事！！！"></a>安全无小事！！！</h2><p><a href="https://m.freebuf.com/articles/web/336709.html">Web漏洞之HOST头攻击</a></p><p><a href="https://www.wangan.com/p/7fy7475771d68df5">host头攻击</a></p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>安全</tag>
      
      <tag>apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中间件版本号泄露问题修复</title>
    <link href="/2023/06/19/safe-dev-info-leak/"/>
    <url>/2023/06/19/safe-dev-info-leak/</url>
    
    <content type="html"><![CDATA[<p>开发过程中的一些信息带到了线上，要及时修复，不如坏人就顺藤摸瓜找来了。</p><p>以下是漏洞的一些内容：</p><h2 id="安全漏洞描述"><a href="#安全漏洞描述" class="headerlink" title="安全漏洞描述"></a>安全漏洞描述</h2><p>信息泄露主要是由于开发人员或运维管理人员的疏忽所导致。如未及时删除调试页面、未关闭程序调试功能、未屏蔽程序错误信息、备份文件未删除、数据库备份文件未删除、未屏蔽敏感数据信息等多个方面所导致的不同严重程度的信息泄露。攻击者可通过所掌握的信息进一步分析攻击目标，从而有效发起下一步的有效攻击。</p><p>常见的问题有：</p><ol><li>swagger 接口未关闭</li><li>druid监控台未关闭</li><li>等</li></ol><h2 id="风险等级：低"><a href="#风险等级：低" class="headerlink" title="风险等级：低"></a>风险等级：低</h2><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>关闭相关接口的线上权限，或增加权限控制  </p><p>1，swagger 关闭入口的方式<br>方法a: 使用注解 @Value() 推荐使用， 然后在不同的配置文件里指定开关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs code">@Value(&quot;$&#123;swagger.enabled&#125;&quot;)<br>private boolean enabled;<br><br>@Bean<br>public Docket createRestApi()<br>&#123;<br>    return new Docket(DocumentationType.V1)<br>            // 是否启用Swagger           <br>             .enable(enabled)<br>            // 用来创建该API的基本信息，展示在文档的页面中（自定义展示的信息）            <br>            .apiInfo(apiInfo())<br>            // 设置哪些接口暴露给Swagger展示           <br>             .select()<br>            // 扫描所有有注解的api，用这种方式更灵活           <br>             .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))<br>            // 扫描指定包中的swagger注解            <br>            // .apis(RequestHandlerSelectors.basePackage(&quot;com.ruoyi.project.tool.swagger&quot;))           <br>             // 扫描所有 .apis(RequestHandlerSelectors.any())            <br>             .paths(PathSelectors.any())<br>            .build()<br>            /* 设置安全模式，swagger可以设置访问token */          <br>            .securitySchemes(securitySchemes())<br>            .securityContexts(securityContexts())<br>            .pathMapping(pathMapping);<br>&#125;<br></code></pre></td></tr></table></figure><p>方法b:  使用注解@Profile({“dev”,“test”}) 表示在开发或测试环境开启，而在生产关闭<br><img src="/images/tech/safe/swagger-switch2.png" alt="swagger-switch"><br>其实ab 的方式是一样的，都是不同的环境开关不同。</p><p>2， druid关闭监控台的方式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.druid.webStatFilter.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.datasource.druid.statViewServlet.enabled</span>=<span class="hljs-string">false</span><br></code></pre></td></tr></table></figure><p>3， 一些其他接口增加权限认证<br>通过spring的httpSecurity 增加路径鉴权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs code">protected void configure(HttpSecurity httpSecurity) throws Exception &#123;<br>    // something<br>    // druid 接口要鉴权<br>    httpSecurity..antMatchers(&quot;/druid/**&quot;).authenticated()<br>    // something<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="安全无小事！！！"><a href="#安全无小事！！！" class="headerlink" title="安全无小事！！！"></a>安全无小事！！！</h2>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AntPathMatcher VS PathPattern</title>
    <link href="/2023/05/21/spring-spring-path-matcher/"/>
    <url>/2023/05/21/spring-spring-path-matcher/</url>
    
    <content type="html"><![CDATA[<p>spring路径匹配，在spring5以后，有了AntPathMatcher 和 PathPattern 两种方式。</p><p>PathPattern是在spring 5 以后新增的。本文就介绍 AntPathMatcher 和 PathPattern 的异同，以及这两者的使用场景和方式。</p><h1 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h1><p>AntPathMatcher在1.x版本就存在了，在spring5以前，一直作为spring的路径匹配器存在。</p><p>AntPathMatcher在spring中是作为工具类存在的，所以直接<code>new</code>对象即可。</p><p>PathPattern出现在spring5.x版本中, 旨在用于替换掉较为“古老”的AntPathMatcher。</p><p>PathPattern是spring一个内部类，不能通过public的方式来创建。不过spring 官方提供了一个<code>parser</code>开提供PathPattern的默认实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 构建AntPathMatcher 实例</span><br><span class="hljs-type">AntPathMatcher</span> <span class="hljs-variable">antPathMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br><span class="hljs-comment">// 构建PathPattern 实例</span><br><span class="hljs-type">PathPatternParser</span> <span class="hljs-variable">patternParser</span> <span class="hljs-operator">=</span> PathPatternParser.defaultInstance;<br></code></pre></td></tr></table></figure><h1 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h1><p>AntPathMatcher 官方文档：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">映射使用以下规则匹配 URL： <br>? 匹配一个字符<br>* 匹配零个或多个字符<br>** 匹配路径中的零 个 或多个目录<br>&#123;spring:[a-z]+&#125; 将正则表达 [a-z]+ 式匹配为名为“spring”的路径变量<br>        <br>例子<br>com<span class="hljs-regexp">/t?st.jsp — 匹配 com/</span>test.jsp ，但也 com<span class="hljs-regexp">/tast.jsp 匹配或 com/</span>txst.jsp<br>com/*.jsp— 匹配目录中com的所有.jsp文件<br>com<span class="hljs-regexp">/**/</span>test.jsp— 匹配路径下com的所有test.jsp文件<br>org<span class="hljs-regexp">/springframework/</span>**<span class="hljs-regexp">/*.jsp— 匹配路径下org/</span>springframework的所有.jsp文件<br>org<span class="hljs-regexp">/**/</span>servlet<span class="hljs-regexp">/bla.jsp — 匹配 org/</span>springframework<span class="hljs-regexp">/servlet/</span>bla.jsp ，但也 org<span class="hljs-regexp">/springframework/</span>testing<span class="hljs-regexp">/servlet/</span>bla.jsp 和 org<span class="hljs-regexp">/servlet/</span>bla.jsp<br>com<span class="hljs-regexp">/&#123;filename:\\w+&#125;.jsp将匹配com/</span>test.jsp该值testfilename并将其分配给变量<br>注意： 模式和路径必须都是绝对的，或者必须都是相对的，才能使两者匹配。因此，建议此实现的用户清理模式，以便在使用模式的上下文中为“/”作为前缀。<br></code></pre></td></tr></table></figure><p>PathPattern 官方文档</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">PathPattern 使用以下规则匹配 URL 路径： <br>? 匹配一个字符<br>* 匹配路径段中的零个或多个字符<br>** 匹配零个或多个 路径段 ，直到路径结束<br>&#123;spring&#125; 匹配 路径段 并将其捕获为名为“spring”的变量<br>&#123;spring:[a-z]+&#125; 将正则表达 [a-z]+ 式匹配为名为“spring”的路径变量<br>&#123;*spring&#125; 匹配零个或多个 路径段 ，直到路径的末尾，并将其捕获为名为“spring”的变量<br>注意： 与 org.springframework.util.AntPathMatcher相反， ** 仅在模式的末尾受支持。例如 <span class="hljs-string">/pages/</span>&#123;**&#125; ，是有效的，但不是 <span class="hljs-string">/pages/</span>&#123;**&#125;<span class="hljs-string">/details</span> 。这同样适用于捕获变体 &#123;*spring&#125;。目的是在比较模式的特异性时消除歧义。<br><br>例子<br><span class="hljs-string">/pages/t</span>?st.html — 匹配 <span class="hljs-string">/pages/test.html</span> ， <span class="hljs-string">/pages/tXst.html</span> 但不是 <span class="hljs-string">/pages/toast.html</span><br><span class="hljs-string">/resources/</span>*<span class="hljs-string">.png</span>— 匹配目录中resources的所有<span class="hljs-string">.png</span>文件<br><span class="hljs-string">/resources/</span>** — 匹配路径下 <span class="hljs-string">/resources/</span> 的所有文件，包括 <span class="hljs-string">/resources/image.png</span> 和 <span class="hljs-string">/resources/css/spring.css</span><br><span class="hljs-string">/resources/</span>&#123;*path&#125; — 匹配 和 下的所有文件 <span class="hljs-string">/resources/</span>， <span class="hljs-string">/resources</span>并在名为 “path” 的变量中捕获它们的相对路径; <span class="hljs-string">/resources/image.png</span> 将与 “path” 匹配 → “<span class="hljs-string">/image.png</span>”，并将 <span class="hljs-string">/resources/css/spring.css</span> 与 “path” 匹配 → “<span class="hljs-string">/css/spring.css</span>”<br><span class="hljs-string">/resources/</span>&#123;filename:\\w+&#125;<span class="hljs-string">.dat</span>将匹配<span class="hljs-string">/resources/spring.dat</span>该值<span class="hljs-string">&quot;spring&quot;</span>filename并将其分配给变量<br></code></pre></td></tr></table></figure><p>可见，AntPathMatcher 和 PathPattern 的匹配规则是差不多的，都支持<code>?</code> <code>*</code> <code>**</code> 已经部分正则匹配。</p><p>但PathPattern增加了路径匹配并提取结果的能力，同时为了消除歧义，不再支持路径中间的<code>**</code>匹配，其他一样。</p><p>demo:   </p><p>*匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPathMatch</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AntPathMatcher</span> <span class="hljs-variable">antPathMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br>        <span class="hljs-type">PathPatternParser</span> <span class="hljs-variable">patternParser</span> <span class="hljs-operator">=</span> PathPatternParser.defaultInstance;<br><br>        List&lt;String&gt; list = List.of(<span class="hljs-string">&quot;aaa_1.csv&quot;</span>, <span class="hljs-string">&quot;aaa_2.csv&quot;</span>, <span class="hljs-string">&quot;aaa_3.csv&quot;</span>, <span class="hljs-string">&quot;aaa_1.xlsx&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;aaa.pdf&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pattern1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a*.csv&quot;</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;by antPathMatcher..&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;pattern %s match %s is %s %n&quot;</span>, pattern1,s, antPathMatcher.match(pattern1,s));<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;by patternParser..&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;pattern %s match %s is %s %n&quot;</span>, pattern1,s, patternParser.parse(pattern1).matches(PathContainer.parsePath(s)));<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 结果</span><br><span class="hljs-comment">// by antPathMatcher..</span><br><span class="hljs-comment">// pattern a*.csv match aaa_1.csv is true</span><br><span class="hljs-comment">// pattern a*.csv match aaa_2.csv is true</span><br><span class="hljs-comment">// pattern a*.csv match aaa_3.csv is true</span><br><span class="hljs-comment">// pattern a*.csv match aaa_1.xlsx is false</span><br><span class="hljs-comment">// pattern a*.csv match aaa is false</span><br><span class="hljs-comment">// pattern a*.csv match aaa.pdf is false</span><br><span class="hljs-comment">// by patternParser..</span><br><span class="hljs-comment">// pattern a*.csv match aaa_1.csv is true</span><br><span class="hljs-comment">// pattern a*.csv match aaa_2.csv is true</span><br><span class="hljs-comment">// pattern a*.csv match aaa_3.csv is true</span><br><span class="hljs-comment">// pattern a*.csv match aaa_1.xlsx is false</span><br><span class="hljs-comment">// pattern a*.csv match aaa is false</span><br><span class="hljs-comment">// pattern a*.csv match aaa.pdf is false </span><br></code></pre></td></tr></table></figure><p>PathPattern 路径提取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPathMatch</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AntPathMatcher</span> <span class="hljs-variable">antPathMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br>        <span class="hljs-type">PathPatternParser</span> <span class="hljs-variable">patternParser</span> <span class="hljs-operator">=</span> PathPatternParser.defaultInstance;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/api/hancher/&#123;*spring&#125;&quot;</span>;<br>        List&lt;String&gt; list = List.of(<span class="hljs-string">&quot;/api/hancher/a/b/c&quot;</span>, <span class="hljs-string">&quot;/api/hancher/a&quot;</span>, <span class="hljs-string">&quot;/api/hancher/a/&quot;</span>, <span class="hljs-string">&quot;/api/hancher/a/b/c.csv&quot;</span>,<span class="hljs-string">&quot;/api/test/a/b/c&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;pattern %s match %s is %s %n&quot;</span>, pattern,s, patternParser.parse(pattern).matches(PathContainer.parsePath(s)));<br>            System.out.printf(<span class="hljs-string">&quot;pattern %s match %s result %s %n&quot;</span>, pattern,s, patternParser.parse(pattern).matchAndExtract(PathContainer.parsePath(s)));<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 结果</span><br><span class="hljs-comment">//pattern /api/hancher/&#123;*spring&#125; match /api/hancher/a/b/c is true </span><br><span class="hljs-comment">//pattern /api/hancher/&#123;*spring&#125; match /api/hancher/a/b/c result PathMatchInfo[uriVariables=&#123;spring=/a/b/c&#125;, matrixVariables=&#123;&#125;] </span><br><span class="hljs-comment">//pattern /api/hancher/&#123;*spring&#125; match /api/hancher/a is true </span><br><span class="hljs-comment">//pattern /api/hancher/&#123;*spring&#125; match /api/hancher/a result PathMatchInfo[uriVariables=&#123;spring=/a&#125;, matrixVariables=&#123;&#125;] </span><br><span class="hljs-comment">//pattern /api/hancher/&#123;*spring&#125; match /api/hancher/a/ is true </span><br><span class="hljs-comment">//pattern /api/hancher/&#123;*spring&#125; match /api/hancher/a/ result PathMatchInfo[uriVariables=&#123;spring=/a/&#125;, matrixVariables=&#123;&#125;] </span><br><span class="hljs-comment">//pattern /api/hancher/&#123;*spring&#125; match /api/hancher/a/b/c.csv is true </span><br><span class="hljs-comment">//pattern /api/hancher/&#123;*spring&#125; match /api/hancher/a/b/c.csv result PathMatchInfo[uriVariables=&#123;spring=/a/b/c.csv&#125;, matrixVariables=&#123;&#125;] </span><br><span class="hljs-comment">//pattern /api/hancher/&#123;*spring&#125; match /api/test/a/b/c is false </span><br><span class="hljs-comment">//pattern /api/hancher/&#123;*spring&#125; match /api/test/a/b/c result null </span><br></code></pre></td></tr></table></figure><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p>官方说PathPattern 比 AntPathMatcher 更快一些，所以咱们验证一下：</p><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPathMatch</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AntPathMatcher</span> <span class="hljs-variable">antPathMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br>        <span class="hljs-type">PathPatternParser</span> <span class="hljs-variable">patternParser</span> <span class="hljs-operator">=</span> PathPatternParser.defaultInstance;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/api/hanc?er/**&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/api/hancher/&quot;</span> + i + <span class="hljs-string">&quot;/&quot;</span> + i + <span class="hljs-string">&quot;/a.txt&quot;</span>;<br>            System.out.println(antPathMatcher.match(pattern, path));<br><span class="hljs-comment">//            System.out.println(patternParser.parse(pattern).matches(PathContainer.parsePath(path)));</span><br>        &#125;<br>        System.out.println(System.currentTimeMillis() - start);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分别跑了5次。<br>AntPathMatcher 平均耗时：392ms<br>PathPattern 平均耗时：323.4ms<br>官方所言不虚！  </p><h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><ol><li>在满足需求的情况下，尽量选PathPattern，更快</li><li>如果需要通过*<em>匹配中间路径，或者通过</em>匹配文件扩展名这种场景，用AntPathMatcher， 因为PathPattern不支持。</li></ol>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring服务form表单内容过大导致后端参数接收为null情况</title>
    <link href="/2023/04/28/exception-spring-http-form-too-big-err/"/>
    <url>/2023/04/28/exception-spring-http-form-too-big-err/</url>
    
    <content type="html"><![CDATA[<h2 id="问题现状"><a href="#问题现状" class="headerlink" title="问题现状"></a>问题现状</h2><p>今天开发遇到一个奇怪的问题，前端的form表单数据提交的时候，数据量比较小的时候，内容能正常保存。  </p><p>当数据量达到1.6M的时候，后端就开始报npe异常，参数字段就开始接收不到了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>经过排查，发现这个和编程无关。<br>springboot 默认集成了tomcat容器，tomcat对form表单的大小有限制，默认2M。</p><p>知道了问题所在，解决起来就很简单了。<br>方案1： 增加tomcat的form表单容量配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.tomcat.max-http-form-post-size</span>=<span class="hljs-string">10MB</span><br></code></pre></td></tr></table></figure><p>方案2：去掉tomcat的form容量配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.tomcat.max-http-form-post-size</span>=<span class="hljs-string">-1</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.server.server.tomcat.max-http-form-post-size">spring官方配置</a></p>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>异常</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何给bash脚本进行加密？</title>
    <link href="/2023/04/20/bash-shc/"/>
    <url>/2023/04/20/bash-shc/</url>
    
    <content type="html"><![CDATA[<p>当我们写的bash脚本，有的时候需要分享给别人用，但是又不太想让别人看到实现逻辑。没到这个时候，就想着要是能给这个脚本加密一下就好了。<br>仅加密脚本的内容，又不影响脚本的运行，多好。要知道在计算机的世界，只有想不到，没有做不到！<br>你不是第一个遇到这个问题的人，而且有比你更有行动力的人把这个问题解决了。  </p><p>今天我们就介绍两个工具来解决这个问题。</p><h1 id="gzexe"><a href="#gzexe" class="headerlink" title="gzexe"></a>gzexe</h1><p>mac系统上自带的一个工具，可以在mac系统上将一个可执行的bash脚本加密。<br>使用方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">usage: gzexe [-d] file ...<br></code></pre></td></tr></table></figure><p>我们以hello.sh 脚本为例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello World &quot;</span><br></code></pre></td></tr></table></figure><p>操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">mac % gzexe hello.sh <br>gzexe: cannot compress hello.sh, it is not executable <span class="hljs-comment"># hello.sh 必须是一个可执行文件</span><br><br><span class="hljs-comment"># 修改hello.sh 为可执行文件</span><br>mac % <span class="hljs-built_in">chmod</span> 744 hello.sh <br><br>mac % gzexe hello.sh <br>hello.sh:   -4.3%  <br><br><span class="hljs-comment"># 成功，并且体检压缩了4.3% 我们执行一下ls 看看发生了什么</span><br>mac % <span class="hljs-built_in">ls</span><br>hello.shhello.sh~<br><br><span class="hljs-comment"># 这个时候我们发现hello.sh已经加密了，但我们发现多了一个hello.sh~文件。 这个就是我们的加密前的源文件。</span><br><span class="hljs-comment"># 源文件还在？我们把hello.sh~删了 ， 看看还不能运行。</span><br>mac % <span class="hljs-built_in">rm</span> hello.sh~<br>mac % sh hello.sh <br>Hello World <span class="hljs-comment"># 依然可以运行</span><br></code></pre></td></tr></table></figure><p>但是我们把hello.sh放到其他系统上执行时，会发现失败。但是在mac本地系统执行时，还是可以的.</p><h1 id="shc-Shell-Script-Compiler"><a href="#shc-Shell-Script-Compiler" class="headerlink" title="shc (Shell Script Compiler)"></a>shc (Shell Script Compiler)</h1><p>shell(bash) 脚本编译指令。mac系统原生不支持，可以通过下面方式安装。  </p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li>检查本地是否装有shc， 直接输入shc命令</li><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># linux </span><br>yum install shc<br><br><span class="hljs-comment"># mac</span><br>brew install shc<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">mac % shc -h<br>shc Version 4.0.3, Generic Shell Script Compiler<br>shc GNU GPL Version 3 Md Jahidul Hamid &lt;jahidulhamid@yahoo.com&gt;<br>shc Usage: shc [-e <span class="hljs-built_in">date</span>] [-m addr] [-i iopt] [-x cmnd] [-l lopt] [-o outfile] [-rvDSUHCABh] -f script<br><br>    -e %s  Expiration <span class="hljs-built_in">date</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dd</span>/mm/yyyy format [none]<br>    -m %s  Message to display upon expiration [<span class="hljs-string">&quot;Please contact your provider&quot;</span>]<br>    -f %s  File name of the script to compile<br>    -i %s  Inline option <span class="hljs-keyword">for</span> the shell interpreter i.e: -e<br>    -x %s  eXec <span class="hljs-built_in">command</span>, as a <span class="hljs-built_in">printf</span> format i.e: <span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;%s&#x27;</span>,@ARGV);<br>    -l %s  Last shell option i.e: --<br>    -o %s  output filename<br>    -r     Relax security. Make a redistributable binary<br>    -v     Verbose compilation<br>    -S     Switch ON setuid <span class="hljs-keyword">for</span> root callable programs [OFF]<br>    -D     Switch ON debug <span class="hljs-built_in">exec</span> calls [OFF]<br>    -U     Make binary untraceable [no]<br>    -H     Hardening : extra security protection [no]<br>           Require bourne shell (sh) and parameters are not supported<br>    -C     Display license and <span class="hljs-built_in">exit</span><br>    -A     Display abstract and <span class="hljs-built_in">exit</span><br>    -B     Compile <span class="hljs-keyword">for</span> busybox<br>    -h     Display <span class="hljs-built_in">help</span> and <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>同样以hello.sh脚本为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 普通加密</span><br>mac % shc -v -f hello.sh<br>mac % <span class="hljs-built_in">ls</span> <br>hello.sh <span class="hljs-comment"># 原始脚本</span><br>hello.sh.x<span class="hljs-comment"># 可执行脚本</span><br>hello.sh.x.c <span class="hljs-comment"># 可执行脚本c语音文件</span><br><br><span class="hljs-comment"># 设置过期时间的加密脚本</span><br>mac % shc -v -e 20/04/2023 -m <span class="hljs-string">&quot;过期了&quot;</span> -f hello.sh -o hello_expir.sh <br>shc -e Thu Apr 20 00:00:00 2023<br>shc -e Thu Apr 20 00:00:00 2023<br>shc shll=bash<br>shc [-i]=-c<br>shc [-x]=<span class="hljs-built_in">exec</span> <span class="hljs-string">&#x27;%s&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br>shc [-l]=<br>shc opts=<br>shc: cc   hello.sh.x.c -o hello_expir.sh<br>shc: strip hello_expir.sh<br>shc: <span class="hljs-built_in">chmod</span> ug=rwx,o=rx hello_expir.sh<br><br><span class="hljs-comment"># 查看结果</span><br>mac % <span class="hljs-built_in">ls</span> <br>hello.shhello.sh.x.chello_expir.sh<br><br><span class="hljs-comment"># 过期效果</span><br>mac % ./hello_expir.sh <br>./hello_expir.sh: has expired!<br>过期了<br><br></code></pre></td></tr></table></figure><p>同gzexe一样，加密后的脚本一样不支持跨平台运行，即使是编译成c语言的二进制脚本。因为可执行文件会依赖不同系统的动态链接库。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://opensource.apple.com/source/file_cmds/file_cmds-272/gzip/gzexe.auto.html">gzexe 源码</a></p><p><a href="https://www.geeksforgeeks.org/gzexe-command-in-linux-with-examples/">gzexe examples</a></p><p><a href="https://www.linux-magazine.com/Online/Features/SHC-Shell-Compiler">SHC-Shell-Compiler</a></p><p><a href="https://github.com/neurobin/shc">shc官网</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 20新特性简介</title>
    <link href="/2023/04/04/java-jdk-v20/"/>
    <url>/2023/04/04/java-jdk-v20/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/tech/java/jdk20-new-feature.jpeg" alt="jdk20"><br>按照JDK每半年发布一次版本的节奏, JDK20在2023年3月发布了, 本文就是简单介绍一下这次更新的新特性与改动.</p><p>一句话总结, 这仍然是jdk的一个短期支持版本,此版本包括7个 JEP（jdk增强建议），以及数百个较小的功能增强和数千个错误修复.</p><h2 id="新特性汇总"><a href="#新特性汇总" class="headerlink" title="新特性汇总"></a>新特性汇总</h2><h3 id="预览特性"><a href="#预览特性" class="headerlink" title="预览特性"></a>预览特性</h3><h4 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性:"></a>语言特性:</h4><ul><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8294078">JEP 432</a> Record Patterns</strong>(记录模式) :  第2预览阶段. 记录模式是java语言的一个新语言特性.其目的是将我们从java复杂的类构造中解放出来,更关注于数据. 一般用于一组数据构成的一个整体,比如坐标point(x,y).</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8294285">JEP 433</a> Pattern Matching for switch</strong>(switch记录模式):第4次预览, switch语法支持记录模式.</li></ul><h4 id="API库扩充"><a href="#API库扩充" class="headerlink" title="API库扩充:"></a>API库扩充:</h4><ul><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8293649">JEP 434</a> Foreign Function &amp;Memory AP</strong>(访问jvm外部函数或内存的API) : 引入一个API，通过该API，Java程序可以在Java运行时之外与代码和数据进行互操作。通过有效地调用外部函数（即JVM外部的代码），并通过安全访问外部内存（即不由JVM管理的内存），API使Java程序能够调用本机库并处理本机数据，而没有JNI的脆性和危险性。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8303262">JEP 438</a> Vector API</strong>(向量API): 第5孵化阶段.向量计算由对向量的一系列操作组成。向量 API 用来表达向量计算，该计算可以在运行时可靠地编译为支持的 CPU 架构上的最佳向量指令，从而实现优于等效标量计算的性能。向量 API 的目标是为用户提供简洁易用且与平台无关的表达范围广泛的向量计算.</li></ul><h4 id="并发增强"><a href="#并发增强" class="headerlink" title="并发增强:"></a>并发增强:</h4><ul><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8263012">JEP 429</a> Scoped Values</strong>(作用域值) : 孵化阶段.引入范围值，允许在线程内和线程之间共享不可变的数据。它们优于线程本地变量，特别是在使用大量虚拟线程时。因为变量是不可变的,也就避免了并发问题.</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8295817">JEP 436</a> Virtual Threads</strong>(虚拟线程) : 第2预览阶段. 将虚拟线程引入Java平台。虚拟线程是轻量级线程，大大减少了编写、维护和观察高吞吐量并发应用程序的工作量. 本次主要是一些核心功能升级.</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8296037">JEP 437</a> Structured Concurrency</strong>(结构化并发) : 第2孵化阶段. 通过引入结构化并发的API来简化多线程编程。结构化并发将在不同线程中运行的多个任务视为单个工作单元，从而简化错误处理和取消，提高可靠性并提高可观察性。</li></ul><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><h4 id="核心库"><a href="#核心库" class="headerlink" title="核心库"></a>核心库</h4><ul><li><strong>Support Unicode 15.0</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8284842">JDK-8284842</a>) : 支持Unicode15.0 .</li><li><strong>Print Warning to Standard Error If Bad java.io.tmpdir Setting Is Detected</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8290313">JDK-8290313</a>) : 新增一种警告输出场景</li></ul><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><ul><li><strong>New JFR Event: jdk.InitialSecurityProperty</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8292177">JDK-8292177</a>) : 新增一个新的JFR(Java Flight Recorder)事件.</li><li><strong>New JFR Event: jdk.SecurityProviderService</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8254711">JDK-8254711</a>) : 新增一个新的JFR(Java Flight Recorder)事件.</li><li><strong>Provide Poly1305 Intrinsic on x86_64 platforms with AVX512 instructions</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8288047">JDK-8288047</a>) : 此功能在x86_64平台上使用AVX512指令为SunJCE提供商的Poly1305消息身份验证代码算法提供优化。</li><li><strong>Provide ChaCha20 Intrinsics on x86_64 and aarch64 Platforms</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8247645">JDK-8247645</a>) : 此功能为SunJCE提供商提供的ChaCha20密码提供了优化的内在实现。这些优化的例程专为支持AVX、AVX2和&#x2F;或AVX512指令集的x86_64芯片组以及支持高级SIMD指令集的aarch64芯片组而设计。</li><li><strong>(D)TLS Key Exchange Named Groups</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8281236">JDK-8281236</a>) : 加密功能增强.</li><li><strong>DTLS Resumption Uses HelloVerifyRequest Messages</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8287411">JDK-8287411</a>) : 加密功能增强.</li></ul><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li><strong>Javac Warns about Type Casts in Compound Assignments with Possible Lossy Conversions</strong>(<a href="https://bugs.openjdk.org/browse/JDK-8244681">JDK-8244681</a>) : javac命令增加了有损类型强转警告.</li><li><strong>New ‘jmod –compress’ Command Line Option</strong>(<a href="https://bugs.openjdk.org/browse/JDK-8293499">JDK-8293499</a>) : 在jmod工具中添加了一个新的–compress命令行选项，以便在创建JMOD存档时指定压缩级别。接受的值是zip-[0-9]，其中zip-0不提供压缩，zip-9提供最佳压缩。默认是zip-6。</li></ul><p>jdk20 工具箱全集<br><img src="/images/tech/java/java-bin-desc.png" alt="java-bin"></p><h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h4><ul><li><strong>add bean for Remark and Cleanup Pause Time in G1</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8297247">JDK-8297247</a>) : G1垃圾回收在标记和清理阶段引入了一个新的回收bean : “G1 Concurrent GC”</li></ul><h3 id="移出功能"><a href="#移出功能" class="headerlink" title="移出功能"></a>移出功能</h3><ul><li><strong>Thread.suspend&#x2F;resume Changed to Throw UnsupportedOperationException</strong>  (<a href="https://bugs.openjdk.org/browse/JDK-8249627">JDK-8249627</a>) : 在此版本中，使用Thread.suspend()和Thread.resume()方法暂停或恢复线程的能力已被删除。方法已更改为抛出UnsupportedOperationException。这些方法本质上容易陷入僵局，自JDK 1.2（1998年）以来已被弃用。ThreadGroup中的相应方法，即暂停或恢复一组线程，已更改为在Java 19中抛出UnsupportedOperationException。</li><li><strong>Thread.Stop Changed to Throw UnsupportedOperationException</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8289610">JDK-8289610</a>) : 在此版本中，使用Thread.stop()方法“停止”线程的功能已被删除。该方法已更改为抛出UnsupportedOperationException。通过使其抛出java.lang.ThreadDeath来阻止线程本质上是不安全的。自JDK 1.2（1998）以来，停止方法已被弃用。ThreadGroup中的相应方法“停止”一组线程，已更改为在Java 19中抛出UnsupportedOperationException。同时, java.lang.ThreadDeath也被标记为废弃.</li><li><strong>Remove Support for javac -source&#x2F;-target&#x2F;–release 7</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8173605">JDK-8173605</a>) : javac移出了一些选项</li><li><strong>Improved Control of G1 Concurrent Refinement Threads</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8137022">JDK-8137022</a>): G1并发细化线程的控制已被完全取代。新控制器通常分配更少的线程。它在细化线程活动中的峰值往往较少。它还倾向于延迟细化，当对相同或附近位置有多个写入时，允许通过写入屏障进行更多过滤，从而提高屏障的效率。</li></ul><h3 id="废弃功能"><a href="#废弃功能" class="headerlink" title="废弃功能"></a>废弃功能</h3><ul><li><strong>java.net.URL Constructors Are Deprecated</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8294241">JDK-8294241</a>) : 废弃URL构造方法,推荐使用 java.net.URI 来构建URL.</li><li><strong>Deprecate JMX Management Applets for Removal</strong> (<a href="https://bugs.openjdk.org/browse/DK-8297794">DK-8297794</a>) : 废弃JMX</li></ul><h2 id="小优化"><a href="#小优化" class="headerlink" title="小优化"></a>小优化</h2><p>这里主要介绍一些小的优化, 太长可以不看.</p><ul><li><strong>HTTP Response Input Streams Will Throw an IOException on Interrupt</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8294047">JDK-8294047</a>) :  http请求中断抛出异常</li><li><strong>HttpClient Default Keep Alive Time is 30 Seconds</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8297030">JDK-8297030</a>) : 由java.net.http.HttpClient创建的HTTP&#x2F;1.1和HTTP&#x2F;2连接的默认空闲连接超时值已从1200秒减少到30秒</li><li><strong>Idle Connection Timeouts for HTTP&#x2F;2</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8288717">JDK-8288717</a>) : 此版本中添加了HTTP&#x2F;2的空闲连接超时。</li><li><strong>FileChannel Positional Write Is Unspecified in APPEND Mode</strong> (<a href="https://bugs.openjdk.org/browse/JDK-6924219">JDK-6924219</a>) : append模式下,FileChannel写入位置因操作系统而定</li><li><strong>Update Timezone Data to 2022c</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8292579">JDK-8292579</a>) : 此版本包括2022b的更改，将1970年后具有相同时间戳数据的多个区域合并到单个时区数据库中。所有时区ID保持不变，但合并的时区将指向共享区域数据库。</li><li><strong>IdentityHashMap’s Remove and Replace Methods Use Object Identity</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8178355">JDK-8178355</a>) : IdentityHashMap的这两个方法, 对象比较由 <code>equals</code> 改为 <code>==</code></li><li><strong>Support for CLDR Version 42</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8284840">JDK-8284840</a>) : 基于Unicode Consortium的CLDR的本地数据已升级到版本42</li><li><strong>Introduce LDAP and RMI Protocol Specific Object Factory Filters to JNDI Implementation</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8290368">JDK-8290368</a>) : 引入了新的系统和安全属性，以允许对允许从JNDI&#x2F;LDAP和JNDI&#x2F;RMI上下文重建Java对象的JNDI对象工厂集进行更精细的控制</li><li><strong>G1: Disable Preventive GCs by Default</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8293861">JDK-8293861</a>) : G1默认禁用Preventive垃圾回收器</li><li><strong>appendToClassPathForInstrumentation Must Be Used in a Thread-Safe Manner</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8296472">JDK-8296472</a>) : 如题, 当时用java agent时,自定义类加载器中的appendToClassPathForInstrumentation方法必须以线程安全的方式添加到类搜索路径中。</li><li><strong>Deprecate and Disable Legacy Parallel Class Loading Workaround for Non-Parallel-Capable Class Loaders</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8295673">JDK-8295673</a>) :  一些用户定义的旧类加载器会通过在加载过程中释放类加载器锁来解决死锁问题。为了防止这些加载程序在通过并行线程加载同一类时遇到“java.lang.LinkageError：尝试重复类定义”，HotSpot虚拟机在JDK 6中引入了一种变通方法，将加载尝试序列化，导致随后的尝试等待第一个完成. 现在将这种变通 方法废弃了</li><li><strong>Disabled DTLS 1.0</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8256660">JDK-8256660</a>)  : 废弃 DTLS 1.0</li><li><strong>Remove Thread Text from Subject.current</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8297276">JDK-8297276</a>) : 在此版本中，Subject.current的规范已更改，以降低创建线程时继承主题的期望。此时，主题存储在AccessControlContext中，并在创建平台线程时被继承。虚拟线程在线程创建时不会捕获调用者上下文，并且不会继承AccessControlContext。在删除对SecurityManager和继承的AccessControlContext的支持之前，将在未来的版本中重新审查继承。</li><li><strong>Generalize ‘see’ and ‘link’ Tags for User-Defined Anchors</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8200337">JDK-8200337</a>) : {@link}、{@linkplain}和@see标签已增强，允许链接到JavaDoc生成的元素文档中的任意锚点。为了区分这些引用和成员引用，使用双散列标记（<code>##</code>）将元素名称与URI片段分开。</li></ul><h2 id="名词解析"><a href="#名词解析" class="headerlink" title="名词解析"></a>名词解析</h2><ul><li><p>HarfBuzz: 一个开源的用于文字塑形的软件开发库，亦即用于转换Unicode文本到字形指标及方位的过程</p></li><li><p>FreeType:  同HarfBuzz一样, 也是一个开源字体库. 它是一个用C语言实现的一个字体光栅化库。它可以用来将字符栅格化并映射成位图以及提供其他字体相关业务的支持</p></li><li><p>Preview(预览): 功能已经基本完整, 可以试用了. 可以简单理解为beta公测版. 来源于 <a href="https://openjdk.org/jeps/12">JEP12</a></p><blockquote><p>功能以预览版的形式发布，以收集有关它们的反馈而不承诺保持其向后兼容性——这意味着鼓励每个人尝试它们，但同时不鼓励在生产中使用它们。</p><p>预览功能不是开箱即用的，为了访问它们，需要使用*–enable-preview*编译器标志。</p></blockquote></li><li><p>Incubator(孵化) : 实验性 API已经到了一定阶段, 已经计划开发出一整套完整的功能.以独立模块的形式发布. 来源于 <a href="https://openjdk.org/jeps/11">JEP11</a></p></li><li><p>Experimental(实验) : vm级的早期功能, 不稳定, 功能不完整. 实验性质.</p><blockquote><p>实验性功能代表（主要是）VM 级功能的早期版本，这些功能可能是有风险的、不完整的，甚至是不稳定的。在大多数情况下，需要使用专用标志启用它们</p><p>出于比较的目的，如果一个实验功能被认为是 25%“完成”，那么一个预览功能应该至少 95%“完成”。</p><p>预览,孵化,实验三者的关系大致: 实验 &#x3D;&gt; 孵化 &#x3D;&gt; 预览 &#x3D;&gt; 合并jdk主体功能.</p></blockquote></li><li><p>JEP : JDK Enhancement Proposal , jdk增强建议. 也就是我们常说的jdk新特性的来源. <a href="https://openjdk.org/jeps/0">JEP大全</a></p></li></ul><h2 id="往期文章"><a href="#往期文章" class="headerlink" title="往期文章"></a>往期文章</h2><p><a href="jdk-v19">jdk19新特性</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://docs.oracle.com/en/java/javase/20/">jdk20官方文档</a><br><a href="https://www.oracle.com/java/technologies/javase/20-relnote-issues.html">jdk20新特性文档</a><br><a href="https://docs.oracle.com/en/java/javase/20/migrate/getting-started.html">jdk20升级指南</a><br><a href="https://docs.oracle.com/en/java/javase/20/install/index.html">jdk20安装指南</a><br><a href="https://cr.openjdk.org/~iris/se/20/latestSpec/">jdk20的开发计划</a><br><a href="https://docs.oracle.com/en/java/javase/20/vm/index.html">jdk20虚拟机简介</a><br><a href="https://docs.oracle.com/en/java/javase/20/gctuning/index.html">jdk20垃圾回收机制</a><br><a href="https://docs.oracle.com/en/java/javase/20/security/index.html">jdk20安全机制</a></p><p><a href="https://bugs.openjdk.org/secure/Dashboard.jspa">openjdk bug反馈系统</a><br><a href="https://openjdk.org/">openjdk官网</a><br><a href="https://4comprehension.com/preview-experimental-and-incubating-features-in-java/">jdk中预览,实验,孵化的关系</a>  </p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>java版本特性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java版本特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过frp实现内网穿透功能</title>
    <link href="/2023/03/26/net-intranet-frp/"/>
    <url>/2023/03/26/net-intranet-frp/</url>
    
    <content type="html"><![CDATA[<p>让我们从0开始搭建一个很酷的内网穿透功能.</p><p>作为一名程序员,谁不想拥有一个自己的云服务器呢. 但是当我们看了各大云服务器厂商的价格后, 不禁陷入了沉思:我好像对云服务器的诉求也没那么大!<br>等我们回家看到家里闲置的老旧电脑时,又会想,我为啥要用云服务器呢,家里的电脑改吧改吧, 不也就可以用了. 我们又不用做大流量的网站,<br>最多搞搞博客,跑跑爬虫啥的,只要能让我们可以随时在外面访问我家里的电脑,控制家里的电脑就行了.<br>好的,说干就干, 经过一番调研, 我们发现, 好像没自己想象的那么简单. 一个最直接的问题就是, 我们没有一个自己的ip,因为众所周知的ipv4资源耗尽的问题,<br>我们家里实际上网的ip其实不是固定的, 而是多家用户共享一个ip地址,也就是NAT(Network Address Translation)技术. 所以,从外网我们是无法直接访问家里的电脑的.<br>这个问题怎么解决呢? 就是我们今天要聊的话题, 内网穿透技术.</p><h1 id="什么是内网穿透"><a href="#什么是内网穿透" class="headerlink" title="什么是内网穿透"></a>什么是内网穿透</h1><p>内网穿透，也即NAT穿透，进行NAT穿透是为了使具有某一个特定源IP地址和源端口号的数据包不被NAT设备屏蔽而正确路由到内网主机.<br>大致流程如图:<br><img src="/images/tech/net/nat-through.png" alt="内网穿透图"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li>一台云服务器, 最便宜的即可,我们主要用其来注册内网服务器, 转发请求</li><li>frp工具</li><li>家用电脑,台式,笔记本都行,操作系统任意.</li></ol><h1 id="开始内网穿透"><a href="#开始内网穿透" class="headerlink" title="开始内网穿透"></a>开始内网穿透</h1><h2 id="云服务器搭建frp服务"><a href="#云服务器搭建frp服务" class="headerlink" title="云服务器搭建frp服务"></a>云服务器搭建frp服务</h2><p>参考<a href="https://gofrp.org/docs/setup/">官方安装frp说明</a>, 下载合适自己服务器的frp版本, 解压到自定义的frp服务目录.<br>因为是服务器部分, 我们直接启用frps 即可启动成功frp的服务部分. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动frps, 并指定配置文件为frps.ini </span><br>./frps -c ./frps.ini<br></code></pre></td></tr></table></figure><p>配置部分参考<a href="https://gofrp.org/docs/examples/">官方配置样例</a>. 我们demo样例只使用ssh基本服务, 就用了默认配置.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br></code></pre></td></tr></table></figure><h4 id="配置frps为系统服务-选做"><a href="#配置frps为系统服务-选做" class="headerlink" title="配置frps为系统服务(选做)"></a>配置frps为系统服务(选做)</h4><p>为了方便, 我们一般会将frps配置成系统重启自动加载. 这样我们就不用担心服务器系统重启导致内网穿透服务掉线了.<br>方法如下:</p><ol><li>先确认系统支持<code>systemd</code>, 如果不支持请安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># yum</span><br>yum install systemd<br><span class="hljs-comment"># apt</span><br>apt install systemd<br></code></pre></td></tr></table></figure><ol start="2"><li>配置frps.service服务</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>frps.service<br></code></pre></td></tr></table></figure><p>写入下面内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-comment"># 服务名称，可自定义</span><br><span class="hljs-attr">Description</span> = frp server<br><span class="hljs-attr">After</span> = network.target syslog.target<br><span class="hljs-attr">Wants</span> = network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span> = simple<br><span class="hljs-comment"># 启动frps的命令，需修改为您的frps的安装路径</span><br><span class="hljs-attr">ExecStart</span> = /path/to/frps -c /path/to/frps.ini<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span> = multi-user.target<br></code></pre></td></tr></table></figure><ol start="3"><li>开机自动启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> frps<br></code></pre></td></tr></table></figure><h2 id="家用电脑安装frp客户端"><a href="#家用电脑安装frp客户端" class="headerlink" title="家用电脑安装frp客户端"></a>家用电脑安装frp客户端</h2><p>我家里的电脑是windows10, 当然, Linux更好. 本次内网穿透的目的是可以通过远程ssh控制我的家用电脑.</p><h4 id="win10的一些准备功能"><a href="#win10的一些准备功能" class="headerlink" title="win10的一些准备功能"></a>win10的一些准备功能</h4><p>windows系统作为家用本, 对网络权限限制的比较多, 需要我们额外做一些操作.<br>a. 安装windows的ssh服务端<br>win10默认是不支持ssh的服务端的, 需要我们安装相应的OpenSSH服务器.<br>操作步骤: 设置-&gt;应用-&gt; 应用与功能 -&gt; 可选功能 -&gt; 添加OpenSSH服务器<br><img src="/images/tech/windows/windows_openssh_step1.png" alt="openssh-s1"><br><img src="/images/tech/windows/windows_openssh_step2.png" alt="openssh-s2"><br><img src="/images/tech/windows/windows_openssh_step3.png" alt="openssh-s3"><br>最后开启ssh服务,以管理员身份打开cmd终端,执行如下命令    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net start sshd<br></code></pre></td></tr></table></figure><p>b. 防火墙可能会将frpc识别为危险文件, 记得去防火墙那里将工具恢复. </p><h4 id="配置frp客户端"><a href="#配置frp客户端" class="headerlink" title="配置frp客户端"></a>配置frp客户端</h4><p>从官网下载下frpc客户端后,且成功从防火墙那里逃生, 就可以继续后面的操作了<br>首先同样先修改配置文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-comment"># 你的云服务器实际ip</span><br><span class="hljs-attr">server_addr</span> = x.x.x.x <br><span class="hljs-comment"># 云服务配置的端口</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><br><span class="hljs-section">[ssh]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-comment"># 本地要暴露的端口, windows网络限制比较严格,记得去防火墙打开相应端口</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">22</span><br><span class="hljs-comment"># 远程服务器监听的端口. 意思就是frps服务器监听6000的端口, 然后把请求转发的本地的22端口上.</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">6000</span><br></code></pre></td></tr></table></figure><p>然后打开cmd终端使用命令行的方式启动frpc工具<br>最后就可以在外网使用ssh命令访问你的系统了</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">ssh -oPort=<span class="hljs-number">6000</span> 你的系统用户名@<span class="hljs-variable language_">x</span>.<span class="hljs-variable language_">x</span>.<span class="hljs-variable language_">x</span>.<span class="hljs-variable language_">x</span><br></code></pre></td></tr></table></figure><p>frp 会将请求 x.x.x.x:6000 的流量转发到内网机器的 22 端口</p><h4 id="修改window默认终端为powerShell-选做"><a href="#修改window默认终端为powerShell-选做" class="headerlink" title="修改window默认终端为powerShell(选做)"></a>修改window默认终端为powerShell(选做)</h4><p>windows的默认终端为cmd, 很多命令不与linux兼容. 所以建议将windows的默认终端改为powerShell, 更方便.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">New-ItemProperty -Path <span class="hljs-string">&quot;HKLM:\SOFTWARE\OpenSSH&quot;</span> -Name DefaultShell -Value <span class="hljs-string">&quot;C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe&quot;</span> -PropertyType String -Force<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://gofrp.org/">frp官网</a>  </li><li><a href="https://learn.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_server_configuration?source=recommendations">windows配置默认 shell</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac系统通过homebrew安装nginx</title>
    <link href="/2023/03/24/homebrew-install-nginx/"/>
    <url>/2023/03/24/homebrew-install-nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>mac系统</li><li>homebrew 环境已经配置好</li></ul><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol><li>查看本地是否安装nginx</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew search nginx<br></code></pre></td></tr></table></figure><p><img src="/images/tech/nginx/brew-search-nginx-not-find.png" alt="brew-search-nginx-not-find"><br>nginx上面没有显示✓,表示nginx没有安装</p><ol start="2"><li>查看nginx信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew info nginx<br></code></pre></td></tr></table></figure><p><img src="/images/tech/nginx/brew-info-nginx-not-find.png" alt="brew-info-nginx-not-find"><br>如图所示,显示了nginx的版本. 也明确说明了系统没有安装nginx<br>3. 安装nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install nginx<br></code></pre></td></tr></table></figure><p><img src="/images/tech/nginx/brew-install-nginx-success.png" alt="brew-install-nginx-success"><br>安装nginx成功.<br>nginx默认监听8080端口, 配置文件路径也给出来了 <em>&#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</em><br>同时也给了启动nginx的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew services start nginx<br></code></pre></td></tr></table></figure><p>4.验证安装成功<br>此时,nginx命令已经生效了.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -v<br></code></pre></td></tr></table></figure><p><img src="/images/tech/nginx/nginx-version.png" alt="nginx-version"></p><p>当然, 也可以执行下面命令查看更详细的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -V<br></code></pre></td></tr></table></figure><p>至此,nginx已经安装成功了. 可以通过去配置文件修改相应配置, 启动nginx了</p><h1 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动</span><br>nginx<br>brew services start nginx<br></code></pre></td></tr></table></figure><p>启动成功了,此时可以通过 <a href="http://localhost:8080/">http://localhost:8080</a> 验证一下<br><img src="/images/tech/nginx/nginx-http-success.png" alt="nginx-http"></p><h1 id="补充nginx的常用命令"><a href="#补充nginx的常用命令" class="headerlink" title="补充nginx的常用命令"></a>补充nginx的常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看版本</span><br>nginx -v<br>nginx -V<br><br><span class="hljs-comment"># 启动</span><br>nginx <span class="hljs-comment"># 加载默认配置</span><br>nginx -c 配置文件路径 <span class="hljs-comment"># 加载指定配置文件</span><br>brew services start nginx<br><br><br><span class="hljs-comment"># 停止</span><br>nginx -s stop <span class="hljs-comment"># 快速停止</span><br>nginx -s quit <span class="hljs-comment"># 安全停止</span><br><br><span class="hljs-comment"># 不重启加载配置</span><br>nginx -s reload <br><br><span class="hljs-comment"># 验证配置</span><br>nginx -t <br><br></code></pre></td></tr></table></figure><p>好的, 接下来尽情使用自己的nginx服务器吧!</p>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试时刻</title>
    <link href="/2023/01/12/favorite-show-your-time/"/>
    <url>/2023/01/12/favorite-show-your-time/</url>
    
    <content type="html"><![CDATA[<h2 id="比较好的刷题网站"><a href="#比较好的刷题网站" class="headerlink" title="比较好的刷题网站"></a>比较好的刷题网站</h2><ol><li><p><a href="https://leetcode.cn/">leetcode</a> : 如果是面向面试刷题的话,建议直接刷top100. 个人感觉没必要花钱.</p></li><li><p><a href="https://codetop.cc/home">codetop</a> : 一位大佬搜集的热门笔试题, 也不错.</p></li></ol><h2 id="比较好的学习网站"><a href="#比较好的学习网站" class="headerlink" title="比较好的学习网站"></a>比较好的学习网站</h2><ol><li><a href="https://www.pdai.tech/">Java 全栈知识体系</a> : 很不错</li><li><a href="https://www.cmsblogs.com/">Java技术驿站</a> : 看文章需要关注公众号</li><li><a href="https://github.com/xuchengsheng/spring-reading/blob/master/README.md">github spring源码阅读</a></li></ol><h2 id="大厂技术文章"><a href="#大厂技术文章" class="headerlink" title="大厂技术文章"></a>大厂技术文章</h2><ol><li><a href="https://tech.meituan.com/">美团技术</a> : java体系, 最近ai的文章多起来了.</li><li><a href="http://mysql.taobao.org/monthly/">阿里巴巴数据库内核月报</a></li></ol><h2 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h2><ol><li><a href="https://www.cs.usfca.edu/~galles/visualization/about.html">可视化数据结构</a></li></ol><h2 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h2><ol><li><a href="https://devhints.io/bash">bash命令查看</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>es在java工程中如何支持自定义的json格式的DSL</title>
    <link href="/2022/11/17/es-query-dsl-wrapper/"/>
    <url>/2022/11/17/es-query-dsl-wrapper/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><ul><li>Elasticsearch : v 6.6</li><li>elasticsearch-rest-high-level-client.jar : v 6.6.2</li></ul><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>想提供一个web接口, 入参就是es的查询DSL json. 然后服务器用这个DSL透传转发到Elasticsearch服务期, 将数据返回给接口.<br>简单来说, 就是想在自己服务器上实现类似kibana上查询Elasticsearch数据的功能.   </p><p>比如, 我们正常的查询DSL如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;userCode&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                            <span class="hljs-string">&quot;110111&quot;</span><br>                        <span class="hljs-punctuation">]</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;beijing&quot;</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>如果是单纯的查询, 官方提供了一个透传查询DSL的实现类 <code>QueryBuilders.wrapperQuery()</code>, 可以通过这个QueryBuilders来实现我们自定义DSL的透传.<br>让我们先看看官方怎么说</p><blockquote><p>A query that accepts any other query as base64 encoded string.<br>This query is more useful in the context of the Java high-level REST client or transport client to also accept queries as json formatted string. In these cases queries can be specified as a json or yaml formatted string or as a query builder (which is a available in the Java high-level REST client).</p></blockquote><p>官方示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X GET <span class="hljs-string">&quot;localhost:9200/_search?pretty&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;query&quot; : &#123;</span><br><span class="hljs-string">        &quot;wrapper&quot;: &#123;</span><br><span class="hljs-string">            &quot;query&quot; : &quot;eyJ0ZXJtIiA6IHsgInVzZXIiIDogIktpbWNoeSIgfX0=&quot; </span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>由此可见, 官方是将wrapper当做一个关键字类型来处理的, 将我们的查询DSL转成base64,交给es服务器解析处理.<br>好,下面就是我们将上述DSL 通过<code>QueryBuilders.wrapperQuery()</code>处理后的sql.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;wrapper&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJzaXplIjoxLCJxdWVyeSI6eyJib29sIjp7ImZpbHRlciI6W3sidGVybXMiOnsidXNlckNvZGUiOlsiMTEwMTExIl19fSx7InRlcm0iOnsiYWRkcmVzcyI6eyJ2YWx1ZSI6ImJlaWppbmcifX19XX19fQ==&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>大家可以找个base64解码网站处理一下, 发现和我们的DSL一样. 然后用官方的方式处理下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;wrapper&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJzaXplIjoxLCJxdWVyeSI6eyJib29sIjp7ImZpbHRlciI6W3sidGVybXMiOnsidXNlckNvZGUiOlsiMTEwMTExIl19fSx7InRlcm0iOnsiYWRkcmVzcyI6eyJ2YWx1ZSI6ImJlaWppbmcifX19XX19fQ==&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>唉, 发现查询报错了, 为什么呢?<br><img src="/images/tech/es/es_size_query_malformed.png" alt="size malformed"></p><p>其实仔细分析一下,很容易发现问题. 我们将base64还原,看看最后的查询DSL的样子</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;wrapper&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>              <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;userCode&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;110111&quot;</span><span class="hljs-punctuation">]</span><br>                <span class="hljs-punctuation">&#125;</span><br>              <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;beijing&quot;</span><span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>发现没, query里套query, 明显查询有问题. 其实这里es解析的时候, 发现wrapper关键字, 就会将下面的query查询替换原始query.    </p><p>所以我们要将wrapper的不是原始完整的DSL,而是query下面的DSL. 我们将bool关键字的JSON重新单独拿出来处理下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;wrapper&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJib29sIjp7ImZpbHRlciI6W3sidGVybXMiOnsidXNlckNvZGUiOlsiMTEwMTExIl19fSx7InRlcm0iOnsiYWRkcmVzcyI6eyJ2YWx1ZSI6ImJlaWppbmcifX19XX19&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>搞定, 把上述DSL放到任何一个es的web客户端查询, 都有效.  </p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>关于聚合的功能, 官方没有提供现成的解析方法.<br>不过我觉得, 既然es的web端可以调用任意DSL, 通过java肯定能, 大不了就跳过<em>RestHighLevelClient</em>, <em>在RestLowLevelClient</em>上想办法.  </p><p>&#x2F;&#x2F; todo 等我找到合适的办法再补充.</p><h3 id="java源码"><a href="#java源码" class="headerlink" title="java源码"></a>java源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String boolJson)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">searchSourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br>        <span class="hljs-comment">// query dsl 包装</span><br>        searchSourceBuilder.query(QueryBuilders.wrapperQuery(boolJson));<br>        searchSourceBuilder.size(<span class="hljs-number">1</span>);<br>        <br>        Optional&lt;SearchResponse&gt; response = restHighLevelClient.search(searchSourceBuilder);<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.6/java-rest-overview.html">java-rest-client 6.6</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.6/java-rest-high-query-builders.html">java-rest-high-query-builders 6.6</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/query-dsl-wrapper-query.html">query-dsl-wrapper-query 6.6</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
      <category>Elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS升级13 ventura后git无法使用的解决办法</title>
    <link href="/2022/11/01/git-in-mac13-invalid/"/>
    <url>/2022/11/01/git-in-mac13-invalid/</url>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>最近, mac推送了新版本系统, macOS 13 ventura版本. 然后忍不住升级了. 升级过程不赘述, 等着就行了.</p><p>升级完成后, 打开idea, 发现<code>git</code>无法使用了, 提示如下:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">xcrun: error: invalid active developer path (<span class="hljs-regexp">/Library/</span>Developer<span class="hljs-regexp">/CommandLineTools), missing xcrun at: /</span>Library<span class="hljs-regexp">/Developer/</span>CommandLineTools<span class="hljs-regexp">/usr/</span>bin/xcrun<br></code></pre></td></tr></table></figure><p>不用说, 一定是升级导致的问题.</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>经过一番排查, 发现是mac的开发工具Xcode需要升级到14才行. 可以使用如下命令解决, 实测有效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xcode-select --install<br></code></pre></td></tr></table></figure><p>基本到这里, 问题就解决了.<br>如何还不行, 可以自行到<a href="https://developer.apple.com/download/more/">官网</a>下载软件安装即可.<br><img src="/images/others/mac_xcode14.png" alt="xcode14图片"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没事别乱升级系统</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/52522565/git-is-not-working-after-macos-update-xcrun-error-invalid-active-developer-pa">解决方案</a></p>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 19新特性简介</title>
    <link href="/2022/10/20/java-jdk-v19/"/>
    <url>/2022/10/20/java-jdk-v19/</url>
    
    <content type="html"><![CDATA[<p>JDK 19在2022年10月18日发布了, 本文就是简单介绍一下这次更新的新特性与改动. </p><p>一句话总结, 这仍然是jdk的一个短期支持版本,  而且官方承诺,这次升级将尽可能的保证版本的向下兼容.</p><h2 id="新特性汇总"><a href="#新特性汇总" class="headerlink" title="新特性汇总"></a>新特性汇总</h2><h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><h4 id="1-预览版"><a href="#1-预览版" class="headerlink" title="1 预览版"></a>1 预览版</h4><ul><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8277131">JEP 425</a> Virtual Threads</strong>(虚拟线程) :  类似go的协程. 就是在线程上面在开辟出一个更细粒度独立运行的单元. 这个新单元就是虚拟线程, 这个线程官方叫carrier thead(承载线程?)</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8260244">JEP 405</a> Record Patterns</strong> (记录模式) : Record Patterns 可对 record 的值进行解构，Record patterns 和 Type patterns 通过嵌套能够实现强大的、声明性的、可组合的数据导航和处理形式. </li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8282272">JEP 427</a> Pattern Matching for switch</strong> (switch模式匹配) : 第三次预览. 用 switch 表达式和语句的模式匹配，以及对模式语言的扩展来增强 Java 编程语言。将模式匹配扩展到 switch 中，允许针对一些模式测试表达式，这样就可以简明而安全地表达复杂的面向数据的查询。</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8282048">JEP 424</a> Foreign Function &amp; Memory API</strong> (外边函数&amp;内存调用API):  提供了一套API 方便的调用 Java 运行时之外的代码或内存。通过高效地调用外部函数（即 JVM 之外的代码）和安全地访问外部内存（即不受 JVM 管理的内存），该 API 使 Java 程序能够调用本机库并处理本机数据，而不会像 JNI 那样危险和脆弱. (Java 在堆外内存使用的路上越走越远 🤪)</li></ul><h4 id="2-孵化器"><a href="#2-孵化器" class="headerlink" title="2 孵化器"></a>2 孵化器</h4><ul><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8277129">JEP 428</a> Structured Concurrency</strong>(结构化并发) : 用来简化并发的功能. 可以将底层多个线程视为一个工作单元, 从而实现像单线程那样的异常处理, 结果收集.</li><li><strong><a href="https://bugs.openjdk.org/browse/JDK-8280173">JEP 426</a> Vector API</strong> (向量API) : 第四孵化阶段. 向量计算由对向量的一系列操作组成。向量 API 用来表达向量计算，该计算可以在运行时可靠地编译为支持的 CPU 架构上的最佳向量指令，从而实现优于等效标量计算的性能。向量 API 的目标是为用户提供简洁易用且与平台无关的表达范围广泛的向量计算</li></ul><h4 id="3-主要特性"><a href="#3-主要特性" class="headerlink" title="3 主要特性"></a>3 主要特性</h4><ul><li><p><strong>Support Unicode 14.0</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8268081">JDK-8268081</a>) : 支持Unicode14.0 .</p></li><li><p><strong>New system properties for <code>System.out</code> and <code>System.err</code></strong> (<a href="https://bugs.openjdk.org/browse/JDK-8283620">JDK-8283620</a>) : 新增了<code>stdout.encoding</code>和 <code>stderr.encoding</code> 两个属性来支持标准输出和错误输出的字符集编码. 可以有效解决标准输出的乱码问题.</p></li><li><p><strong>HTTPS Channel Binding Support for Java GSS&#x2F;Kerberos</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8279842">JDK-8279842</a>) : 在https连接的时候, 支持绑定token来增强安全.</p></li><li><p><strong>Additional Date-Time Formats</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8176706">JDK-8176706</a>) : <code>java.time.format.DateTimeFormatter</code> 增加了一些新的默认格式</p></li><li><p><strong>New Methods to Create Preallocated HashMaps and HashSets</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8186958">JDK-8186958</a>) : HashMap, HashSet新增了一些静态创建方法. 比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap.newHashMap<br>LinkedHashMap.newLinkedHashMap<br>WeakHashMap.newWeakHashMap<br>HashSet.newHashSet<br>LinkedHashSet.newLinkedHashSet<br></code></pre></td></tr></table></figure></li><li><p><strong>upport for PAC-RET Protection on Linux&#x2F;AArch64</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8277204">JDK-8277204</a>) : 通过支持ARMv8.3 的PAC功能来防御RET的攻击</p><blockquote><p>When enabled, OpenJDK will use hardware features from the ARMv8.3 Pointer Authentication Code (PAC) extension to protect against Return Orientated Programming (ROP) attacks. For more information on the PAC extension see <a href="https://documentation-service.arm.com/static/602a81dbbc293d2cd05e6b09">“Providing protection for complex software”</a> or the “Pointer authentication in AArch64 state” section in the <a href="https://developer.arm.com/documentation/ddi0487/latest/">Arm ARM</a>.</p></blockquote></li><li><p><strong>Automatic Generation of the CDS Archive</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8261455">JDK-8261455</a>) : CDS的自动打包功能</p></li><li><p><strong>Windows KeyStore Updated to Include Access to the Local Machine Location</strong> (<a href="https://bugs.openjdk.org/browse/JDK-6782021">JDK-6782021</a>) : Windows新增了一些密钥储库支持访问本地位置.</p></li><li><p><strong>Break Up SEQUENCE in X509Certificate and X509Certificate in otherName</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8277976">JDK-8277976</a>) : 如题, 这两个方法的增强.</p><blockquote><p>The JDK implementation of <code>X509Certificate::getSubjectAlternativeNames</code> and <code>X509Certificate::getIssuerAlternativeNames</code> has been enhanced to additionally return the <code>type-id</code> and <code>value</code> fields of an <code>otherName</code>. The <code>value</code> field is returned as a String if it is encoded as a character string or otherwise as a byte array, which is helpful as it avoids having to parse the ASN.1 DER encoded form of the name.</p></blockquote></li><li><p><strong>(D)TLS Signature Schemes</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8280494">JDK-8280494</a>): 增加了一套新的获取TLS签名的方法.</p></li><li><p><strong>Add a -providerPath Option to jarsigner</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8281175">JDK-8281175</a>) : jarsigner新增了一个选项, 用来指定备用密钥库路径</p></li><li><p><strong>New Options for ktab to Provide Non-default Salt</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8279064">JDK-8279064</a>) : ktab命令增加了一些选项来支持自定义’盐’值.</p><blockquote><p>ktab -a username password -s altsalt</p></blockquote></li><li><p><strong>New XML Processing Limits</strong> (JDK-8270504 (not public)) : xml库解析执行增加了3个限制</p><blockquote><p><code>jdk.xml.xpathExprOpLimit</code> :  XPath表达式中group数量的限制</p><p><code>jdk.xml.xpathExprOpLimit</code> :  XPath表达式中operator数量的限制</p><p><code>jdk.xml.xpathTotalOpLimit</code> :  XPath文件中operator总数量的限制</p></blockquote></li></ul><h3 id="bug修复"><a href="#bug修复" class="headerlink" title="bug修复"></a>bug修复</h3><ul><li><a href="https://bugs.openjdk.org/browse/JDK-8289853">JDK-8289853</a> :   <a href="https://harfbuzz.github.io/">HarfBuzz</a>库升级 到 to 4.4.1, 支持最新的字体</li><li><a href="https://bugs.openjdk.org/browse/JDK-8290334">JDK-8290334</a> :   <a href="https://freetype.org/">FreeType</a> 升级到 2.12.1</li><li><a href="https://bugs.openjdk.org/browse/JDK-8291897">JDK-8291897</a> :  解决TerminatingThreadLocal在virtual thread(虚拟线程)某些场景下无法注册的问题</li><li><a href="https://bugs.openjdk.org/browse/JDK-8292240">JDK-8292240</a> :  虚拟线程的承载线程, 某些情况下阻塞时无法重置状态的问题</li><li><a href="https://bugs.openjdk.org/browse/JDK-8287917">JDK-8287917</a> : macOS SDK 10.15 及更早版本下System.loadLibrary不生效的问题</li><li><a href="https://bugs.openjdk.org/browse/JDK-8292654">JDK-8292654</a> : JDK-8286115问题修复导致的G1垃圾回收器 remembered set memory footprint问题</li></ul><h3 id="移出功能"><a href="#移出功能" class="headerlink" title="移出功能"></a>移出功能</h3><ul><li><strong>Diagnostic Flag GCParallelVerificationEnabled</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8286304">JDK-8286304</a>) : 这个开关被移出了. 因为自从创建以来一直都是默认开启, 且并发效率比关闭高很多.</li><li><strong>Finalizer Implementation in SSLSocketImpl</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8212136">JDK-8212136</a>) : SSLSocket的finalizer被移除, 因为基础方法(native)已经实现相关功能.</li><li><strong>Alternate ThreadLocal Implementation of the Subject::current and Subject::callAs APIs</strong> (JDK-8282676 (not public)) : 所述类里的相应方法的备用threadlocal实现被移除.</li></ul><h3 id="废弃功能"><a href="#废弃功能" class="headerlink" title="废弃功能"></a>废弃功能</h3><ul><li><strong>java.lang.ThreadGroup</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8284161">JDK-8284161</a>) : 线程组被标记为废弃. 最大的原因是虚拟线程来了.</li><li><strong>Locale Class Constructors</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8282819">JDK-8282819</a>) : Locale的构造器被 <code>Locale.of()</code> 方法替代</li><li><strong>PSSParameterSpec(int) Constructor and DEFAULT Static Constant</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8254935">JDK-8254935</a>)</li><li><strong>OAEPParameterSpec.DEFAULT Static Constant</strong> (<a href="https://bugs.openjdk.org/browse/JDK-8284553">JDK-8284553</a>) : 因为密码学的进步, 这个Default常量已经落后了.</li></ul><h2 id="小优化"><a href="#小优化" class="headerlink" title="小优化"></a>小优化</h2><p>这里主要介绍一些小的优化, 太长可以不看.</p><ol><li><p>JDK19中, 在macOS上将Metal作为图形渲染的默认配置.</p></li><li><p>像mac或linux系统中,  <code>user.home</code> 存在就用系统提供的配置 , 如果不存在, 则使用<code>$HOME</code>的配置设置这个系统属性.</p></li><li><p>线程的ClassLoader 被处理为一个特殊的可继承的Thread-local</p></li><li><p><strong>java.lang.Thread</strong> 新增了一些方法,  如果现在代码继承了Thread, 可能会导致不兼容.</p><blockquote><p>Thread.Builder模式</p><p>Thread.isVirtual()</p><p>Thread.threadId()</p><p>Thread.join(Duration)</p></blockquote></li><li><p>Double.toString(double) and Float.toString(float) 针对科学记数法的一些优化</p></li><li><p>注解的toString方法针对常量和枚举, 做了一些优化, 输出更友好.</p></li><li><p>HTTP签名鉴权时, MD5和SHA-1 因为不太安全默认被禁用.</p></li><li><p>Windows 上http多代理选择的优化</p></li><li><p><strong>java.net.InetAddress</strong> 针对一些有歧义的IPv4输入, 精细了异常提示.</p></li><li><p><strong>HttpURLConnection</strong> 的默认keep alive 可配置</p></li><li><p><strong>FileChannel.transferFrom</strong> 返回的bytes 可能会小于预订值, 这是允许的.</p><blockquote><p>FileChannel.transferFrom()的性能在Linux内核4.5及更高版本上得到了显著提高</p></blockquote></li><li><p><strong>InputStream and FilterInputStream</strong> 的mark和reset 移出了 synchronized 关键字</p></li><li><p><strong>Files.copy</strong> 方法支持将 <code>POSIX</code>属性跨文件系统复制, 前提是两个系统都支持 <code>POSIX</code></p></li><li><p><strong>FileChannel.lock(long position, long size, boolean shared)</strong> 当size指定为0时, 表示锁定 整个文件, 无论这个文件流被扩展或继承</p></li><li><p>java.time.chrono 新增了3个标准时间</p></li><li><p><strong>ForkJoinPool</strong> 和 <strong>ThreadPoolExecutor</strong> 线程池不再使用Thread.start来启动工作线程.</p></li><li><p>正则 <code>\b</code>  可以匹配ASCII 字符, 像  <code>\w</code> 一样.</p></li><li><p>支持  CLDR Version 41</p></li><li><p>LDAP, DNS, 和 RMI 的URL解析更加严格</p></li></ol><pre><code class="hljs">&gt;    -Dcom.sun.jndi.ldapURLParsing=&quot;legacy&quot; | &quot;compat&quot; | &quot;strict&quot;    (to control &quot;ldap:&quot; URLs)&gt;&gt;    -Dcom.sun.jndi.dnsURLParsing=&quot;legacy&quot; | &quot;compat&quot; | &quot;strict&quot;     (to control &quot;dns:&quot; URLs)&gt;    -Dcom.sun.jndi.rmiURLParsing=&quot;legacy&quot; | &quot;compat&quot; | &quot;strict&quot;     (to control &quot;rmi:&quot; URLs)</code></pre><ol start="20"><li><p>VM Tool Interface (JVM TI) 支持虚拟线程</p></li><li><p>cpu计算时不再考虑<code>cpu.share</code> , 因为会导致jvm对当前cpu使用情况的误算, 进而影响cpu使用率.</p><blockquote><p>之前的JDK版本对Linux cgroups参数“cpu.shares”使用了错误的解释。这可能会导致JVM使用的CPU少于可用，导致JVM在容器内使用时CPU资源利用率不足。</p><p>从此JDK版本开始，默认情况下，JVM在决定各种线程池使用的线程数量时不再考虑“cpu.shares”。-XX:+UseContainerCpuShares命令行选项可用于恢复到之前的行为。此选项已被弃用，可能会在未来的JDK版本中删除。</p></blockquote></li><li><p>此后, macOS中,相同大版本的jdk将默认安装到同一目录</p><blockquote><p>  Oracle JDK安装目录从</p><p><code>/Library/Java/JavaVirtualMachines/jdk-$&#123;VERSION&#125;.jdk</code> 迁移到</p><p> <code>/Library/Java/JavaVirtualMachines/jdk-$&#123;FEATURE&#125;.jdk</code></p><p>比如:  19.0.1 and 19.0.2 版本都将安装到 <code>/Library/Java/JavaVirtualMachines/jdk-19.jdk</code> 中</p></blockquote></li><li><p>在macOS上，只有用户钥匙串中具有正确信任设置的证书才会在钥匙串类型的钥匙库中作为受信任证书条目公开</p></li><li><p>RC2和ARCFOUR（RC4）算法已添加到java.security配置文件中的jdk.security.legacyAlgorithms安全属性中。当弱RC2或ARCFOUR算法用于与密钥存储中的秘密密钥条目关联的命令时，密钥工具会发出警告。</p></li><li><p>加密算法位数增强</p></li></ol><blockquote><p>RSA, RSASSA-PSS, DH: from 2048 to 3072</p><p>EC: from 256 to 384</p><p>AES: from 128 to 256 (if permitted by crypto policy), falls back to 128 otherwise.</p></blockquote><ol start="26"><li>ECDSA 算法的 Signature::getParameters 永远返回<code>null</code> . 参考 <a href="https://datatracker.ietf.org/doc/html/rfc5758#section-3.2">RFC 5758 Section 3.2</a></li><li>DES、DESede和MD5算法已添加到java.security配置文件中的jdk.security.legacyAlgorithms安全属性中。当弱DES或DESede算法用于与密钥库中的秘密密钥条目关联的命令时，keytool工具会发出警告。</li><li>加密算法完成支持 RFC 6125</li><li>移出了一些过时的3DES加密组件</li></ol><blockquote><p>TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</p><p>TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</p><p>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</p><p>SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA</p><p>TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA</p><p>TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA</p><p>SSL_RSA_WITH_3DES_EDE_CBC_SHA</p></blockquote><p>30 修复了一个StringBuilder bug. 例如, 下面代码输出”foofoobar” 而不是 “foobarfoobar”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br>System.err.println(<span class="hljs-string">&quot;&quot;</span> + builder + builder.append(<span class="hljs-string">&quot;bar&quot;</span>));<br></code></pre></td></tr></table></figure><ol start="31"><li><p>JavaDoc生成的API文档现在提供了一个独立的搜索页面，搜索语法已得到增强，允许多个搜索词。</p></li><li><p>JShell现在标记不建议使用的元素，并在控制台中突出显示变量和关键字。</p></li><li><p>实际的java线程堆栈大小可能与-Xss命令行选项指定的值不同；当操作系统要求时，它可以四舍五入到系统页面大小的倍数。</p></li></ol><h2 id="名词解析"><a href="#名词解析" class="headerlink" title="名词解析"></a>名词解析</h2><ul><li><p>HarfBuzz: 一个开源的用于文字塑形的软件开发库，亦即用于转换Unicode文本到字形指标及方位的过程</p></li><li><p>FreeType:  同HarfBuzz一样, 也是一个开源字体库. 它是一个用C语言实现的一个字体光栅化库。它可以用来将字符栅格化并映射成位图以及提供其他字体相关业务的支持</p></li><li><p>Preview(预览): 功能已经基本完整, 可以试用了. 可以简单理解为beta公测版. 来源于 <a href="https://openjdk.org/jeps/12">JEP12</a></p><blockquote><p>功能以预览版的形式发布，以收集有关它们的反馈而不承诺保持其向后兼容性——这意味着鼓励每个人尝试它们，但同时不鼓励在生产中使用它们。</p><p>预览功能不是开箱即用的，为了访问它们，需要使用*–enable-preview*编译器标志。</p></blockquote></li><li><p>Incubator(孵化) : 实验性 API已经到了一定阶段, 已经计划开发出一整套完整的功能.以独立模块的形式发布. 来源于 <a href="https://openjdk.org/jeps/11">JEP11</a></p></li><li><p>Experimental(实验) : vm级的早期功能, 不稳定, 功能不完整. 实验性质.</p><blockquote><p>实验性功能代表（主要是）VM 级功能的早期版本，这些功能可能是有风险的、不完整的，甚至是不稳定的。在大多数情况下，需要使用专用标志启用它们</p><p>出于比较的目的，如果一个实验功能被认为是 25%“完成”，那么一个预览功能应该至少 95%“完成”。</p><p>预览,孵化,实验三者的关系大致: 实验 &#x3D;&gt; 孵化 &#x3D;&gt; 预览 &#x3D;&gt; 合并jdk主体功能.</p></blockquote></li><li><p>JEP : JDK Enhancement Proposal , jdk增强建议. 也就是我们常说的jdk新特性的来源. <a href="https://openjdk.org/jeps/0">JEP大全</a></p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://docs.oracle.com/en/java/javase/19/">jdk19官方文档</a></p><p><a href="https://www.oracle.com/java/technologies/javase/19-relnote-issues.html#NewFeature">jdk19 新特性文档</a></p><p><a href="https://docs.oracle.com/en/java/javase/19/migrate/preface.html#GUID-DFC2A9CB-070F-4880-9069-BD7FA8606EA2">jdk19升级指南</a></p><p><a href="https://cr.openjdk.java.net/~iris/se/19/latestSpec/">jdk19的开发计划</a></p><p><a href="https://bugs.openjdk.org/secure/Dashboard.jspa">openjdk bug反馈系统</a></p><p><a href="https://openjdk.org/">openjdk官网</a></p><p><a href="https://4comprehension.com/preview-experimental-and-incubating-features-in-java/">jdk中预览,实验,孵化的关系</a></p><p><a href="https://www.oschina.net/p/freetype">FreeType开源中国</a></p><p><a href="https://www.oschina.net/p/harfbuzz?hmsr=aladdin1e1">HarfBuzz开源中国</a></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>java版本特性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java版本特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dubbo 在线平滑变更zookeeper</title>
    <link href="/2022/10/06/dubbo-zk-change/"/>
    <url>/2022/10/06/dubbo-zk-change/</url>
    
    <content type="html"><![CDATA[<p>记一次dubbo zk集群平滑迁移的操作方案，也可以用户dubbo双注册中心的实现方案。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>zk 服务器版本：3.4.6</li><li>dubbo 版本：2.7.3</li><li>dubbo-spring-boot-starter 版本：2.7.3</li></ol><h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><ol><li>运维同学搭建好新的zk集群，保证高可用</li><li>dubbo 服务提供者通过双注册中心的方式，将服务注册到new，old 两套集群上</li><li>dubbo 消费者 通过配置双注册中心的方式，同时消费两个注册中心的服务</li><li>步骤2，步骤3可以同时进行，直到全部服务平滑注册到双注册中心</li><li>等全部到双中心后（需要运维同学确认），再次更改消费者配置，改为new 注册中心</li><li>关于即是生产者，又是消费者的项目，有两种方案：<ul><li>等依赖上游切换后再切换，或者最后切换</li><li>差异化配置，消费者单注册中心，生产者双注册中心</li></ul></li><li>消费者全部切换到新的zk 集群后，生产者逐步全部改为新的zk集群</li><li>关闭下线old zk 集群</li></ol><h2 id="关键配置"><a href="#关键配置" class="headerlink" title="关键配置"></a>关键配置</h2><p>pom 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-framework<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-recipes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>dubbo配置：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">dubbo</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">application</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">zk-move-test</span><br>  <span class="hljs-attribute">consumer</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">registries</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">id: oldzk</span><br>        <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">zookeeper</span><br>        <span class="hljs-attribute">address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">127.0.0.1:2181(此处随意配)</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">id: newzk</span><br>        <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">zookeeper</span><br>        <span class="hljs-attribute">address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">127.1.1.1:2181,127.2.2.2:2181(此处随意配)</span><br><br></code></pre></td></tr></table></figure><p>然后就能正常启动了，通过日志，会发现正常注册了两个zk中心，并且zk上也能发现注册的服务。</p><h2 id="技术验证点"><a href="#技术验证点" class="headerlink" title="技术验证点"></a>技术验证点</h2><ol><li>某服务注册到old中心，new 中心没有，消费者双注册中心是否能发现？答：可以</li><li>某服务注册到new 中心，old中心没有，消费者双注册中心是否能发现？答：可以</li><li>某服务双注册中心，然后下线某注册中心，消费者双注册中心是否收影响，能否自动转移？<br>答：经测试，new中心全部挂掉后，服务依旧会从old服务发现，功能不受影响。<br>但是，dubbo客户端会一直尝试重新连接zk中心（可配置），直到new中心重启后，zk能够自动重连成功为止。所以，我们这个场景，需要生产、消费者全部迁移到new zk 上后才能下线old zk。</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://dubbo.apache.org/zh-cn/docs/user/references/registry/zookeeper.html">http://dubbo.apache.org/zh-cn/docs/user/references/registry/zookeeper.html</a></p>]]></content>
    
    
    <categories>
      
      <category>dubbo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鸿蒙应用开发:&quot;request data error&quot;问题解决</title>
    <link href="/2022/10/05/exception-harmony-qa-http-request-err/"/>
    <url>/2022/10/05/exception-harmony-qa-http-request-err/</url>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>本人初次接触鸿蒙系统, 想着自己在手机上开发个app玩玩, 结果第一步就遇到坑了~~</p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><ul><li>ide: DevEco Studio 3.0 Release</li><li>harmony SDK: 8</li><li>语言: ets&#x2F;ts</li><li>调试: 本地真机调试</li></ul><h1 id="请求源码"><a href="#请求源码" class="headerlink" title="请求源码"></a>请求源码</h1><p>因为是个demo, 其实就是从官方demo中copy过来的, 然后换成自己的域名地址</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> http <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ohos.net.http&#x27;</span>;<br><br><span class="hljs-comment">// 每一个httpRequest对应一个http请求任务，不可复用</span><br><span class="hljs-keyword">let</span> httpRequest = http.<span class="hljs-title function_">createHttp</span>();<br><span class="hljs-comment">// 用于订阅http响应头，此接口会比request请求先返回。可以根据业务需要订阅此消息</span><br><span class="hljs-comment">// 从API 8开始，使用on(&#x27;headersReceive&#x27;, Callback)替代on(&#x27;headerReceive&#x27;, AsyncCallback)。 8+</span><br>httpRequest.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;headersReceive&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">header</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;header: &#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(header));<br>&#125;);<br>httpRequest.<span class="hljs-title function_">request</span>(<br>    <span class="hljs-comment">// 填写http请求的url地址，可以带参数也可以不带参数。URL地址需要开发者自定义。请求的参数可以在extraData中指定</span><br>    <span class="hljs-string">&quot;http://hancher.top/xxx/xxx&quot;</span>,<br>    &#123;<br>        <span class="hljs-attr">method</span>: http.<span class="hljs-property">RequestMethod</span>.<span class="hljs-property">POST</span>, <span class="hljs-comment">// 可选，默认为http.RequestMethod.GET</span><br>        <span class="hljs-comment">// 开发者根据自身业务需要添加header字段</span><br>        <span class="hljs-attr">header</span>: &#123;<br>            <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>        &#125;,<br>        <span class="hljs-comment">// 当使用POST请求时此字段用于传递内容</span><br>        <span class="hljs-attr">extraData</span>: &#123;<br>            <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;data to send&quot;</span>,<br>        &#125;,<br>        <span class="hljs-attr">connectTimeout</span>: <span class="hljs-number">60000</span>, <span class="hljs-comment">// 可选，默认为60s</span><br>        <span class="hljs-attr">readTimeout</span>: <span class="hljs-number">60000</span>, <span class="hljs-comment">// 可选，默认为60s</span><br>    &#125;, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!err) &#123;<br>            <span class="hljs-comment">// data.result为http响应内容，可根据业务需要进行解析</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;http请求结果:&#x27;</span> + data.<span class="hljs-property">result</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;code:&#x27;</span> + data.<span class="hljs-property">responseCode</span>);<br>            <span class="hljs-comment">// data.header为http响应头，可根据业务需要进行解析</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;header:&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data.<span class="hljs-property">header</span>));<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;cookies:&#x27;</span> + data.<span class="hljs-property">cookies</span>); <span class="hljs-comment">// 8+</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;http请求异常:&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(err));<br>            <span class="hljs-comment">// 当该请求使用完毕时，调用destroy方法主动销毁。</span><br>            httpRequest.<span class="hljs-title function_">destroy</span>();<br>        &#125;<br>    &#125;<br>);<br></code></pre></td></tr></table></figure><p>大家可以从参考里的官方demo里比对一下, 啥都没变, 然后本地调试, 报</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">03B00</span>/JSApp:  app Log: http请求异常:&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-number">200</span>,<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">&quot;request data error&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>多说一句, 因为是初次使用这个ide, 日志的打印入口都找了半天. 下面是日志的路径  </p><blockquote><p>底部导航log-&gt; HiLog -&gt; 选中自己的设备 -&gt; 选择日志级别<br><img src="/images/tech/harmony/HiLog-position.png" alt="HiLog 入口"></p></blockquote><h1 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h1><ol><li>首先, 请求肯定没有发出去. 因为我没有在我的后台里发现对应的请求</li><li>有没有可能是请求参数体的问题呢?<br>这个我查了半天官方文档, 以及自己试了字符串, 对应, 数组等各种方式, 都不行. 感觉应该不是这个问题.</li><li>是不是权限的问题呢?<br>之所以会怀疑到权限的问题上, 因为在查看<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-references/js-apis-http-0000001281201030">接口文档</a>的时候发现了这么一句话<blockquote><p>需要权限：ohos.permission.INTERNET</p></blockquote></li></ol><p>然后就去查<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/package-structure-0000001333321033#ZH-CN_TOPIC_0000001333321033__deviceconfig%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84">权限相关的文档</a>, 在模块的config.json下面把权限加上, 还是不行. 配置如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;reqPermissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ohos.permission.GET_NETWORK_INFO&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;流量网络请求&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ohos.permission.INTERNET&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;流量网络请求&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ohos.permission.SET_NETWORK_INFO&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;流量网络请求&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ohos.permission.MANAGE_WIFI_CONNECTION&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;WLAN网络请求&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ohos.permission.SET_WIFI_INFO&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;WLAN网络请求&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ohos.permission.GET_WIFI_INFO&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;WLAN网络请求&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>请求结果还是老样子.<br>4. 最终定位: http明文请求被限制了<br>这是我在一位<a href="https://developer.huawei.com/consumer/cn/forum/topic/0202749465240950831?fid=0101587866109860105">老哥的帖子</a>里发现的一个关键节点.<br>原来正常的http请求会被系统默认禁掉, 而且官方还不给个提示, 太坑了. 官方更推荐使用https的请求方式.<br><img src="/images/tech/harmony/http_cleartextTraffic_disable.png" alt="http被禁用"><br>知道了问题所在, 解决问题就好了.config.json添加如下配置即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;deviceConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;cleartextTraffic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>注意, 3里的网络权限也要配置哈, 不然会报没有权限的错误. 不过这个还好, 官方有异常提示了, 就很好定位了.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-references/js-apis-http-0000001281201030">http请求官方文档</a><br><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/package-structure-0000001333321033#ZH-CN_TOPIC_0000001333321033__deviceconfig%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84">应用配置官方文档</a><br><a href="https://developer.huawei.com/consumer/cn/forum/topic/0202749465240950831?fid=0101587866109860105">感谢老哥</a>   </p>]]></content>
    
    
    <categories>
      
      <category>鸿蒙</category>
      
      <category>app</category>
      
    </categories>
    
    
    <tags>
      
      <tag>异常</tag>
      
      <tag>鸿蒙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis常用命令总结</title>
    <link href="/2022/09/30/db-redis-common-cmd/"/>
    <url>/2022/09/30/db-redis-common-cmd/</url>
    
    <content type="html"><![CDATA[<h2 id="k-v操作"><a href="#k-v操作" class="headerlink" title="k-v操作"></a>k-v操作</h2><p>普通的k-v操作</p><h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><h4 id="1-通过lua在redis客户端批量删除key"><a href="#1-通过lua在redis客户端批量删除key" class="headerlink" title="1.通过lua在redis客户端批量删除key"></a>1.通过lua在redis客户端批量删除key</h4><p>redis是不支持批量删除指令的, 因为redis是单线程的. 批量删除会占用redis的主线程.影响性能.</p><p>但是我认为现在redis既然已经支持异步线程操作一些后台数据了, 也就可以支持在不影响主线程性能的情况下实现 正则批量删除数据的命令了. 不知为何还是没有.</p><p>这里记录一下使用lua脚本, 在redis命令行里 通过正则批量删除缓存的功能. 核心是使用 keys命令. 这个会阻塞主线程, 如果量比较大, 慎用.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">eval <span class="hljs-string">&quot;local keys=redis.call(&#x27;keys&#x27;,KEYS[1]);local count=0;for i,v in ipairs(keys) do redis.call(&#x27;del&#x27;,v); count=i end; return count&quot;</span> <span class="hljs-number">1</span> key正则表达式<br></code></pre></td></tr></table></figure><p>将最后的’key正则表达式’换成自己想删除的keys的表达式即可.</p><p>关于量的问题, 我删除线上5w条缓存,秒删,无任何影响.各位同学自行参考量级.</p><p>不定期更新中…</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://redis.io/commands/eval/">redis官网</a></p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis脚本命令</title>
    <link href="/2022/09/29/db-redis-cmd-script/"/>
    <url>/2022/09/29/db-redis-cmd-script/</url>
    
    <content type="html"><![CDATA[<p>redis内置了<a href="https://redis.io/docs/manual/programmability/lua-api/">Lua 5.1</a>引擎. 可以很方便的执行lua脚本.<br>有了这个利器, 我们就可以在redis命令的基础上自己组合命令并原子性执行了.</p><h2 id="eval命令执行lua脚本"><a href="#eval命令执行lua脚本" class="headerlink" title="eval命令执行lua脚本"></a>eval命令执行lua脚本</h2><p>如果要调用</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">EVAL script numkeys [key [key ...]] [<span class="hljs-built_in">arg</span> [<span class="hljs-built_in">arg</span> ...]]<br><br></code></pre></td></tr></table></figure><ul><li>script lua脚本, 字符串</li><li>numkeys 后置keys的数量. 0表示没有参数</li><li>key 的参数. 可以在lua脚本里通过 “KEYS[index]”来指定key. 会在脚本执行前替换</li><li>arg 参数. 和keys类似. keys数量之后的参数都是args. 可以用ARGV[index]指定.</li></ul><p>demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs redis"># 执行一段lua脚本, 返回输入的各个参数. 前2个是key, 后面的都是args<br>redis&gt; EVAL &quot;return &#123; KEYS[1], KEYS[2], ARGV[1], ARGV[2], ARGV[3] &#125;&quot; 2 key1 key2 arg1 arg2 arg3<br>1) &quot;key1&quot;<br>2) &quot;key2&quot;<br>3) &quot;arg1&quot;<br>4) &quot;arg2&quot;<br>5) &quot;arg3&quot;<br></code></pre></td></tr></table></figure><h2 id="lua脚本"><a href="#lua脚本" class="headerlink" title="lua脚本"></a>lua脚本</h2><h3 id="lua脚本调redis指令"><a href="#lua脚本调redis指令" class="headerlink" title="lua脚本调redis指令"></a>lua脚本调redis指令</h3><p>最常用的很是就是call方法了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis.call(<span class="hljs-built_in">command</span> [,arg...])<br><br></code></pre></td></tr></table></figure><ul><li>command redis命令</li><li>args redis命令所需参数</li></ul><p>demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 执行lua脚本, 设置key=a , v = 1</span><br>redis&gt; <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;redis.call(&#x27;set&#x27;,&#x27;a&#x27;,1)&quot;</span> 0<br><br><span class="hljs-comment"># 验证</span><br>redis&gt; get a  <span class="hljs-comment"># 结果 1</span><br></code></pre></td></tr></table></figure><p>不定期更新中…</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://redis.io/docs/manual/programmability/eval-intro/">redis lua</a></p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有意思的小问题,java代码过长</title>
    <link href="/2022/09/22/exception-java-method-too-big/"/>
    <url>/2022/09/22/exception-java-method-too-big/</url>
    
    <content type="html"><![CDATA[<p>最近在练习编程的时候,发现一个问题. 就是在测试一个排序功能时, 如果写入大批量的参数, 会报 “java: 代码过长” 的问题. </p><p>编程这么多年了, 第一次遇到这种问题, 还挺神奇的. 记录和总结一下.</p><h1 id="现象重现"><a href="#现象重现" class="headerlink" title="现象重现"></a>现象重现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        a = <span class="hljs-string">&quot;2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2&quot;</span>;<br>        <span class="hljs-comment">// 上面的a 多复制几遍</span><br><br>        System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很简单的代码, 没事走两步</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">java:</span> 代码过长<br></code></pre></td></tr></table></figure><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>首先, 顾名思义, 很明细就是字符长度超过了java 一个类文件的最大长度限制导致的.</p><p>那么java类文件的长度是多少呢?<br>经过一番不是很辛苦的查询, 定位到了原因: </p><blockquote><p>There is a 64K byte-code size limit on a method<br>java中一个方法的最大长度是64Kb</p></blockquote><p>很明细, 我们的这个方法长度超了.</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>原因找到了, 要解决也就很简单了. 只要做到规避方法的最大长度就行了. </p><ul><li>方法1 : 将一个大方法拆成多个小方法, 将一个大类拆成多个小类. 说实话, 一个64kb的类确实有点大了.</li><li>方法2 : 将测试数据不要放到java类里, 而是放到配置文件中, 使用的时候通过流加载到内存中. 文件的存储量是无限的</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实只要符合正常的java编码规范, 我们基本上是遇不到上面的问题的.<br>只有在一些极限测试的时候, 我们通常会将测试内容放到代码里, 才可能碰到. </p><p>只能说: 没用的小知识又增多了🐶</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java">java code too large</a></p>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
      <category>java异常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用私有仓库发布 GitHub Pages</title>
    <link href="/2022/09/13/site-github-repo-private/"/>
    <url>/2022/09/13/site-github-repo-private/</url>
    
    <content type="html"><![CDATA[<h2 id="验证私有库发布文章"><a href="#验证私有库发布文章" class="headerlink" title="验证私有库发布文章"></a>验证私有库发布文章</h2><p>相信已经成功使用github建站的朋友们肯定会有一个想法, 就是可不可以将文章仓库私有也能实现建站的功能呢?</p><p>答案是可以的, 本文就是一个将一个公共仓库站点私有化后的例子. 并将过程总结一下, 方便大家参考使用.</p><h2 id="站点私有化过程的的变与不变"><a href="#站点私有化过程的的变与不变" class="headerlink" title="站点私有化过程的的变与不变"></a>站点私有化过程的的变与不变</h2><p>首先,使用github pages建站, 项目名就固定死了,必然是&lt;用户名&gt;.github.io<br>其次,如果有域名的话,像域名配置等一些配置也是需要放到 外露站点下的.</p><p>除此之外, 其他的内容就就是可以变的了.因为github.io站点最终暴露的就是一个编译好的web静态网站.<br>至于源码是不是在这里,无所谓的.之所以源码与静态站点放到一起,核心还是方便github的 action自动编译.</p><p>好了, 了解了这些核心要素, 我们可以操作的部分也就有了.<br>就像我们正常的开发流程一样,我们可以把整个网站的发布流程拆分为两部分: <strong>打包</strong> 与 <strong>发布</strong>.</p><p>其中打包可以在我们的私有仓库中进行, 然后将打包后的静态网站 发布到github.io公仓中.<br>这里就用到了github的 action 自动编译功能. 其会在我们提交代码的时候触发一个操作,<br>调用一段脚本命令执行.</p><p>而这段脚本的核心就是通过git 将编译后的静态站点push 到github.io公仓中.</p><p>流程如下:<br><img src="/images/site/private_repo_flow.png" alt="发布流程图"></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>先在github上创建一个私有仓库: private_repo.</li><li>将github.io的源码迁移到新的仓库中.</li><li>准备github跨仓库git 提交代码权限, 参考下一节github申请person token</li><li>在private_repo 的action 中创建打包脚本, 脚本内容参考附录1<br><img src="/images/site/private_repo_new_action.png" alt="创建新action"></li></ol><h2 id="github申请person-token"><a href="#github申请person-token" class="headerlink" title="github申请person token"></a>github申请person token</h2><h3 id="第一步-获取token"><a href="#第一步-获取token" class="headerlink" title="第一步, 获取token"></a>第一步, 获取token</h3><ol><li>个人设置里找到入口<br><img src="/images/site/github_person_token_1.png" alt="person token 1"></li><li>找到开发者设置<br><img src="/images/site/github_person_token_2.png" alt="person token 2"></li><li>创建token<br><img src="/images/site/github_person_token_3.png" alt="person token 3"></li></ol><p><strong>这一步一定要记住创建好的token, 因为后面要用,而且这个页面刷新后就没了</strong>.</p><p>其实有过使用ssh经验的朋友们应该已经意识到了, 这一步其实就是一个创建ssh公钥的过程. 只不过这个公钥是放到github服务器上了.</p><h3 id="第二步-私有库配置"><a href="#第二步-私有库配置" class="headerlink" title="第二步, 私有库配置"></a>第二步, 私有库配置</h3><p>有了token, 正常来说就能提交代码了. 但是要知道这个东西是放到脚本里的, 明文暴露还是不太安全.<br>所以我们要在私有库里将这个token配置成一个环境变量,通过环境变量引用的方式使用,这样就安全多了.</p><ol><li>找到private_repo, 配置token环境变量<br><img src="/images/site/github_person_token_4.png" alt="person token 4"><br><img src="/images/site/github_person_token_5.png" alt="person token 5">  </li><li>配置完后, 我们就可以在脚本里通过环境变量来使用token了.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs doc">$&#123; &#123; secrets.YOUR_REPO_SECRET_NAME &#125; &#125;<br></code></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>可以尝试在私有库private_repo里提交文章了.</p><p>同时你会发现, github.io公仓里的内部全部被静态网站内容覆盖了. 不用担心,这是正常的.</p><h2 id="附录1-完整脚本"><a href="#附录1-完整脚本" class="headerlink" title="附录1 : 完整脚本"></a>附录1 : 完整脚本</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># ci name</span><br><span class="hljs-comment"># ci 脚本名称</span><br>name: Deploy Jekyll site to public github repos<br><br>on:<br>  <span class="hljs-comment"># Runs on pushes targeting the default branch</span><br>  <span class="hljs-comment"># 当代码 push 到 main 分支时, 执行该脚本</span><br>  push:<br>    branches: [<span class="hljs-string">&quot;main&quot;</span>]<br><br>  <span class="hljs-comment"># Allows you to run this workflow manually from the Actions tab</span><br>  <span class="hljs-comment"># 允许你 手动执行 这个脚本</span><br>  workflow_dispatch:<br><br><span class="hljs-comment"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages</span><br><span class="hljs-comment"># GITHUB_TOKEN 的操作权限</span><br>permissions:<br>  contents: read<br>  pages: write<br>  id-token: write<br><br><span class="hljs-comment"># Allow one concurrent deployment</span><br>concurrency:<br>  group: <span class="hljs-string">&quot;pages&quot;</span><br>  cancel-in-progress: true<br><br><span class="hljs-comment"># job 执行任务, 可以有多个, 默认并行运行, 可以通过 needs 关键字来设置依赖的其他 jobs</span><br><span class="hljs-comment"># step : 任务下的执行步骤, 一个job 会有多个步骤</span><br><span class="hljs-comment"># 操作:  一个step 下可以执行多个操作, 通常一行脚本为一个操作</span><br>jobs:<br>  <span class="hljs-comment"># Build job</span><br>  build:<br>    runs-on: ubuntu-latest<br>    steps:<br>      - name: Checkout<br>        uses: actions/checkout@v3<br>      <span class="hljs-comment"># 准备ruby 环境</span><br>      - name: Setup Ruby<br>        uses: ruby/setup-ruby@<span class="hljs-number">0</span>a29871fe2b0200a17a4497bae54fe5df0d973aa <span class="hljs-comment"># v1.115.3</span><br>        with:<br>          ruby-version: <span class="hljs-string">&#x27;3.0&#x27;</span> <span class="hljs-comment"># Not needed with a .ruby-version file</span><br>          bundler-cache: true <span class="hljs-comment"># runs &#x27;bundle install&#x27; and caches installed gems automatically</span><br>          cache-version: <span class="hljs-number">0</span> <span class="hljs-comment"># Increment this number if you need to re-download cached gems</span><br><span class="hljs-comment">#      - name: Setup Pages</span><br><span class="hljs-comment">#        id: pages</span><br><span class="hljs-comment">#        uses: actions/configure-pages@v2</span><br>      <span class="hljs-comment"># 打包 jekyll</span><br>      - name: Build with Jekyll<br>        <span class="hljs-comment"># Outputs to the &#x27;./_site&#x27; directory by default</span><br><span class="hljs-comment">#        run: bundle exec jekyll build --baseurl &quot;$&#123;&#123; steps.pages.outputs.base_path &#125;&#125;&quot;</span><br>        <span class="hljs-keyword">run</span><span class="language-bash">: bundle <span class="hljs-built_in">exec</span> jekyll build --verbose</span><br>        <span class="hljs-keyword">env</span>:<br>          JEKYLL_ENV: production<br>       <span class="hljs-comment"># 更新 打tar包</span><br><span class="hljs-comment">#      - name: Upload artifact</span><br><span class="hljs-comment">#        # Automatically uploads an artifact from the &#x27;./_site&#x27; directory by default</span><br><span class="hljs-comment">#        uses: actions/upload-pages-artifact@v1</span><br><br>      - name: 增加外露github文件<br>        working-directory: ./_site  <span class="hljs-comment"># jekyll 默认 build 到 _site 目录，因此设置命令执行的目录为 ./_site</span><br>        <span class="hljs-keyword">run</span><span class="language-bash">: |  <span class="hljs-comment"># run 后面加个 ‘|’ 然后换行可以同时执行多个命令，每行一个</span></span><br>          cp ../README.md .<br> <br>      - name: 部署_site到博客网站仓库<br>        working-directory: ./_site<br>        <span class="hljs-keyword">run</span><span class="language-bash">: |</span><br>          git init<br>          git checkout -b main<br>          git <span class="hljs-keyword">add</span><span class="language-bash"> -A</span><br>          git -c <span class="hljs-keyword">user</span>.name=<span class="hljs-string">&#x27;your_name&#x27;</span> -c <span class="hljs-keyword">user</span>.email=<span class="hljs-string">&#x27;your_email&#x27;</span> commit -m <span class="hljs-string">&#x27;anything&#x27;</span> <br>          git push <span class="hljs-string">&quot;https://$&#123; &#123; github.actor &#125; &#125;:$&#123; &#123; secrets.YOUR_REPO_SECRET_NAME &#125; &#125;@github.com/YOUR_GITHUB_IO_REPO&quot;</span> HEAD:main -f -q<br></code></pre></td></tr></table></figure><ul><li>将上面的your_name,your_email,anything 替换成自己的内容</li><li>YOUR_REPO_SECRET_NAME 替换成privat_repo的secret_token_name</li><li>YOUR_GITHUB_IO_REPO 替换成自己的github.io公仓</li></ul><h2 id="附录2-github-action-脚本简介"><a href="#附录2-github-action-脚本简介" class="headerlink" title="附录2 : github action 脚本简介"></a>附录2 : github action 脚本简介</h2><p>在github的action模块里创建了一个脚本后, 就会在项目的.github&#x2F;workflows里创建一个对应的文件.</p><p>通过workflow 大致可以理解这个模块的功能, 就是一个工作流.<br>在一些操作执行(通常是提交代码)后, 触发一系列的后续自动化操作, 这些操作可以是并行的,也可以是串行的. </p><p>而这些后续操作是通过一些action脚本组织起来的. 整体上看,一个action由以下部分组成.</p><ul><li>jobs: 任务. 最大的逻辑单元. 可以有多个. jobs 默认是并行运行，可以通过 needs 关键字来设置依赖的其他 jobs。</li><li>steps: 步骤. job的执行步骤. 顺序执行. 可以job可以有多个步骤.</li><li>runs: 操作. 也可以理解为指令(bash命令等). 通常一行脚本就是一个操作. 并非所有步骤都会运行操作，但是操作都是在步骤中运行的</li></ul><p>无论是job,还是step, 都可以理解一组指令集合. 他们都是可以配置id的. 可以通过id来互相依赖, 互相调用.</p><p>其他的可以参考里的官方文档.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/peaceiris/actions-gh-pages">常见脚本</a></p><p><a href="https://docs.github.com/cn/actions/learn-github-actions/contexts#github-context">github action 官方文档</a></p><p><a href="https://www.xheldon.com/tech/the-using-of-github-pages.html">免费使用私有仓库发布 GitHub Pages</a></p><p><a href="https://juejin.cn/post/7008847699919241229">通过 GitHub Actions 实现私有仓库的免费 Github Pages 部署</a></p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch重建索引</title>
    <link href="/2022/09/12/es-reindex/"/>
    <url>/2022/09/12/es-reindex/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么要重建索引"><a href="#为什么要重建索引" class="headerlink" title="为什么要重建索引"></a>为什么要重建索引</h2><p>众所周知, es是一种高效的数据查询,检索引擎。 可以对海量的数据进行快速的查询。但是在使用es的时候，经常会遇到一个比较尴尬的问题，那就是es索引里的字段类型是固定的，不可修改的。而es的索引又是可以自动扩展字段的。 这个时候自动扩展出来的字段就是使用了默认的字段类型(通常是text类型)。</p><p>惊不惊喜！</p><p>查看索引字段的方法:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /my_index<br><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;my_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;_doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;dynamic_templates&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;string_fields&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;match_mapping_type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;string&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;mapping&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><br>                            <span class="hljs-punctuation">&#125;</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;field_a&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;field_b&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;date&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;field_c&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;norms&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>                                <span class="hljs-attr">&quot;ignore_above&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">256</span><br>                            <span class="hljs-punctuation">&#125;</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>聪明的你肯定想到了, 如果我们忘记加字段了, 或者字段加错了要修改字段类型咋办? 这个时候场景的办法就只有一个了:</p><p>重建索引!</p><p>从数据库角度来看,也就是新增新表, 迁移数据, 删除老表.</p><h2 id="背景-与-目标"><a href="#背景-与-目标" class="headerlink" title="背景 与 目标"></a>背景 与 目标</h2><p>Elasticsearch 版本 : v 6.6<br>目标: 在my_index 索引上新增一个integer字段. 且中间不间断服务.</p><h2 id="S1-使用别名代替实体索引"><a href="#S1-使用别名代替实体索引" class="headerlink" title="S1: 使用别名代替实体索引"></a>S1: 使用别名代替实体索引</h2><p>使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/indices-aliases.html">aliases api</a><br>创建一个别名my_index 指向实际的索引my_idex.<br>这样,我们通过my_index访问数据时, 就不会直接访问my_index索引了, 而是通过别名指向对应的索引.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">POST /_aliases<br>&#123;<br>    <span class="hljs-string">&quot;actions&quot;</span> : [<br>        &#123; <span class="hljs-string">&quot;add&quot;</span> : &#123; &quot;<span class="hljs-type">index</span><span class="hljs-string">&quot; : &quot;</span>my_index<span class="hljs-string">&quot;, &quot;</span>alias<span class="hljs-string">&quot; : &quot;</span>my_index<span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="S2-创建新的索引"><a href="#S2-创建新的索引" class="headerlink" title="S2: 创建新的索引"></a>S2: 创建新的索引</h2><p>使用 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/indices-put-mapping.html">put mapping api</a><br>打算新增一个字段 <strong>fiedl_d</strong>, 数据类型.</p><p>因为默认的string类型是keyword (假设, 意会即可), 所以如果想要新增一个整型类型, 就不能通过自动的扩展字段使用默认类型的方式. 所以必须显式的指定字段类型.</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">put</span> my_index2<br><br>&#123;<br>    <span class="hljs-string">&quot;_doc&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;dynamic_templates&quot;</span>:[<br>            &#123;<br>                <span class="hljs-string">&quot;string_fields&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;match_mapping_type&quot;</span>:<span class="hljs-string">&quot;string&quot;</span>,<br>                    <span class="hljs-string">&quot;mapping&quot;</span>:&#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        ],<br>        <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;field_a&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;field_b&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span>,<br>                <span class="hljs-string">&quot;format&quot;</span>:<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;field_c&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>                <span class="hljs-string">&quot;norms&quot;</span>:<span class="hljs-literal">false</span>,<br>                <span class="hljs-string">&quot;fields&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;keyword&quot;</span>:&#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span>,<br>                        <span class="hljs-string">&quot;ignore_above&quot;</span>:<span class="hljs-number">256</span><br>                    &#125;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;field_d&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="S3-迁移数据"><a href="#S3-迁移数据" class="headerlink" title="S3: 迁移数据"></a>S3: 迁移数据</h2><p>使用 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/docs-reindex.html">Reindex api</a><br>将老的my_index 数据迁移到新的my_index2上.<br>这一步比较耗时, 做好心理准备.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">POST _reindex<br>&#123;<br>  &quot;<span class="hljs-selector-tag">source</span>&quot;: &#123;<br>    &quot;index&quot;: <span class="hljs-string">&quot;my_index&quot;</span><br>  &#125;,<br>  &quot;dest&quot;: &#123;<br>    &quot;index&quot;: <span class="hljs-string">&quot;my_index2&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="S4-变更别名"><a href="#S4-变更别名" class="headerlink" title="S4: 变更别名"></a>S4: 变更别名</h2><p>使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/indices-aliases.html">aliases api</a><br>将别名从老的index, 指向新的index</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">POST /_aliases<br>&#123;<br>    <span class="hljs-string">&quot;actions&quot;</span> : [<br>        &#123; <span class="hljs-string">&quot;remove&quot;</span> : &#123; &quot;<span class="hljs-type">index</span><span class="hljs-string">&quot; : &quot;</span>my_index<span class="hljs-string">&quot;, &quot;</span>alias<span class="hljs-string">&quot; : &quot;</span>my_index<span class="hljs-string">&quot; &#125; &#125;,</span><br><span class="hljs-string">        &#123; &quot;</span>add<span class="hljs-string">&quot; : &#123; &quot;</span>index<span class="hljs-string">&quot; : &quot;</span>my_index2<span class="hljs-string">&quot;, &quot;</span>alias<span class="hljs-string">&quot; : &quot;</span>my_index<span class="hljs-string">&quot; &#125; &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="S5-将老索引的增量数据迁移到新索引上"><a href="#S5-将老索引的增量数据迁移到新索引上" class="headerlink" title="S5: 将老索引的增量数据迁移到新索引上"></a>S5: 将老索引的增量数据迁移到新索引上</h2><p>处理迁移期间my_index 发生的增量数据</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">POST <span class="hljs-keyword">_reindex</span><br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span><span class="hljs-operator">:</span> 10000,<br>  <span class="hljs-string">&quot;source&quot;</span><span class="hljs-operator">:</span> &#123;<br>    <span class="hljs-string">&quot;index&quot;</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;my_index&quot;</span>,<br>    <span class="hljs-string">&quot;sort&quot;</span><span class="hljs-operator">:</span> &#123; <span class="hljs-string">&quot;date&quot;</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;desc&quot;</span> &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;dest&quot;</span><span class="hljs-operator">:</span> &#123;<br>    <span class="hljs-string">&quot;index&quot;</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;my_index2&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="S6-删除老索引"><a href="#S6-删除老索引" class="headerlink" title="S6: 删除老索引"></a>S6: 删除老索引</h2><p>使用 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/indices-delete-index.html">delete api</a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">delete</span> my_index<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此, 整个重建索引过程完毕.<br>很麻烦吧.<br>为了不这么麻烦, 以后要给es 增加新字段时, 一定要先通过maping的方式先新增字段. 然后再在代码里处理相对应的逻辑.</p><p>over!</p><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>可以通过put mapping的方式, 增量补充索引的字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT my_index<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;manager&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;employees&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nested&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/docs.html">官方文档-api</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/indices.html">官方文档-api2</a></p>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
      <category>Elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>beaudar评论插件及常见问题解决</title>
    <link href="/2022/09/09/site-beaudar-error/"/>
    <url>/2022/09/09/site-beaudar-error/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是beaudar"><a href="#什么是beaudar" class="headerlink" title="什么是beaudar"></a>什么是beaudar</h2><blockquote><p>Beaudar 名称源于粤语“表达”的发音，是 Utterances 的中文版本,是一款基于github issue 的一个评论插件</p></blockquote><ul><li>开源</li><li>没有追踪，没有广告，永久免费</li><li>不保留数据，所有数据保存在用户 GitHub issue 中</li><li>有源于 GitHub primer 的多个主题</li><li>轻量化，没有字体下载，没有 JS 框架加载</li></ul><p>本站的评论模块就是使用的 <a href="https://beaudar.lipk.org/">beaudar</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>选择 Beaudar 将要连接的仓库, 也就是网站对应的github仓库。</p><ol><li>确保仓库是公开的，否则您的读者将无法查看 Issue(评论)。</li><li>安装并确保 Beaudar app 已在仓库中安装，否则用户将无法发表评论。</li></ol><p><a href="https://github.com/apps/beaudar">点击这里安装beaudar</a></p><p><img src="/images/site/comment/beaudar-app-install.png" alt="安装beaudar"><br>3. 将网站对应的分支配置到配置中，并确保 Issues 功能已打开。<br>4. 将以下脚本标记添加到博客的模板中。 将其放置在要显示注释的位置。 使用 .beaudar 和 .beaudar-frame 选择器自定义布局。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;https://beaudar.lipk.org/client.js&quot;</span><br>        repo=<span class="hljs-string">&quot;在此处输入仓库&quot;</span><br>        branch=<span class="hljs-string">&quot;main&quot;</span><br>        issue-term=<span class="hljs-string">&quot;pathname&quot;</span><br>        label=<span class="hljs-string">&quot;tag&quot;</span><br>        theme=<span class="hljs-string">&quot;github-light&quot;</span><br>        keep-theme=<span class="hljs-string">&quot;false&quot;</span><br>        loading=<span class="hljs-string">&quot;false&quot;</span><br>        comment-order=<span class="hljs-string">&quot;desc&quot;</span><br>        input-position=<span class="hljs-string">&quot;top&quot;</span><br>        crossorigin=<span class="hljs-string">&quot;anonymous&quot;</span><br>        <span class="hljs-keyword">async</span>&gt;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>配置解读</p><ul><li>src : 评论插件客户端地址,不能动</li><li>repo : 网站仓库</li><li>branch : 网站部署分支</li><li>issue-term : 博客文章 与 Issue 的映射<ul><li>pathname : Beaudar 将搜索标题包含博客文章 URL 路径的 Issue。如果未找到匹配的 Issue，则当有人首次对您的信息发表评论时，Beaudar 会自动创建一个 Issue。</li><li>url : Beaudar 将搜索标题包含博客文章 URL 的 Issue。 如果未找到匹配的 Issue，则当有人首次对您的信息发表评论时，Beaudar 会自动创建一个 Issue</li><li>title: Beaudar 将搜索标题包含博客文章标题的 Issue。 如果未找到匹配的 Issue，则当有人首次对您的信息发表评论时，Beaudar 会自动创建一个 Issue</li><li>og:title : Beaudar 将搜索标题包含博客文章页面 meta 元素 og:title 的 Issue。 如果未找到匹配的 Issue，则当有人首次对您的信息发表评论时，Beaudar 会自动创建一个 Issue</li><li>preferred-color-scheme:您可以配置 Beaudar 以按编号加载特定的 Issue。 问题不会自动创建</li><li>可以指定自己的名称: 将 Beaudar 配置为搜索标题包含您选择的特定名称的问题。如果未找到匹配问题，Beaudar 将自动创建第一次有人评论您的帖子时。Issue 的标题将是您选择的名称</li></ul></li><li>theme: 主题</li><li>keep-theme: 将主题设置保存到页面的 sessionStorage，修改主题后刷新，主题设置不会丢失</li><li>label: 将分配给 Beaudar 创建的问题的标签,标签名称区分大小写。该标签必须存在于您的仓库中，无法附加不存在的标签。标签名称支持添加表情符号</li><li>loading: 点击加载图标可跳转至官方页面。</li><li>comment-order: 评论的发表时间排序</li><li>input-position: 评论框位置,当选择将评论顺序设置为“降序”时，建议将评论框放置在“顶部”。因为当评论数量很多时候，发表评论后可以第一时间看到评论发表成功</li><li>crossorigin: 跨域</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="缺少-“beaudar-json”-配置"><a href="#缺少-“beaudar-json”-配置" class="headerlink" title="缺少 “beaudar.json” 配置"></a>缺少 “beaudar.json” 配置</h3><p><img src="/images/site/comment/beaudar-error.png" alt="缺少 &quot;beaudar.json&quot; 配置"><br>原因: 现在github的默认主分支是main, 不在是master. 所以分支找不到.<br>配置的时候指定分支为main就可以了.</p><h3 id="hexo-fluid主题下的使用"><a href="#hexo-fluid主题下的使用" class="headerlink" title="hexo-fluid主题下的使用"></a>hexo-fluid主题下的使用</h3><p>将上述的 script脚本 在<code>_config.yml</code>中按如下方式添加即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 自定义底部 HTML 内容（位于 footer 上方），也可用于外部引入 js css 这些操作，注意不要和 post.custom 配置冲突</span><br><span class="hljs-attr">custom_html:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;script src=&quot;https://beaudar.lipk.org/client.js&quot;</span><br><span class="hljs-string">        repo=&quot;Hanchers/hanchers.github.io&quot;</span><br><span class="hljs-string">        branch=&quot;main&quot;</span><br><span class="hljs-string">        issue-term=&quot;pathname&quot;</span><br><span class="hljs-string">        label=&quot;tag&quot;</span><br><span class="hljs-string">        theme=&quot;github-light&quot;</span><br><span class="hljs-string">        keep-theme=&quot;false&quot;</span><br><span class="hljs-string">        loading=&quot;false&quot;</span><br><span class="hljs-string">        comment-order=&quot;desc&quot;</span><br><span class="hljs-string">        input-position=&quot;top&quot;</span><br><span class="hljs-string">        crossorigin=&quot;anonymous&quot;</span><br><span class="hljs-string">        async&gt;</span><br><span class="hljs-string">&lt;/script&gt;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>但是效果比较丑，需要自己去调整一下css才与整个主题适配, 建议使用fluid主题已经集成好的组件。<br><img src="/images/site/comment/beaudar_in_fluid.png" alt="fluid主题下的beaudar 评论插件效果"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://githubhelp.com/beaudar/beaudar">beaudar Q&amp;A</a></p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>beaudar</tag>
      
      <tag>评论插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何写好java注释</title>
    <link href="/2022/09/01/java-java-doc-skill/"/>
    <url>/2022/09/01/java-java-doc-skill/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是java注释"><a href="#什么是java注释" class="headerlink" title="什么是java注释"></a>什么是java注释</h2><p>要回答这个问题,先提出一个说法:我们写的代码是给人看的,不是给机器看的.<br>如果你不认可这个说法,下面关于代码注释的一些总结想必对你也没啥帮助.<br>如果你认可这个说法, 那么下面的文章希望会给你一些帮助.</p><p>回到本段的主题,什么是java注释呢?</p><ol><li><p>首先,注释是面向代码维护者的: 注释是对代码逻辑的一段说明, 方便后续的代码维护者能够快速的了解这段代码的含义,并依次为基础能够在现有代码的基础上做修改与维护.</p></li><li><p>其次,注释是面向系统使用者的: 要知道类似于java,或者spring这样偏向于底层,框架类的代码.全世界有数以万计的使用者的,这些人没精力也没有必要在调用api的时候去了解这段代码的底层实现逻辑,所以这段代码的api说明文档就显得很重要了.而代码上的注释就是相关api文档的主要来源.</p></li><li><p>通过javadoc命令,可以将注释抽离生成html文档,比如官方的<a href="https://docs.oracle.com/en/java/javase/16/docs/api/index.html">java16API文档</a></p></li></ol><h2 id="如何写好java注释"><a href="#如何写好java注释" class="headerlink" title="如何写好java注释"></a>如何写好java注释</h2><p>想要写好代码的注释,我们要从注释的面向用户来考虑.不同的用户关注点还是有点差异的.</p><h4 id="面向代码维护者"><a href="#面向代码维护者" class="headerlink" title="面向代码维护者"></a>面向代码维护者</h4><p>作为一名代码的维护者,当我们拿到一份没有任何注释的代码的时候,相信大家内心的感受是相同的.毕竟人类的悲欢并不相通, 除非看到没有注释的代码.</p><p>如果有了解设计模式的朋友,相信一定听说过一个设计原则:<strong>开闭原则</strong>, 对扩展开发,对修改关闭. 那么大家有没有想过为啥会有这个原则呢?</p><p>翻译一下: 修改现有的代码是有风险的,但是如果是扩展写新代码的话,作为开发者的你,是了解当前功能的前后背景的,而且你无论怎么写都不会对历史功能产生影响.所以对我们的代码设计能力提出来要求.</p><p>再翻译一下: 原来的代码既然跑的好好的,为啥要修改它呢, 改出问题来算谁的?</p><p>再翻译一下: 为啥我们不敢改以前的代码呢?谁知道当时为啥要写这段逻辑,谁知道这段逻辑有谁在用?改好了没有夸, 改崩了有锅背.</p><p>这就是我们维护老代码的困境!</p><p>作为一名程序员,我们要有一个概念,我们的代码是我们某个时刻的思维逻辑的固化.<br>如果是一个比较简单的逻辑,注释可以简单写写.<br>如果是一段比较复杂的逻辑,那么我们的注释要能够描述清楚我们当时的这段逻辑的背景(为什么要写这段逻辑), 意图(这段逻辑要实现什么效果), 用法(这段逻辑改如何使用,以及谁在用), 最好能有修改建议.</p><p>在业界开源的代码里有很多比较好的例子,来个spring的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * AOP Alliance MethodInterceptor for declarative transaction</span><br><span class="hljs-comment"> * management using the common Spring transaction infrastructure</span><br><span class="hljs-comment"> * (&#123;<span class="hljs-doctag">@link</span> org.springframework.transaction.PlatformTransactionManager&#125;/</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.transaction.ReactiveTransactionManager&#125;).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Derives from the &#123;<span class="hljs-doctag">@link</span> TransactionAspectSupport&#125; class which</span><br><span class="hljs-comment"> * contains the integration with Spring&#x27;s underlying transaction API.</span><br><span class="hljs-comment"> * TransactionInterceptor simply calls the relevant superclass methods</span><br><span class="hljs-comment"> * such as &#123;<span class="hljs-doctag">@link</span> #invokeWithinTransaction&#125; in the correct order.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;TransactionInterceptors are thread-safe.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Rod Johnson</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Juergen Hoeller</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> TransactionProxyFactoryBean</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.aop.framework.ProxyFactoryBean</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.aop.framework.ProxyFactory</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h4 id="面向api使用者"><a href="#面向api使用者" class="headerlink" title="面向api使用者"></a>面向api使用者</h4><p>对于api的使用者,注释文档的要求相对简单些.</p><p>他们只关心这个方法的功能是什么, 以及入参有哪些,出参会有哪些, 会不会抛异常等, 会不会返回null等.  他们不关心这个方法的内部实现逻辑是啥, 比如一个排序方法, 使用者不关心这个方法内部使用冒泡排序,还是快排, 只要能完成诉求就行.</p><p>所以,面向api的使用者的注释,原则就是让他知道这个方法怎么使用就行了.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Returns an Image object that can then be painted on the screen. </span><br><span class="hljs-comment">* The url argument must specify an absolute &lt;a href=&quot;#&#123;<span class="hljs-doctag">@link</span>&#125;&quot;&gt;&#123;<span class="hljs-doctag">@link</span> URL&#125;&lt;/a&gt;. The name</span><br><span class="hljs-comment">* argument is a specifier that is relative to the url argument. </span><br><span class="hljs-comment">* &lt;p&gt;</span><br><span class="hljs-comment">* This method always returns immediately, whether or not the </span><br><span class="hljs-comment">* image exists. When this applet attempts to draw the image on</span><br><span class="hljs-comment">* the screen, the data will be loaded. The graphics primitives </span><br><span class="hljs-comment">* that draw the image will incrementally paint on the screen. </span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span>  url  an absolute URL giving the base location of the image</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span>  name the location of the image, relative to the url argument</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span>      the image at the specified URL</span><br><span class="hljs-comment">* <span class="hljs-doctag">@see</span>         Image</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> Image <span class="hljs-title function_">getImage</span><span class="hljs-params">(URL url, String name)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> getImage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url, name));<br>&#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="写好java注释常用的技巧"><a href="#写好java注释常用的技巧" class="headerlink" title="写好java注释常用的技巧"></a>写好java注释常用的技巧</h2><h4 id="常用的注释tag"><a href="#常用的注释tag" class="headerlink" title="常用的注释tag"></a>常用的注释tag</h4><ol><li>@param 方法参数</li><li>@return 方法返回值</li><li>@throws 方法抛出的异常, java1.2后添加</li><li>@exception 同@throws</li><li>@see 查看参考代码</li><li>@author 标识作者</li><li>@version 代码版本</li><li>@since 从某个版本开始引入</li><li>@serial( @serialField  @serialData)</li><li>@deprecated 废弃某个版本的代码</li></ol><h4 id="常用的内联tag"><a href="#常用的内联tag" class="headerlink" title="常用的内联tag"></a>常用的内联tag</h4><ol><li>{@code} : 代码高亮,等同于 <code>&#123;@literal&#125;</code></li></ol><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span></span><span class="hljs-template-variable">&#123;@literal&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>{@docRoot} : 标记文档的根路径,用来实现相对路径</li></ol><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">/**<br>* See the &lt;ahref=<span class="hljs-string">&quot;&#123;<span class="hljs-variable">@docRoot</span>&#125;/copyright.html&quot;</span>&gt;Copyright&lt;<span class="hljs-regexp">/a&gt;.</span><br><span class="hljs-regexp">*/</span><br></code></pre></td></tr></table></figure><ol start="3"><li>{@inheritDoc} : 继承某个文档,嵌套文档使用</li><li>{@link url} : 在注释文本区域内, 内联一个链接</li></ol><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs leaf">Use the &#123;@link <span class="hljs-punctuation">#</span><span class="hljs-keyword">getComponentAt</span><span class="hljs-params">(<span class="hljs-keyword">in</span><span class="hljs-variable">t</span>, <span class="hljs-keyword">in</span><span class="hljs-variable">t</span>)</span> getComponentAt&#125; method.<br><br></code></pre></td></tr></table></figure><ol start="5"><li>{@linkplain url label} 相对于{@link}, 支持自定义label文案来代指这段url</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Refer <span class="hljs-keyword">to</span> &#123;@linkplain <span class="hljs-keyword">add</span>() the overridden <span class="hljs-keyword">method</span>&#125;.<br>会显示为<br>Refer <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;the overridden method&#x27;</span>.<br><br></code></pre></td></tr></table></figure><ol start="6"><li>{@literal} 转义用, 方便显示一些特殊字符</li><li>{@value} 常量时, 会直接显示标注代码的值</li></ol><h3 id="注释语句中的小技巧"><a href="#注释语句中的小技巧" class="headerlink" title="注释语句中的小技巧"></a>注释语句中的小技巧</h3><h4 id="param-return-throws"><a href="#param-return-throws" class="headerlink" title="@param @return @throws"></a>@param @return @throws</h4><p>一个正常方法必然会用到的注释tag,<br>@param 代表方法的入参,<br>@return 代表方法的返回值.<br>@throws 代表可能引发方法中断的异常. 等同与 @exception<br>这里需要特别说明一下, 有些人可能觉得只有那些受检异常(也就是必须在方法签名里声明的异常)才需要在注释里声明@throws. 其实不是的. 所有引发程序中断的异常, 包括运行时异常都可以在注释里说明, 也可以在方法签名里添加. 尤其是自定义的异常.<br>举个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Return the underlying ThreadPoolExecutor for native access.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the underlying ThreadPoolExecutor (never &#123;<span class="hljs-doctag">@code</span> null&#125;)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalStateException if the ThreadPoolTaskExecutor hasn&#x27;t been initialized yet</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> ThreadPoolExecutor <span class="hljs-title function_">getThreadPoolExecutor</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalStateException &#123;<br>Assert.state(<span class="hljs-built_in">this</span>.threadPoolExecutor != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;ThreadPoolTaskExecutor not initialized&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.threadPoolExecutor;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的IllegalStateException 是一个RuntimeException异常, 我们在方法里可能抛出这个异常, 最好是在方法签名里声明一下, 然后在代码注释里说明一下.</p><h4 id="see"><a href="#see" class="headerlink" title="@see"></a>@see</h4><p>当前代码可以参考的其他代码, 后面跟代码的全路径,可以是类,方法,属性等.具体参考如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@see</span> #field<br><span class="hljs-meta">@see</span> #Constructor(Type, Type...)<br><span class="hljs-meta">@see</span> #Constructor(Type id, Type id...)<br><span class="hljs-meta">@see</span> #method(Type, Type,...)<br><span class="hljs-meta">@see</span> #method(Type id, Type, id...)<br><span class="hljs-meta">@see</span> Class<br><span class="hljs-meta">@see</span> Class#field<br><span class="hljs-meta">@see</span> Class#Constructor(Type, Type...)<br><span class="hljs-meta">@see</span> Class#Constructor(Type id, Type id)<br><span class="hljs-meta">@see</span> Class#method(Type, Type,...)<br><span class="hljs-meta">@see</span> Class#method(Type id, Type id,...)<br><span class="hljs-meta">@see</span> <span class="hljs-keyword">package</span>.Class<br><span class="hljs-meta">@see</span> <span class="hljs-keyword">package</span>.Class#field<br><span class="hljs-meta">@see</span> <span class="hljs-keyword">package</span>.Class#Constructor(Type, Type...)<br><span class="hljs-meta">@see</span> <span class="hljs-keyword">package</span>.Class#Constructor(Type id, Type id)<br><span class="hljs-meta">@see</span> <span class="hljs-keyword">package</span>.Class#method(Type, Type,...)<br><span class="hljs-meta">@see</span> <span class="hljs-keyword">package</span>.Class#method(Type id, Type, id)<br><span class="hljs-meta">@see</span> <span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure><h4 id="author"><a href="#author" class="headerlink" title="@author"></a>@author</h4><p>标识当前代码的作者是谁, 可以一个,也可以有多个.</p><h4 id="version-since"><a href="#version-since" class="headerlink" title="@version @since"></a>@version @since</h4><p>都是版本相关的tag<br>@version 标识当前版本好, 编译的时候会用到. 符合SCCS规范.<br>@since 标识这段代码的引入版本</p><h4 id="serial-serialField-serialData"><a href="#serial-serialField-serialData" class="headerlink" title="@serial @serialField  @serialData"></a>@serial @serialField  @serialData</h4><p>序列化相关的属性, 标识哪些字段可以序列化,哪些不行.</p><h4 id="deprecated"><a href="#deprecated" class="headerlink" title="@deprecated"></a>@deprecated</h4><p>废弃某段代码,表示不再维护,并在一段时间后会被删除. 标记后, 相关的引用位置会被标记为删除线.<br>个人认为这个tag还是很有用的:</p><ol><li>创建代码容易删除难, 这个tag能够很好的帮忙我们去下线不再维护的代码,减轻维护压力.(愿世界上屎山越来越少)</li><li>方便我们代码升级. 如果我们要升级一段代码,先将老代码废弃,然后通过@see,引导用户使用新的方法.</li></ol><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs leaf">/**<br>* @deprecated  As of JDK 1.1, replaced by <br>*               <br> setBounds<br>* @see <span class="hljs-punctuation">#</span><span class="hljs-keyword">setBounds</span><span class="hljs-params">(<span class="hljs-keyword">in</span><span class="hljs-variable">t</span>,<span class="hljs-keyword">in</span><span class="hljs-variable">t</span>,<span class="hljs-keyword">in</span><span class="hljs-variable">t</span>,<span class="hljs-keyword">in</span><span class="hljs-variable">t</span>)</span><br>*/<br></code></pre></td></tr></table></figure><h4 id="html标签来排版"><a href="#html标签来排版" class="headerlink" title="html标签来排版"></a>html标签来排版</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">&lt;p&gt; : 新起一段<br>&lt;br&gt; : 换行<br></code></pre></td></tr></table></figure><h4 id="代码块样式"><a href="#代码块样式" class="headerlink" title="代码块样式"></a>代码块样式</h4><p>想在JAVA的注释中添加一段代码,并且可以优雅的编译出来还是挺麻烦的.下面提供一种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 下面的代码注释可以按代码格式编译</span><br><span class="hljs-comment">  * &lt;pre class=code&gt;</span><br><span class="hljs-comment">  *     citys : [</span><br><span class="hljs-comment">  *         beijing,</span><br><span class="hljs-comment">  *         shanghai</span><br><span class="hljs-comment">  *      ]</span><br><span class="hljs-comment">  * &lt;/pre&gt;</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> List&lt;String&gt;&gt; citys;<br><br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html">官方文档</a><br><a href="https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html">javadoc - The Java API Documentation Generator</a><br><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/deprecation/deprecation.html">How and When To Deprecate APIs</a></p>]]></content>
    
    
    <categories>
      
      <category>编程人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法套路</title>
    <link href="/2022/08/23/algorithm-skill/"/>
    <url>/2022/08/23/algorithm-skill/</url>
    
    <content type="html"><![CDATA[<p>平时在刷算法题的时候经常会遇到一些套路, 也就是一些类似的小技巧. 这类技巧能够快速的帮我们解决某一类的算法问题. 这里就是整理一下自己遇到的,总结的算法技巧, 以及这些技巧可以应用与哪些场景.</p><h2 id="1-滑动窗口-双指针"><a href="#1-滑动窗口-双指针" class="headerlink" title="1 滑动窗口(双指针)"></a>1 滑动窗口(双指针)</h2><p>个人理解,滑动窗口 的基础就是双指针. 即一个快指针代指窗口的头部, 一个慢指针代指窗口的尾部. 滑动窗口经过的地方就是我们要处理的数据. </p><p><img src="/images/tech/algorithm/move-window.png" alt="滑动窗口示意图"></p><p>如图所示,我们的滑动创建运动方向从左往右, 已经经过了区域1,正在经历区域2,3,4. 还没有经历区域5.</p><h3 id="1-1-滑动窗口的特性"><a href="#1-1-滑动窗口的特性" class="headerlink" title="1.1 滑动窗口的特性"></a>1.1 滑动窗口的特性</h3><p>通过上面分析可知, 滑动窗口是一个窗口经过一段连续的区域,并实时计算统计经过区域内的一些值. 所以滑动窗口很适用的场景特点也就出来了:</p><ol><li>单维度数据,比如字符串, 比如一维数组.</li><li>结果值有连续特性要求的. 因为滑动窗口必然是连续经过计算区域的.所遇到的值也必然是连续的.</li></ol><h3 id="1-2-常见场景"><a href="#1-2-常见场景" class="headerlink" title="1.2 常见场景"></a>1.2 常见场景</h3><ol><li><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">计算一个字符串内不含有重复字符的</a></li></ol><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中常用的工具类(2) System</title>
    <link href="/2022/08/20/java-java-utils-2-system/"/>
    <url>/2022/08/20/java-java-utils-2-system/</url>
    
    <content type="html"><![CDATA[<p>System工具类也是java中常用的一个工具类，并且从java 1.0 时代就存在了。它是不能被实例化的。我们这里介绍一下它的简单用法.  </p><p>下面是官方介绍</p><blockquote><p>The System class contains several useful class fields and methods. It cannot be instantiated.<br>Among the facilities provided by the System class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array.</p></blockquote><p>以下介绍System的常用方法</p><h3 id="流相关"><a href="#流相关" class="headerlink" title="流相关"></a>流相关</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置标准输入流</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIn</span><span class="hljs-params">(InputStream in)</span>;<br><span class="hljs-comment">// 设置标准输出流</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOut</span><span class="hljs-params">(PrintStream out)</span>;<br><span class="hljs-comment">// 设置标准错误输出流</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setErr</span><span class="hljs-params">(PrintStream err)</span>;<br></code></pre></td></tr></table></figure><p>以上的流就会在System的标准流中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.in.read();<br>System.out.println();<br>System.err.println();<br></code></pre></td></tr></table></figure><p>获取一个基础虚拟机的流通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Returns the channel inherited from the entity that created this Java virtual machine.</span><br><span class="hljs-comment">// This method returns the channel obtained by invoking the inheritedChannel method of the system-wide default SelectorProvider object.</span><br><span class="hljs-comment">// In addition to the network-oriented channels described in inheritedChannel, this method may return other kinds of channels in the future.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Channel <span class="hljs-title function_">inheritedChannel</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException<br><br>System.out.println(System.inheritedChannel());<span class="hljs-comment">//null</span><br></code></pre></td></tr></table></figure><h3 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h3><p>设置或获取 java虚拟机的安全管理器。这个我用的比较少，大家看注释吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Sets the System security.</span><br><span class="hljs-comment">// If there is a security manager already installed, this method first calls the security manager&#x27;s checkPermission method with a RuntimePermission(&quot;setSecurityManager&quot;) permission to ensure it&#x27;s ok to replace the existing security manager. This may result in throwing a SecurityException.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecurityManager</span><span class="hljs-params">(<span class="hljs-keyword">final</span> SecurityManager s)</span>;<br><br><span class="hljs-comment">// if a security manager has already been established for the current application, then that security manager is returned; otherwise, null is returned.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SecurityManager <span class="hljs-title function_">getSecurityManager</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">// 默认</span><br>System.out.println(System.getSecurityManager());<span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><h3 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h3><p>获取java的控制台对象，关于控制台命令交互可以通过这里获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Returns the unique Console object associated with the current Java virtual machine, if any.</span><br><span class="hljs-comment">// Returns: The system console, if any, otherwise null. </span><br><span class="hljs-comment">// Since: 1.6</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Console <span class="hljs-title function_">console</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><h3 id="时间相关"><a href="#时间相关" class="headerlink" title="时间相关"></a>时间相关</h3><p>这应该是大家使用最频繁的几个接口。</p><ul><li>毫秒</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取当前系统时间戳（公元1970.1.1 凌晨到现在的毫秒数），native虚拟机实现</span><br><span class="hljs-comment">// the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">long</span> <span class="hljs-title function_">currentTimeMillis</span><span class="hljs-params">()</span>;<br><br></code></pre></td></tr></table></figure><ul><li>纳秒精度数</li></ul><p>获取当前系统的纳秒精度的数（基于当前虚拟机）。这个数是依据当前虚拟机的一个原点计算出来的一个高精度值，与具体的时间无关（比如毫秒方法获取的是1970到今天的时间戳，但纳秒的原点不是具体的某个时间点）<br>所以，这个方法的用处也就有了，就是基于同一个虚拟机的纳秒级精度的前后时间比较。<br>因为数据比较大，可以会有越界风险</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Returns the current value of the running Java Virtual Machine&#x27;s high-resolution time source, in nanoseconds.</span><br><span class="hljs-comment">// This method can only be used to measure elapsed time and is not related to any other notion of system or wall-clock time. The value returned represents nanoseconds since some fixed but arbitrary origin time (perhaps in the future, so values may be negative). The same origin is used by all invocations of this method in an instance of a Java virtual machine; other virtual machine instances are likely to use a different origin.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nanoTime</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h3 id="数据拷贝"><a href="#数据拷贝" class="headerlink" title="数据拷贝"></a>数据拷贝</h3><p>说实话，不太理解为什么这个方法会放在这里。可能在虚拟机底层里，数组copy是一个基础功能吧。<br>很常用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将src数组srcPos位置开始的length元素复制到dest数组中，从dest数组中的destPos开始。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arraycopy</span><span class="hljs-params">(Object src,  <span class="hljs-type">int</span>  srcPos,Object dest, <span class="hljs-type">int</span> destPos, <span class="hljs-type">int</span> length)</span>;<br></code></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>返回对象的默认hashcode（即时被覆盖也不执行覆盖方法）<br>null 返回0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object&#x27;s class overrides hashCode(). The hash code for the null reference is zero.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">identityHashCode</span><span class="hljs-params">(Object x)</span>;<br></code></pre></td></tr></table></figure><h3 id="系统属性"><a href="#系统属性" class="headerlink" title="系统属性"></a>系统属性</h3><ul><li>系统属性列表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Key :  Description of Associated Value</span><br><span class="hljs-comment">// java.version :  Java Runtime Environment version</span><br><span class="hljs-comment">// java.vendor : Java Runtime Environment vendor</span><br><span class="hljs-comment">// java.vendor.url: Java vendor URL</span><br><span class="hljs-comment">// java.home:  Java installation directory</span><br><span class="hljs-comment">// java.vm.specification.version : Java Virtual Machine specification version</span><br><span class="hljs-comment">// java.vm.specification.vendor : Java Virtual Machine specification vendor</span><br><span class="hljs-comment">// java.vm.specification.name : Java Virtual Machine specification name</span><br><span class="hljs-comment">// java.vm.version : Java Virtual Machine implementation version</span><br><span class="hljs-comment">// java.vm.vendor : Java Virtual Machine implementation vendor</span><br><span class="hljs-comment">// java.vm.name : Java Virtual Machine implementation name</span><br><span class="hljs-comment">// java.specification.version : Java Runtime Environment specification version</span><br><span class="hljs-comment">// java.specification.vendor : Java Runtime Environment specification vendor</span><br><span class="hljs-comment">// java.specification.name : Java Runtime Environment specification name</span><br><span class="hljs-comment">// java.class.version : Java class format version number</span><br><span class="hljs-comment">// java.class.path : Java class path</span><br><span class="hljs-comment">// java.library.path : List of paths to search when loading libraries</span><br><span class="hljs-comment">// java.io.tmpdir : Default temp file path</span><br><span class="hljs-comment">// java.compiler : Name of JIT compiler to use</span><br><span class="hljs-comment">// java.ext.dirs : Path of extension directory or directories Deprecated. This property, and the mechanism which implements it, may be removed in a future release.</span><br><span class="hljs-comment">// os.name : Operating system name</span><br><span class="hljs-comment">// os.arch : Operating system architecture</span><br><span class="hljs-comment">// os.version : Operating system version</span><br><span class="hljs-comment">// file.separator : File separator (&quot;/&quot; on UNIX)</span><br><span class="hljs-comment">// path.separator : Path separator (&quot;:&quot; on UNIX)</span><br><span class="hljs-comment">// line.separator : Line separator (&quot;\n&quot; on UNIX)</span><br><span class="hljs-comment">// user.name : User&#x27;s account name</span><br><span class="hljs-comment">// user.home : User&#x27;s home directory</span><br><span class="hljs-comment">// user.dir : User&#x27;s current working directory</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Properties <span class="hljs-title function_">getProperties</span><span class="hljs-params">()</span><br><br><br></code></pre></td></tr></table></figure><ul><li>设置&#x2F;替换系统属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置系统属性：props 换替换原来的系统属性，而非新增</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties props)</span><br><br></code></pre></td></tr></table></figure><ul><li>设置key属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置key的属性，并返回上一个value值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">setProperty</span><span class="hljs-params">(String key, String value)</span> <br><br></code></pre></td></tr></table></figure><ul><li>删除key属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除key ，并返回上个value值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">clearProperty</span><span class="hljs-params">(String key)</span><br><br></code></pre></td></tr></table></figure><ul><li>查询key属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据key 查属性值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getProperty</span><span class="hljs-params">(String key)</span><br><span class="hljs-comment">// 根据key 查属性值，查不到返回默认值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getProperty</span><span class="hljs-params">(String key, String def)</span><br><br></code></pre></td></tr></table></figure><ul><li>系统换行符</li></ul><p>linux&#x2F;unix : \n<br>windows: \r\n</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// On UNIX systems, it returns &quot;\n&quot;; on Microsoft Windows systems it returns &quot;\r\n&quot;.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">lineSeparator</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><ul><li>系统环境变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 全部环境变量 k：v</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> java.util.Map&lt;String,String&gt; <span class="hljs-title function_">getenv</span><span class="hljs-params">()</span><br><br><span class="hljs-comment">// 某个k的环境变量值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getenv</span><span class="hljs-params">(String name)</span><br><br></code></pre></td></tr></table></figure><h3 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h3><ul><li>退出</li></ul><p>以某个状态终止虚拟机：非0 code 表示非正常结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Terminates the currently running Java Virtual Machine. The argument serves as a status code; by convention, a nonzero status code indicates abnormal termination.</span><br><span class="hljs-comment">// This method calls the exit method in class Runtime. This method never returns normally.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span> &#123;<br>    Runtime.getRuntime().exit(status);<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>垃圾回收</li></ul><p>执行垃圾回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Runs the garbage collector.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">gc</span><span class="hljs-params">()</span> &#123;<br>    Runtime.getRuntime().gc();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行Finalization</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runFinalization</span><span class="hljs-params">()</span> &#123;<br>    Runtime.getRuntime().runFinalization();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中常用的工具类(1) Objects</title>
    <link href="/2022/08/19/java-java-utils-1-Objects/"/>
    <url>/2022/08/19/java-java-utils-1-Objects/</url>
    
    <content type="html"><![CDATA[<p>在java生态中有着众多的工具类，而有的工具类是我们常用而且如果用的好，会极大提高代码的优雅性与效率的，同时也能避免重复的造轮子。接下来我们一起了解一下这些工具类。</p><p><strong>Objects</strong></p><p>Objects是jdk官方自带的工具类，首先我们来看看Objects的官方简介：</p><blockquote><p>This class consists of static utility methods for operating on objects. These utilities include null-safe or null-tolerant methods for computing the hash code of an object, returning a string for an object, and comparing two objects.Since: 1.7</p></blockquote><p>这是一个私有的工具类，用来提供一些对Object的操作方法，包括null值的安全操作，一级hash值的计算等实用方法。jdk1.7 就提供了。</p><p>Objects的提供的静态方法如下：<br><img src="/images/tech/java/java-Objects-methods.png" alt="Objects的工具方法"></p><p><strong>equals</strong></p><p>用来比较两个对象的是否相等，null安全的，可以替换繁琐的判空校验。实现逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object a, Object b)</span> &#123;<br>       <span class="hljs-keyword">return</span> (a == b) || (a != <span class="hljs-literal">null</span> &amp;&amp; a.equals(b));<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>deepEquals</strong></p><p>数组的深度比较，同样null安全的。实现逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deepEquals</span><span class="hljs-params">(Object a, Object b)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a == b)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-literal">null</span> || b == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> Arrays.deepEquals0(a, b);<br>    &#125;       <br></code></pre></td></tr></table></figure><p><strong>hashCode</strong></p><p>获取一个对象的hashCode，同样null安全的。实现逻辑：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> o != <span class="hljs-literal">null</span> ? o.hashCode() : <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>​        </p><p><strong>hash</strong></p><p>对一个数组求hash值，同样null安全的。实现逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object... values)</span> &#123;<br>      <span class="hljs-keyword">return</span> Arrays.hashCode(values);<br>  &#125; <br></code></pre></td></tr></table></figure><p><strong>toString</strong></p><p>调用对象o的toString方法，同样null安全的。不过这里要注意一下，如果是null的话，会返回null字符串。</p><p>相对应的，还有一个重载方法，toString(Object o, String nullDefault) 。 能够自定义null值的返回值，这个挺实用的。</p><p>实现逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">(Object o)</span> &#123;<br>      <span class="hljs-keyword">return</span> String.valueOf(o);<br>  &#125;<br><br># String.valueOf 实现<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">valueOf</span><span class="hljs-params">(Object obj)</span> &#123;<br>      <span class="hljs-keyword">return</span> (obj == <span class="hljs-literal">null</span>) ? <span class="hljs-string">&quot;null&quot;</span> : obj.toString();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">(Object o, String nullDefault)</span> &#123;<br>      <span class="hljs-keyword">return</span> (o != <span class="hljs-literal">null</span>) ? o.toString() : nullDefault;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>compare</strong></p><p>自定义实现大小比较逻辑，同样null安全的。实现逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(T a, T b, Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; c)</span> &#123;<br>        <span class="hljs-keyword">return</span> (a == b) ? <span class="hljs-number">0</span> :  c.compare(a, b);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>isNull</strong></p><p>判断对象是null, 可以用来替换 obj&#x3D;&#x3D;null 的写法，更优雅。 实现逻辑：</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isNull</span>(<span class="hljs-params"><span class="hljs-title class_">Object</span> obj</span>) &#123;<br>        <span class="hljs-keyword">return</span> obj == <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>​         </p><p><strong>nonNull</strong></p><p>判断对象非null, 可以用来替换 obj!&#x3D;null 的写法，更优雅。 实现逻辑：</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">nonNull</span>(<span class="hljs-params"><span class="hljs-title class_">Object</span> obj</span>) &#123;<br>        <span class="hljs-keyword">return</span> obj != <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>​      </p><p><strong>requireNonNull</strong></p><p>断言判断，要求一个对象是非空的。如果为空则抛出异常，有三个重载方法，可以自定义不同的异常message。</p><p>实现逻辑：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">requireNonNull</span>(<span class="hljs-params">T obj</span>) &#123;<br>       <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>       <span class="hljs-keyword">return</span> obj;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">requireNonNull</span>(<span class="hljs-params">T obj, <span class="hljs-title class_">String</span> message</span>) &#123;<br>       <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(message);<br>       <span class="hljs-keyword">return</span> obj;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">requireNonNull</span>(<span class="hljs-params">T obj, <span class="hljs-title class_">Supplier</span>&lt;<span class="hljs-title class_">String</span>&gt; messageSupplier</span>) &#123;<br>       <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(messageSupplier.<span class="hljs-title function_">get</span>());<br>       <span class="hljs-keyword">return</span> obj;<br>   &#125;<br></code></pre></td></tr></table></figure><p> 好了，jdk自动的Objects方法就介绍这些，有时间 我们再聊聊其他的常用工具类。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello world</title>
    <link href="/2022/08/18/hello-world/"/>
    <url>/2022/08/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>梦开始的地方</p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
